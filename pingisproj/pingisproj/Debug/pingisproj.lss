
pingisproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f14  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00088f14  00088f14  00010f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e0  20070000  00088f1c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a5e4  200709e0  00089900  000189e0  2**3
                  ALLOC
  4 .stack        00002004  2007afc4  00093ee4  000189e0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000189e0  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00018a09  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016d0b  00000000  00000000  00018a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003ec4  00000000  00000000  0002f76f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008ee3  00000000  00000000  00033633  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001080  00000000  00000000  0003c516  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f48  00000000  00000000  0003d596  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c95b  00000000  00000000  0003e4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017d35  00000000  00000000  0005ae39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006a403  00000000  00000000  00072b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003830  00000000  00000000  000dcf74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cfc8 	.word	0x2007cfc8
   80004:	000823d9 	.word	0x000823d9
   80008:	000823d5 	.word	0x000823d5
   8000c:	000823d5 	.word	0x000823d5
   80010:	000823d5 	.word	0x000823d5
   80014:	000823d5 	.word	0x000823d5
   80018:	000823d5 	.word	0x000823d5
	...
   8002c:	000806cd 	.word	0x000806cd
   80030:	000823d5 	.word	0x000823d5
   80034:	00000000 	.word	0x00000000
   80038:	00080749 	.word	0x00080749
   8003c:	00080785 	.word	0x00080785
   80040:	000823d5 	.word	0x000823d5
   80044:	000823d5 	.word	0x000823d5
   80048:	000823d5 	.word	0x000823d5
   8004c:	000823d5 	.word	0x000823d5
   80050:	000823d5 	.word	0x000823d5
   80054:	000823d5 	.word	0x000823d5
   80058:	000823d5 	.word	0x000823d5
   8005c:	000823d5 	.word	0x000823d5
   80060:	000823d5 	.word	0x000823d5
   80064:	000823d5 	.word	0x000823d5
   80068:	00000000 	.word	0x00000000
   8006c:	00082245 	.word	0x00082245
   80070:	00082259 	.word	0x00082259
   80074:	0008226d 	.word	0x0008226d
   80078:	00082281 	.word	0x00082281
	...
   80084:	000801f1 	.word	0x000801f1
   80088:	000823d5 	.word	0x000823d5
   8008c:	000823d5 	.word	0x000823d5
   80090:	000823d5 	.word	0x000823d5
   80094:	000823d5 	.word	0x000823d5
   80098:	000823d5 	.word	0x000823d5
   8009c:	000823d5 	.word	0x000823d5
   800a0:	000823d5 	.word	0x000823d5
   800a4:	00000000 	.word	0x00000000
   800a8:	000823d5 	.word	0x000823d5
   800ac:	000823d5 	.word	0x000823d5
   800b0:	000823d5 	.word	0x000823d5
   800b4:	000823d5 	.word	0x000823d5
   800b8:	000823d5 	.word	0x000823d5
   800bc:	000823d5 	.word	0x000823d5
   800c0:	000823d5 	.word	0x000823d5
   800c4:	000823d5 	.word	0x000823d5
   800c8:	000823d5 	.word	0x000823d5
   800cc:	000823d5 	.word	0x000823d5
   800d0:	000823d5 	.word	0x000823d5
   800d4:	000823d5 	.word	0x000823d5
   800d8:	000823d5 	.word	0x000823d5
   800dc:	000823d5 	.word	0x000823d5
   800e0:	000823d5 	.word	0x000823d5
   800e4:	000823d5 	.word	0x000823d5
   800e8:	000823d5 	.word	0x000823d5
   800ec:	000823d5 	.word	0x000823d5
   800f0:	000823d5 	.word	0x000823d5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709e0 	.word	0x200709e0
   80110:	00000000 	.word	0x00000000
   80114:	00088f1c 	.word	0x00088f1c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00088f1c 	.word	0x00088f1c
   80144:	200709e4 	.word	0x200709e4
   80148:	00088f1c 	.word	0x00088f1c
   8014c:	00000000 	.word	0x00000000

00080150 <adc_config>:

#include <asf.h>
#include "adc_func.h"

void adc_config(void)
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <adc_config+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <adc_config+0x44>)
   8015a:	4620      	mov	r0, r4
   8015c:	490e      	ldr	r1, [pc, #56]	; (80198 <adc_config+0x48>)
   8015e:	4a0f      	ldr	r2, [pc, #60]	; (8019c <adc_config+0x4c>)
   80160:	2300      	movs	r3, #0
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <adc_config+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	4620      	mov	r0, r4
   80168:	2100      	movs	r1, #0
   8016a:	460a      	mov	r2, r1
   8016c:	460b      	mov	r3, r1
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <adc_config+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES);
   80172:	4620      	mov	r0, r4
   80174:	2110      	movs	r1, #16
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <adc_config+0x58>)
   80178:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);
   8017a:	4620      	mov	r0, r4
   8017c:	210a      	movs	r1, #10
   8017e:	4b0b      	ldr	r3, [pc, #44]	; (801ac <adc_config+0x5c>)
   80180:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   80182:	4620      	mov	r0, r4
   80184:	2100      	movs	r1, #0
   80186:	460a      	mov	r2, r1
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <adc_config+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	00082381 	.word	0x00082381
   80194:	400c0000 	.word	0x400c0000
   80198:	0a037a00 	.word	0x0a037a00
   8019c:	01312d00 	.word	0x01312d00
   801a0:	00081b79 	.word	0x00081b79
   801a4:	00081bcd 	.word	0x00081bcd
   801a8:	00081bad 	.word	0x00081bad
   801ac:	00081bed 	.word	0x00081bed
   801b0:	00081bbd 	.word	0x00081bbd

000801b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801b4:	b9a8      	cbnz	r0, 801e2 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ba:	460c      	mov	r4, r1
   801bc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801be:	2a00      	cmp	r2, #0
   801c0:	dd0a      	ble.n	801d8 <_read+0x24>
   801c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801c4:	4e08      	ldr	r6, [pc, #32]	; (801e8 <_read+0x34>)
   801c6:	4d09      	ldr	r5, [pc, #36]	; (801ec <_read+0x38>)
   801c8:	6830      	ldr	r0, [r6, #0]
   801ca:	4621      	mov	r1, r4
   801cc:	682b      	ldr	r3, [r5, #0]
   801ce:	4798      	blx	r3
		ptr++;
   801d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	42bc      	cmp	r4, r7
   801d4:	d1f8      	bne.n	801c8 <_read+0x14>
   801d6:	e001      	b.n	801dc <_read+0x28>
   801d8:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   801dc:	4640      	mov	r0, r8
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801e2:	f04f 30ff 	mov.w	r0, #4294967295
   801e6:	4770      	bx	lr
   801e8:	2007aee0 	.word	0x2007aee0
   801ec:	2007aed8 	.word	0x2007aed8

000801f0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801f0:	b500      	push	{lr}
   801f2:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801f4:	4811      	ldr	r0, [pc, #68]	; (8023c <USART0_Handler+0x4c>)
   801f6:	f10d 0107 	add.w	r1, sp, #7
   801fa:	2201      	movs	r2, #1
   801fc:	4b10      	ldr	r3, [pc, #64]	; (80240 <USART0_Handler+0x50>)
   801fe:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80200:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80202:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80206:	2200      	movs	r2, #0
   80208:	4b0e      	ldr	r3, [pc, #56]	; (80244 <USART0_Handler+0x54>)
   8020a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8020c:	4b0e      	ldr	r3, [pc, #56]	; (80248 <USART0_Handler+0x58>)
   8020e:	781b      	ldrb	r3, [r3, #0]
   80210:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80214:	4a0d      	ldr	r2, [pc, #52]	; (8024c <USART0_Handler+0x5c>)
   80216:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80218:	2b9b      	cmp	r3, #155	; 0x9b
   8021a:	d103      	bne.n	80224 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8021c:	2200      	movs	r2, #0
   8021e:	4b0a      	ldr	r3, [pc, #40]	; (80248 <USART0_Handler+0x58>)
   80220:	701a      	strb	r2, [r3, #0]
   80222:	e002      	b.n	8022a <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   80224:	3301      	adds	r3, #1
   80226:	4a08      	ldr	r2, [pc, #32]	; (80248 <USART0_Handler+0x58>)
   80228:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8022a:	2201      	movs	r2, #1
   8022c:	4b05      	ldr	r3, [pc, #20]	; (80244 <USART0_Handler+0x54>)
   8022e:	701a      	strb	r2, [r3, #0]
   80230:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80234:	b662      	cpsie	i
}
   80236:	b003      	add	sp, #12
   80238:	f85d fb04 	ldr.w	pc, [sp], #4
   8023c:	40098000 	.word	0x40098000
   80240:	00081c21 	.word	0x00081c21
   80244:	20070138 	.word	0x20070138
   80248:	20070a98 	.word	0x20070a98
   8024c:	200709fc 	.word	0x200709fc

00080250 <motorshield_init>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80250:	4b09      	ldr	r3, [pc, #36]	; (80278 <motorshield_init+0x28>)
   80252:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80256:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8025c:	4a07      	ldr	r2, [pc, #28]	; (8027c <motorshield_init+0x2c>)
   8025e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80262:	6111      	str	r1, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80264:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80268:	6351      	str	r1, [r2, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8026a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8026e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80270:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80274:	631a      	str	r2, [r3, #48]	; 0x30
   80276:	4770      	bx	lr
   80278:	400e1000 	.word	0x400e1000
   8027c:	400e1200 	.word	0x400e1200

00080280 <pwm_config>:
#include "pwm_func.h"

static pwm_channel_t pwm_instance;

int pwm_config(void)
{
   80280:	b530      	push	{r4, r5, lr}
   80282:	b085      	sub	sp, #20
	if(pmc_enable_periph_clk(ID_PWM) == 0) {
   80284:	2024      	movs	r0, #36	; 0x24
   80286:	4b18      	ldr	r3, [pc, #96]	; (802e8 <pwm_config+0x68>)
   80288:	4798      	blx	r3
   8028a:	2800      	cmp	r0, #0
   8028c:	d128      	bne.n	802e0 <pwm_config+0x60>
		pwm_channel_disable(PWM, PWM_CHANNEL_0);
   8028e:	4d17      	ldr	r5, [pc, #92]	; (802ec <pwm_config+0x6c>)
   80290:	4628      	mov	r0, r5
   80292:	2100      	movs	r1, #0
   80294:	4b16      	ldr	r3, [pc, #88]	; (802f0 <pwm_config+0x70>)
   80296:	4798      	blx	r3
		pwm_clock_t pwmclock = {
   80298:	4b16      	ldr	r3, [pc, #88]	; (802f4 <pwm_config+0x74>)
   8029a:	9301      	str	r3, [sp, #4]
   8029c:	2400      	movs	r4, #0
   8029e:	9402      	str	r4, [sp, #8]
   802a0:	4b15      	ldr	r3, [pc, #84]	; (802f8 <pwm_config+0x78>)
   802a2:	9303      	str	r3, [sp, #12]
			.ul_clka = PWM_FREQUENCY * PWM_RESOLUTION,
			.ul_clkb = 0,
			.ul_mck = sysclk_get_cpu_hz()
		};
		pwm_init(PWM, &pwmclock);
   802a4:	4628      	mov	r0, r5
   802a6:	a901      	add	r1, sp, #4
   802a8:	4b14      	ldr	r3, [pc, #80]	; (802fc <pwm_config+0x7c>)
   802aa:	4798      	blx	r3
		pwm_instance.alignment = PWM_ALIGN_LEFT;
   802ac:	4914      	ldr	r1, [pc, #80]	; (80300 <pwm_config+0x80>)
   802ae:	810c      	strh	r4, [r1, #8]
		pwm_instance.polarity = PWM_LOW;
   802b0:	728c      	strb	r4, [r1, #10]
		pwm_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   802b2:	230b      	movs	r3, #11
   802b4:	604b      	str	r3, [r1, #4]
		pwm_instance.ul_period = PWM_RESOLUTION;
   802b6:	f240 33e7 	movw	r3, #999	; 0x3e7
   802ba:	610b      	str	r3, [r1, #16]
		pwm_instance.ul_duty = 0;
   802bc:	60cc      	str	r4, [r1, #12]
		pwm_instance.channel = PWM_CHANNEL_0;
   802be:	600c      	str	r4, [r1, #0]
		pwm_channel_init(PWM, &pwm_instance);
   802c0:	4628      	mov	r0, r5
   802c2:	4b10      	ldr	r3, [pc, #64]	; (80304 <pwm_config+0x84>)
   802c4:	4798      	blx	r3
		pio_set_peripheral(PWM_PIO, PWM_PIO_PERIPHERAL, PWM_PIO_PIN);
   802c6:	4810      	ldr	r0, [pc, #64]	; (80308 <pwm_config+0x88>)
   802c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   802d0:	4b0e      	ldr	r3, [pc, #56]	; (8030c <pwm_config+0x8c>)
   802d2:	4798      	blx	r3
		pwm_channel_enable(PWM, PWM_CHANNEL_0);
   802d4:	4628      	mov	r0, r5
   802d6:	4621      	mov	r1, r4
   802d8:	4b0d      	ldr	r3, [pc, #52]	; (80310 <pwm_config+0x90>)
   802da:	4798      	blx	r3
		return 0;
   802dc:	4620      	mov	r0, r4
   802de:	e000      	b.n	802e2 <pwm_config+0x62>
	}
	return 1;
   802e0:	2001      	movs	r0, #1
}
   802e2:	b005      	add	sp, #20
   802e4:	bd30      	pop	{r4, r5, pc}
   802e6:	bf00      	nop
   802e8:	00082381 	.word	0x00082381
   802ec:	40094000 	.word	0x40094000
   802f0:	00081e95 	.word	0x00081e95
   802f4:	000f3e58 	.word	0x000f3e58
   802f8:	0501bd00 	.word	0x0501bd00
   802fc:	00081d39 	.word	0x00081d39
   80300:	20070a9c 	.word	0x20070a9c
   80304:	00081d85 	.word	0x00081d85
   80308:	400e1000 	.word	0x400e1000
   8030c:	00081fdd 	.word	0x00081fdd
   80310:	00081e8d 	.word	0x00081e8d

00080314 <task_com>:
 */ 

#include <asf.h>

void task_com(void *pvParameters)
{
   80314:	b570      	push	{r4, r5, r6, lr}
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 10;
	
	xLastWakeTime = xTaskGetTickCount();
   80316:	4b06      	ldr	r3, [pc, #24]	; (80330 <task_com+0x1c>)
   80318:	4798      	blx	r3
	
	static char buffer[50] = {0};
		
	while(1)
	{
		gets(buffer);
   8031a:	4d06      	ldr	r5, [pc, #24]	; (80334 <task_com+0x20>)
   8031c:	4e06      	ldr	r6, [pc, #24]	; (80338 <task_com+0x24>)
		printf(buffer);
   8031e:	4c07      	ldr	r4, [pc, #28]	; (8033c <task_com+0x28>)
	
	static char buffer[50] = {0};
		
	while(1)
	{
		gets(buffer);
   80320:	4628      	mov	r0, r5
   80322:	47b0      	blx	r6
		printf(buffer);
   80324:	4628      	mov	r0, r5
   80326:	47a0      	blx	r4
		printf("\n");
   80328:	4805      	ldr	r0, [pc, #20]	; (80340 <task_com+0x2c>)
   8032a:	47a0      	blx	r4

	}
   8032c:	e7f8      	b.n	80320 <task_com+0xc>
   8032e:	bf00      	nop
   80330:	00081175 	.word	0x00081175
   80334:	20070ac4 	.word	0x20070ac4
   80338:	00082d8d 	.word	0x00082d8d
   8033c:	00082ded 	.word	0x00082ded
   80340:	00088ab0 	.word	0x00088ab0

00080344 <task_reg>:

#include <asf.h>
#include "common.h"

void task_reg(void *pvParameters)
{
   80344:	b508      	push	{r3, lr}
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = howoftenval;
	
	xLastWakeTime = xTaskGetTickCount();
   80346:	4b01      	ldr	r3, [pc, #4]	; (8034c <task_reg+0x8>)
   80348:	4798      	blx	r3
	
	while(1) {
		
	}
   8034a:	e7fe      	b.n	8034a <task_reg+0x6>
   8034c:	00081175 	.word	0x00081175

00080350 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80350:	b5f0      	push	{r4, r5, r6, r7, lr}
   80352:	b083      	sub	sp, #12
   80354:	4604      	mov	r4, r0
   80356:	460d      	mov	r5, r1
	uint32_t val = 0;
   80358:	2300      	movs	r3, #0
   8035a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8035c:	4b1f      	ldr	r3, [pc, #124]	; (803dc <usart_serial_getchar+0x8c>)
   8035e:	4298      	cmp	r0, r3
   80360:	d107      	bne.n	80372 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80362:	461f      	mov	r7, r3
   80364:	4e1e      	ldr	r6, [pc, #120]	; (803e0 <usart_serial_getchar+0x90>)
   80366:	4638      	mov	r0, r7
   80368:	4629      	mov	r1, r5
   8036a:	47b0      	blx	r6
   8036c:	2800      	cmp	r0, #0
   8036e:	d1fa      	bne.n	80366 <usart_serial_getchar+0x16>
   80370:	e019      	b.n	803a6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80372:	4b1c      	ldr	r3, [pc, #112]	; (803e4 <usart_serial_getchar+0x94>)
   80374:	4298      	cmp	r0, r3
   80376:	d109      	bne.n	8038c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80378:	461f      	mov	r7, r3
   8037a:	4e1b      	ldr	r6, [pc, #108]	; (803e8 <usart_serial_getchar+0x98>)
   8037c:	4638      	mov	r0, r7
   8037e:	a901      	add	r1, sp, #4
   80380:	47b0      	blx	r6
   80382:	2800      	cmp	r0, #0
   80384:	d1fa      	bne.n	8037c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80386:	9b01      	ldr	r3, [sp, #4]
   80388:	702b      	strb	r3, [r5, #0]
   8038a:	e019      	b.n	803c0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8038c:	4b17      	ldr	r3, [pc, #92]	; (803ec <usart_serial_getchar+0x9c>)
   8038e:	4298      	cmp	r0, r3
   80390:	d109      	bne.n	803a6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80392:	461e      	mov	r6, r3
   80394:	4c14      	ldr	r4, [pc, #80]	; (803e8 <usart_serial_getchar+0x98>)
   80396:	4630      	mov	r0, r6
   80398:	a901      	add	r1, sp, #4
   8039a:	47a0      	blx	r4
   8039c:	2800      	cmp	r0, #0
   8039e:	d1fa      	bne.n	80396 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   803a0:	9b01      	ldr	r3, [sp, #4]
   803a2:	702b      	strb	r3, [r5, #0]
   803a4:	e018      	b.n	803d8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   803a6:	4b12      	ldr	r3, [pc, #72]	; (803f0 <usart_serial_getchar+0xa0>)
   803a8:	429c      	cmp	r4, r3
   803aa:	d109      	bne.n	803c0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   803ac:	461e      	mov	r6, r3
   803ae:	4c0e      	ldr	r4, [pc, #56]	; (803e8 <usart_serial_getchar+0x98>)
   803b0:	4630      	mov	r0, r6
   803b2:	a901      	add	r1, sp, #4
   803b4:	47a0      	blx	r4
   803b6:	2800      	cmp	r0, #0
   803b8:	d1fa      	bne.n	803b0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   803ba:	9b01      	ldr	r3, [sp, #4]
   803bc:	702b      	strb	r3, [r5, #0]
   803be:	e00b      	b.n	803d8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   803c0:	4b0c      	ldr	r3, [pc, #48]	; (803f4 <usart_serial_getchar+0xa4>)
   803c2:	429c      	cmp	r4, r3
   803c4:	d108      	bne.n	803d8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   803c6:	461e      	mov	r6, r3
   803c8:	4c07      	ldr	r4, [pc, #28]	; (803e8 <usart_serial_getchar+0x98>)
   803ca:	4630      	mov	r0, r6
   803cc:	a901      	add	r1, sp, #4
   803ce:	47a0      	blx	r4
   803d0:	2800      	cmp	r0, #0
   803d2:	d1fa      	bne.n	803ca <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   803d4:	9b01      	ldr	r3, [sp, #4]
   803d6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   803d8:	b003      	add	sp, #12
   803da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   803dc:	400e0800 	.word	0x400e0800
   803e0:	00081ee5 	.word	0x00081ee5
   803e4:	40098000 	.word	0x40098000
   803e8:	00081c09 	.word	0x00081c09
   803ec:	4009c000 	.word	0x4009c000
   803f0:	400a0000 	.word	0x400a0000
   803f4:	400a4000 	.word	0x400a4000

000803f8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   803f8:	b570      	push	{r4, r5, r6, lr}
   803fa:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   803fc:	4b1e      	ldr	r3, [pc, #120]	; (80478 <usart_serial_putchar+0x80>)
   803fe:	4298      	cmp	r0, r3
   80400:	d108      	bne.n	80414 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80402:	461e      	mov	r6, r3
   80404:	4d1d      	ldr	r5, [pc, #116]	; (8047c <usart_serial_putchar+0x84>)
   80406:	4630      	mov	r0, r6
   80408:	4621      	mov	r1, r4
   8040a:	47a8      	blx	r5
   8040c:	2800      	cmp	r0, #0
   8040e:	d1fa      	bne.n	80406 <usart_serial_putchar+0xe>
		return 1;
   80410:	2001      	movs	r0, #1
   80412:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80414:	4b1a      	ldr	r3, [pc, #104]	; (80480 <usart_serial_putchar+0x88>)
   80416:	4298      	cmp	r0, r3
   80418:	d108      	bne.n	8042c <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   8041a:	461e      	mov	r6, r3
   8041c:	4d19      	ldr	r5, [pc, #100]	; (80484 <usart_serial_putchar+0x8c>)
   8041e:	4630      	mov	r0, r6
   80420:	4621      	mov	r1, r4
   80422:	47a8      	blx	r5
   80424:	2800      	cmp	r0, #0
   80426:	d1fa      	bne.n	8041e <usart_serial_putchar+0x26>
		return 1;
   80428:	2001      	movs	r0, #1
   8042a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8042c:	4b16      	ldr	r3, [pc, #88]	; (80488 <usart_serial_putchar+0x90>)
   8042e:	4298      	cmp	r0, r3
   80430:	d108      	bne.n	80444 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80432:	461e      	mov	r6, r3
   80434:	4d13      	ldr	r5, [pc, #76]	; (80484 <usart_serial_putchar+0x8c>)
   80436:	4630      	mov	r0, r6
   80438:	4621      	mov	r1, r4
   8043a:	47a8      	blx	r5
   8043c:	2800      	cmp	r0, #0
   8043e:	d1fa      	bne.n	80436 <usart_serial_putchar+0x3e>
		return 1;
   80440:	2001      	movs	r0, #1
   80442:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80444:	4b11      	ldr	r3, [pc, #68]	; (8048c <usart_serial_putchar+0x94>)
   80446:	4298      	cmp	r0, r3
   80448:	d108      	bne.n	8045c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   8044a:	461e      	mov	r6, r3
   8044c:	4d0d      	ldr	r5, [pc, #52]	; (80484 <usart_serial_putchar+0x8c>)
   8044e:	4630      	mov	r0, r6
   80450:	4621      	mov	r1, r4
   80452:	47a8      	blx	r5
   80454:	2800      	cmp	r0, #0
   80456:	d1fa      	bne.n	8044e <usart_serial_putchar+0x56>
		return 1;
   80458:	2001      	movs	r0, #1
   8045a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8045c:	4b0c      	ldr	r3, [pc, #48]	; (80490 <usart_serial_putchar+0x98>)
   8045e:	4298      	cmp	r0, r3
   80460:	d108      	bne.n	80474 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80462:	461e      	mov	r6, r3
   80464:	4d07      	ldr	r5, [pc, #28]	; (80484 <usart_serial_putchar+0x8c>)
   80466:	4630      	mov	r0, r6
   80468:	4621      	mov	r1, r4
   8046a:	47a8      	blx	r5
   8046c:	2800      	cmp	r0, #0
   8046e:	d1fa      	bne.n	80466 <usart_serial_putchar+0x6e>
		return 1;
   80470:	2001      	movs	r0, #1
   80472:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80474:	2000      	movs	r0, #0
}
   80476:	bd70      	pop	{r4, r5, r6, pc}
   80478:	400e0800 	.word	0x400e0800
   8047c:	00081ed5 	.word	0x00081ed5
   80480:	40098000 	.word	0x40098000
   80484:	00081bf5 	.word	0x00081bf5
   80488:	4009c000 	.word	0x4009c000
   8048c:	400a0000 	.word	0x400a0000
   80490:	400a4000 	.word	0x400a4000

00080494 <param_init>:

#include <asf.h>
#include "common.h"

void param_init(void)
{
   80494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80498:	b08e      	sub	sp, #56	; 0x38
	char buffer[50] = {0};
   8049a:	2300      	movs	r3, #0
   8049c:	9301      	str	r3, [sp, #4]
   8049e:	9302      	str	r3, [sp, #8]
   804a0:	9303      	str	r3, [sp, #12]
   804a2:	9304      	str	r3, [sp, #16]
   804a4:	9305      	str	r3, [sp, #20]
   804a6:	9306      	str	r3, [sp, #24]
   804a8:	9307      	str	r3, [sp, #28]
   804aa:	9308      	str	r3, [sp, #32]
   804ac:	9309      	str	r3, [sp, #36]	; 0x24
   804ae:	930a      	str	r3, [sp, #40]	; 0x28
   804b0:	930b      	str	r3, [sp, #44]	; 0x2c
   804b2:	930c      	str	r3, [sp, #48]	; 0x30
   804b4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	
	gets(buffer);
   804b8:	a801      	add	r0, sp, #4
   804ba:	4d23      	ldr	r5, [pc, #140]	; (80548 <param_init+0xb4>)
   804bc:	47a8      	blx	r5
	k_prop = (float)atoi(buffer)/1000;
   804be:	a801      	add	r0, sp, #4
   804c0:	4c22      	ldr	r4, [pc, #136]	; (8054c <param_init+0xb8>)
   804c2:	47a0      	blx	r4
   804c4:	4f22      	ldr	r7, [pc, #136]	; (80550 <param_init+0xbc>)
   804c6:	47b8      	blx	r7
   804c8:	4e22      	ldr	r6, [pc, #136]	; (80554 <param_init+0xc0>)
   804ca:	4923      	ldr	r1, [pc, #140]	; (80558 <param_init+0xc4>)
   804cc:	47b0      	blx	r6
   804ce:	4b23      	ldr	r3, [pc, #140]	; (8055c <param_init+0xc8>)
   804d0:	6018      	str	r0, [r3, #0]
	
	gets(buffer);
   804d2:	a801      	add	r0, sp, #4
   804d4:	47a8      	blx	r5
	k_int = (float)atoi(buffer)/1000;
   804d6:	a801      	add	r0, sp, #4
   804d8:	47a0      	blx	r4
   804da:	47b8      	blx	r7
   804dc:	491e      	ldr	r1, [pc, #120]	; (80558 <param_init+0xc4>)
   804de:	47b0      	blx	r6
   804e0:	4b1f      	ldr	r3, [pc, #124]	; (80560 <param_init+0xcc>)
   804e2:	6018      	str	r0, [r3, #0]
	
	gets(buffer);
   804e4:	a801      	add	r0, sp, #4
   804e6:	47a8      	blx	r5
	k_deriv = (float)atoi(buffer)/1000;
   804e8:	a801      	add	r0, sp, #4
   804ea:	47a0      	blx	r4
   804ec:	47b8      	blx	r7
   804ee:	491a      	ldr	r1, [pc, #104]	; (80558 <param_init+0xc4>)
   804f0:	47b0      	blx	r6
   804f2:	4b1c      	ldr	r3, [pc, #112]	; (80564 <param_init+0xd0>)
   804f4:	6018      	str	r0, [r3, #0]
	
	gets(buffer);
   804f6:	a801      	add	r0, sp, #4
   804f8:	47a8      	blx	r5
	shouldbeval = (int)atoi(buffer)/1000;
   804fa:	a801      	add	r0, sp, #4
   804fc:	47a0      	blx	r4
   804fe:	4e1a      	ldr	r6, [pc, #104]	; (80568 <param_init+0xd4>)
   80500:	fb86 2300 	smull	r2, r3, r6, r0
   80504:	17c0      	asrs	r0, r0, #31
   80506:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
   8050a:	4a18      	ldr	r2, [pc, #96]	; (8056c <param_init+0xd8>)
   8050c:	8013      	strh	r3, [r2, #0]
	
	gets(buffer);
   8050e:	a801      	add	r0, sp, #4
   80510:	47a8      	blx	r5
	howoftenval = (int)atoi(buffer)/1000;
   80512:	a801      	add	r0, sp, #4
   80514:	47a0      	blx	r4
   80516:	fb86 2300 	smull	r2, r3, r6, r0
   8051a:	17c0      	asrs	r0, r0, #31
   8051c:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
   80520:	4a13      	ldr	r2, [pc, #76]	; (80570 <param_init+0xdc>)
   80522:	8013      	strh	r3, [r2, #0]
   80524:	4c13      	ldr	r4, [pc, #76]	; (80574 <param_init+0xe0>)
   80526:	f504 78c8 	add.w	r8, r4, #400	; 0x190
	
	for (int i=0; i<100;i++)
	{
		gets(buffer);
   8052a:	462f      	mov	r7, r5
		conv_arr[i] = (float)atof(buffer);
   8052c:	4e12      	ldr	r6, [pc, #72]	; (80578 <param_init+0xe4>)
   8052e:	4d13      	ldr	r5, [pc, #76]	; (8057c <param_init+0xe8>)
	gets(buffer);
	howoftenval = (int)atoi(buffer)/1000;
	
	for (int i=0; i<100;i++)
	{
		gets(buffer);
   80530:	a801      	add	r0, sp, #4
   80532:	47b8      	blx	r7
		conv_arr[i] = (float)atof(buffer);
   80534:	a801      	add	r0, sp, #4
   80536:	47b0      	blx	r6
   80538:	47a8      	blx	r5
   8053a:	f844 0f04 	str.w	r0, [r4, #4]!
	shouldbeval = (int)atoi(buffer)/1000;
	
	gets(buffer);
	howoftenval = (int)atoi(buffer)/1000;
	
	for (int i=0; i<100;i++)
   8053e:	4544      	cmp	r4, r8
   80540:	d1f6      	bne.n	80530 <param_init+0x9c>
	{
		gets(buffer);
		conv_arr[i] = (float)atof(buffer);
	}
}
   80542:	b00e      	add	sp, #56	; 0x38
   80544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80548:	00082d8d 	.word	0x00082d8d
   8054c:	00082d39 	.word	0x00082d39
   80550:	0008299d 	.word	0x0008299d
   80554:	00082bad 	.word	0x00082bad
   80558:	447a0000 	.word	0x447a0000
   8055c:	2007afbc 	.word	0x2007afbc
   80560:	2007afb4 	.word	0x2007afb4
   80564:	2007afb0 	.word	0x2007afb0
   80568:	10624dd3 	.word	0x10624dd3
   8056c:	2007afb8 	.word	0x2007afb8
   80570:	2007afac 	.word	0x2007afac
   80574:	2007ad10 	.word	0x2007ad10
   80578:	00082d31 	.word	0x00082d31
   8057c:	00082789 	.word	0x00082789

00080580 <configure_console>:

void configure_console(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   80580:	b530      	push	{r4, r5, lr}
   80582:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80584:	2008      	movs	r0, #8
   80586:	4d12      	ldr	r5, [pc, #72]	; (805d0 <configure_console+0x50>)
   80588:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8058a:	4c12      	ldr	r4, [pc, #72]	; (805d4 <configure_console+0x54>)
   8058c:	4b12      	ldr	r3, [pc, #72]	; (805d8 <configure_console+0x58>)
   8058e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80590:	4a12      	ldr	r2, [pc, #72]	; (805dc <configure_console+0x5c>)
   80592:	4b13      	ldr	r3, [pc, #76]	; (805e0 <configure_console+0x60>)
   80594:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80596:	4a13      	ldr	r2, [pc, #76]	; (805e4 <configure_console+0x64>)
   80598:	4b13      	ldr	r3, [pc, #76]	; (805e8 <configure_console+0x68>)
   8059a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8059c:	4b13      	ldr	r3, [pc, #76]	; (805ec <configure_console+0x6c>)
   8059e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   805a0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   805a4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   805a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805aa:	9303      	str	r3, [sp, #12]
   805ac:	2008      	movs	r0, #8
   805ae:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   805b0:	4620      	mov	r0, r4
   805b2:	a901      	add	r1, sp, #4
   805b4:	4b0e      	ldr	r3, [pc, #56]	; (805f0 <configure_console+0x70>)
   805b6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   805b8:	4d0e      	ldr	r5, [pc, #56]	; (805f4 <configure_console+0x74>)
   805ba:	682b      	ldr	r3, [r5, #0]
   805bc:	6898      	ldr	r0, [r3, #8]
   805be:	2100      	movs	r1, #0
   805c0:	4c0d      	ldr	r4, [pc, #52]	; (805f8 <configure_console+0x78>)
   805c2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   805c4:	682b      	ldr	r3, [r5, #0]
   805c6:	6858      	ldr	r0, [r3, #4]
   805c8:	2100      	movs	r1, #0
   805ca:	47a0      	blx	r4
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   805cc:	b005      	add	sp, #20
   805ce:	bd30      	pop	{r4, r5, pc}
   805d0:	00082381 	.word	0x00082381
   805d4:	400e0800 	.word	0x400e0800
   805d8:	2007aee0 	.word	0x2007aee0
   805dc:	000803f9 	.word	0x000803f9
   805e0:	2007aedc 	.word	0x2007aedc
   805e4:	00080351 	.word	0x00080351
   805e8:	2007aed8 	.word	0x2007aed8
   805ec:	0501bd00 	.word	0x0501bd00
   805f0:	00081e9d 	.word	0x00081e9d
   805f4:	20070568 	.word	0x20070568
   805f8:	00083005 	.word	0x00083005

000805fc <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   805fc:	f100 0308 	add.w	r3, r0, #8
   80600:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80602:	f04f 32ff 	mov.w	r2, #4294967295
   80606:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80608:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8060a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   8060c:	2300      	movs	r3, #0
   8060e:	6003      	str	r3, [r0, #0]
   80610:	4770      	bx	lr
   80612:	bf00      	nop

00080614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80614:	2300      	movs	r3, #0
   80616:	6103      	str	r3, [r0, #16]
   80618:	4770      	bx	lr
   8061a:	bf00      	nop

0008061c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8061c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8061e:	685a      	ldr	r2, [r3, #4]
   80620:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80622:	6842      	ldr	r2, [r0, #4]
   80624:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80626:	685a      	ldr	r2, [r3, #4]
   80628:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8062a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8062c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8062e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80630:	6803      	ldr	r3, [r0, #0]
   80632:	3301      	adds	r3, #1
   80634:	6003      	str	r3, [r0, #0]
   80636:	4770      	bx	lr

00080638 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80638:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8063a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8063c:	f1b4 3fff 	cmp.w	r4, #4294967295
   80640:	d101      	bne.n	80646 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80642:	6903      	ldr	r3, [r0, #16]
   80644:	e00a      	b.n	8065c <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80646:	f100 0308 	add.w	r3, r0, #8
   8064a:	68c2      	ldr	r2, [r0, #12]
   8064c:	6812      	ldr	r2, [r2, #0]
   8064e:	4294      	cmp	r4, r2
   80650:	d304      	bcc.n	8065c <vListInsert+0x24>
   80652:	685b      	ldr	r3, [r3, #4]
   80654:	685a      	ldr	r2, [r3, #4]
   80656:	6812      	ldr	r2, [r2, #0]
   80658:	4294      	cmp	r4, r2
   8065a:	d2fa      	bcs.n	80652 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8065c:	685a      	ldr	r2, [r3, #4]
   8065e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80660:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80662:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80664:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80666:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80668:	6803      	ldr	r3, [r0, #0]
   8066a:	3301      	adds	r3, #1
   8066c:	6003      	str	r3, [r0, #0]
}
   8066e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80672:	4770      	bx	lr

00080674 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80674:	6843      	ldr	r3, [r0, #4]
   80676:	6882      	ldr	r2, [r0, #8]
   80678:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8067a:	6883      	ldr	r3, [r0, #8]
   8067c:	6842      	ldr	r2, [r0, #4]
   8067e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80680:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80682:	685a      	ldr	r2, [r3, #4]
   80684:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80686:	bf04      	itt	eq
   80688:	6882      	ldreq	r2, [r0, #8]
   8068a:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8068c:	2200      	movs	r2, #0
   8068e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80690:	681a      	ldr	r2, [r3, #0]
   80692:	3a01      	subs	r2, #1
   80694:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80696:	6818      	ldr	r0, [r3, #0]
}
   80698:	4770      	bx	lr
   8069a:	bf00      	nop

0008069c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   8069c:	4803      	ldr	r0, [pc, #12]	; (806ac <prvPortStartFirstTask+0x10>)
   8069e:	6800      	ldr	r0, [r0, #0]
   806a0:	6800      	ldr	r0, [r0, #0]
   806a2:	f380 8808 	msr	MSP, r0
   806a6:	b662      	cpsie	i
   806a8:	df00      	svc	0
   806aa:	bf00      	nop
   806ac:	e000ed08 	.word	0xe000ed08

000806b0 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   806b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   806b4:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   806b8:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   806bc:	2300      	movs	r3, #0
   806be:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   806c2:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   806c6:	3840      	subs	r0, #64	; 0x40
   806c8:	4770      	bx	lr
   806ca:	bf00      	nop

000806cc <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   806cc:	4b06      	ldr	r3, [pc, #24]	; (806e8 <pxCurrentTCBConst2>)
   806ce:	6819      	ldr	r1, [r3, #0]
   806d0:	6808      	ldr	r0, [r1, #0]
   806d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   806d6:	f380 8809 	msr	PSP, r0
   806da:	f04f 0000 	mov.w	r0, #0
   806de:	f380 8811 	msr	BASEPRI, r0
   806e2:	f04e 0e0d 	orr.w	lr, lr, #13
   806e6:	4770      	bx	lr

000806e8 <pxCurrentTCBConst2>:
   806e8:	2007abd0 	.word	0x2007abd0

000806ec <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   806ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806f0:	4b01      	ldr	r3, [pc, #4]	; (806f8 <vPortYieldFromISR+0xc>)
   806f2:	601a      	str	r2, [r3, #0]
   806f4:	4770      	bx	lr
   806f6:	bf00      	nop
   806f8:	e000ed04 	.word	0xe000ed04

000806fc <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   806fc:	f3ef 8011 	mrs	r0, BASEPRI
   80700:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80704:	f381 8811 	msr	BASEPRI, r1
   80708:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8070a:	2000      	movs	r0, #0

0008070c <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   8070c:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8070e:	4b03      	ldr	r3, [pc, #12]	; (8071c <vPortEnterCritical+0x10>)
   80710:	4798      	blx	r3
	uxCriticalNesting++;
   80712:	4a03      	ldr	r2, [pc, #12]	; (80720 <vPortEnterCritical+0x14>)
   80714:	6813      	ldr	r3, [r2, #0]
   80716:	3301      	adds	r3, #1
   80718:	6013      	str	r3, [r2, #0]
   8071a:	bd08      	pop	{r3, pc}
   8071c:	000806fd 	.word	0x000806fd
   80720:	2007012c 	.word	0x2007012c

00080724 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80724:	f380 8811 	msr	BASEPRI, r0
   80728:	4770      	bx	lr
   8072a:	bf00      	nop

0008072c <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   8072c:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   8072e:	4a04      	ldr	r2, [pc, #16]	; (80740 <vPortExitCritical+0x14>)
   80730:	6813      	ldr	r3, [r2, #0]
   80732:	3b01      	subs	r3, #1
   80734:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80736:	b913      	cbnz	r3, 8073e <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80738:	2000      	movs	r0, #0
   8073a:	4b02      	ldr	r3, [pc, #8]	; (80744 <vPortExitCritical+0x18>)
   8073c:	4798      	blx	r3
   8073e:	bd08      	pop	{r3, pc}
   80740:	2007012c 	.word	0x2007012c
   80744:	00080725 	.word	0x00080725

00080748 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80748:	f3ef 8009 	mrs	r0, PSP
   8074c:	4b0c      	ldr	r3, [pc, #48]	; (80780 <pxCurrentTCBConst>)
   8074e:	681a      	ldr	r2, [r3, #0]
   80750:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80754:	6010      	str	r0, [r2, #0]
   80756:	e92d 4008 	stmdb	sp!, {r3, lr}
   8075a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8075e:	f380 8811 	msr	BASEPRI, r0
   80762:	f000 fe6b 	bl	8143c <vTaskSwitchContext>
   80766:	f04f 0000 	mov.w	r0, #0
   8076a:	f380 8811 	msr	BASEPRI, r0
   8076e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80772:	6819      	ldr	r1, [r3, #0]
   80774:	6808      	ldr	r0, [r1, #0]
   80776:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8077a:	f380 8809 	msr	PSP, r0
   8077e:	4770      	bx	lr

00080780 <pxCurrentTCBConst>:
   80780:	2007abd0 	.word	0x2007abd0

00080784 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80784:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8078a:	4b05      	ldr	r3, [pc, #20]	; (807a0 <SysTick_Handler+0x1c>)
   8078c:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8078e:	4b05      	ldr	r3, [pc, #20]	; (807a4 <SysTick_Handler+0x20>)
   80790:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80792:	4b05      	ldr	r3, [pc, #20]	; (807a8 <SysTick_Handler+0x24>)
   80794:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80796:	2000      	movs	r0, #0
   80798:	4b04      	ldr	r3, [pc, #16]	; (807ac <SysTick_Handler+0x28>)
   8079a:	4798      	blx	r3
   8079c:	bd08      	pop	{r3, pc}
   8079e:	bf00      	nop
   807a0:	e000ed04 	.word	0xe000ed04
   807a4:	000806fd 	.word	0x000806fd
   807a8:	00081195 	.word	0x00081195
   807ac:	00080725 	.word	0x00080725

000807b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   807b0:	4a03      	ldr	r2, [pc, #12]	; (807c0 <vPortSetupTimerInterrupt+0x10>)
   807b2:	4b04      	ldr	r3, [pc, #16]	; (807c4 <vPortSetupTimerInterrupt+0x14>)
   807b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   807b6:	2207      	movs	r2, #7
   807b8:	3b04      	subs	r3, #4
   807ba:	601a      	str	r2, [r3, #0]
   807bc:	4770      	bx	lr
   807be:	bf00      	nop
   807c0:	0001481f 	.word	0x0001481f
   807c4:	e000e014 	.word	0xe000e014

000807c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   807c8:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   807ca:	4b09      	ldr	r3, [pc, #36]	; (807f0 <xPortStartScheduler+0x28>)
   807cc:	681a      	ldr	r2, [r3, #0]
   807ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   807d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   807d4:	681a      	ldr	r2, [r3, #0]
   807d6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   807da:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   807dc:	4b05      	ldr	r3, [pc, #20]	; (807f4 <xPortStartScheduler+0x2c>)
   807de:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   807e0:	2400      	movs	r4, #0
   807e2:	4b05      	ldr	r3, [pc, #20]	; (807f8 <xPortStartScheduler+0x30>)
   807e4:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   807e6:	4b05      	ldr	r3, [pc, #20]	; (807fc <xPortStartScheduler+0x34>)
   807e8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   807ea:	4620      	mov	r0, r4
   807ec:	bd10      	pop	{r4, pc}
   807ee:	bf00      	nop
   807f0:	e000ed20 	.word	0xe000ed20
   807f4:	000807b1 	.word	0x000807b1
   807f8:	2007012c 	.word	0x2007012c
   807fc:	0008069d 	.word	0x0008069d

00080800 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80800:	4a13      	ldr	r2, [pc, #76]	; (80850 <prvInsertBlockIntoFreeList+0x50>)
   80802:	e000      	b.n	80806 <prvInsertBlockIntoFreeList+0x6>
   80804:	461a      	mov	r2, r3
   80806:	6813      	ldr	r3, [r2, #0]
   80808:	4283      	cmp	r3, r0
   8080a:	d3fb      	bcc.n	80804 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   8080c:	b430      	push	{r4, r5}
   8080e:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80810:	6854      	ldr	r4, [r2, #4]
   80812:	1915      	adds	r5, r2, r4
   80814:	4285      	cmp	r5, r0
   80816:	d103      	bne.n	80820 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80818:	6868      	ldr	r0, [r5, #4]
   8081a:	4404      	add	r4, r0
   8081c:	6054      	str	r4, [r2, #4]
   8081e:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80820:	6842      	ldr	r2, [r0, #4]
   80822:	1884      	adds	r4, r0, r2
   80824:	429c      	cmp	r4, r3
   80826:	d10c      	bne.n	80842 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80828:	4b0a      	ldr	r3, [pc, #40]	; (80854 <prvInsertBlockIntoFreeList+0x54>)
   8082a:	681b      	ldr	r3, [r3, #0]
   8082c:	429c      	cmp	r4, r3
   8082e:	d006      	beq.n	8083e <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80830:	6863      	ldr	r3, [r4, #4]
   80832:	441a      	add	r2, r3
   80834:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80836:	680b      	ldr	r3, [r1, #0]
   80838:	681b      	ldr	r3, [r3, #0]
   8083a:	6003      	str	r3, [r0, #0]
   8083c:	e002      	b.n	80844 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8083e:	6004      	str	r4, [r0, #0]
   80840:	e000      	b.n	80844 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80842:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80844:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80846:	bf18      	it	ne
   80848:	6008      	strne	r0, [r1, #0]
	}
}
   8084a:	bc30      	pop	{r4, r5}
   8084c:	4770      	bx	lr
   8084e:	bf00      	nop
   80850:	2007aafc 	.word	0x2007aafc
   80854:	2007aaf8 	.word	0x2007aaf8

00080858 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80858:	b538      	push	{r3, r4, r5, lr}
   8085a:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   8085c:	4b29      	ldr	r3, [pc, #164]	; (80904 <pvPortMalloc+0xac>)
   8085e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80860:	4b29      	ldr	r3, [pc, #164]	; (80908 <pvPortMalloc+0xb0>)
   80862:	681b      	ldr	r3, [r3, #0]
   80864:	b99b      	cbnz	r3, 8088e <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80866:	4a29      	ldr	r2, [pc, #164]	; (8090c <pvPortMalloc+0xb4>)
   80868:	4b29      	ldr	r3, [pc, #164]	; (80910 <pvPortMalloc+0xb8>)
   8086a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8086c:	2100      	movs	r1, #0
   8086e:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80870:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80874:	1898      	adds	r0, r3, r2
   80876:	4d24      	ldr	r5, [pc, #144]	; (80908 <pvPortMalloc+0xb0>)
   80878:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   8087a:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   8087e:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80880:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80884:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80886:	4a23      	ldr	r2, [pc, #140]	; (80914 <pvPortMalloc+0xbc>)
   80888:	6813      	ldr	r3, [r2, #0]
   8088a:	3b10      	subs	r3, #16
   8088c:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   8088e:	2c00      	cmp	r4, #0
   80890:	d02e      	beq.n	808f0 <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80892:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80896:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8089a:	bf1c      	itt	ne
   8089c:	f022 0207 	bicne.w	r2, r2, #7
   808a0:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   808a2:	1e51      	subs	r1, r2, #1
   808a4:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   808a8:	4299      	cmp	r1, r3
   808aa:	d823      	bhi.n	808f4 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   808ac:	4917      	ldr	r1, [pc, #92]	; (8090c <pvPortMalloc+0xb4>)
   808ae:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   808b0:	e001      	b.n	808b6 <pvPortMalloc+0x5e>
   808b2:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   808b4:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   808b6:	6863      	ldr	r3, [r4, #4]
   808b8:	429a      	cmp	r2, r3
   808ba:	d902      	bls.n	808c2 <pvPortMalloc+0x6a>
   808bc:	6823      	ldr	r3, [r4, #0]
   808be:	2b00      	cmp	r3, #0
   808c0:	d1f7      	bne.n	808b2 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   808c2:	4b11      	ldr	r3, [pc, #68]	; (80908 <pvPortMalloc+0xb0>)
   808c4:	681b      	ldr	r3, [r3, #0]
   808c6:	429c      	cmp	r4, r3
   808c8:	d016      	beq.n	808f8 <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   808ca:	680d      	ldr	r5, [r1, #0]
   808cc:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   808ce:	6823      	ldr	r3, [r4, #0]
   808d0:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   808d2:	6863      	ldr	r3, [r4, #4]
   808d4:	1a9b      	subs	r3, r3, r2
   808d6:	2b20      	cmp	r3, #32
   808d8:	d904      	bls.n	808e4 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   808da:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   808dc:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   808de:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   808e0:	4b0d      	ldr	r3, [pc, #52]	; (80918 <pvPortMalloc+0xc0>)
   808e2:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   808e4:	4a0b      	ldr	r2, [pc, #44]	; (80914 <pvPortMalloc+0xbc>)
   808e6:	6813      	ldr	r3, [r2, #0]
   808e8:	6861      	ldr	r1, [r4, #4]
   808ea:	1a5b      	subs	r3, r3, r1
   808ec:	6013      	str	r3, [r2, #0]
   808ee:	e004      	b.n	808fa <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   808f0:	2500      	movs	r5, #0
   808f2:	e002      	b.n	808fa <pvPortMalloc+0xa2>
   808f4:	2500      	movs	r5, #0
   808f6:	e000      	b.n	808fa <pvPortMalloc+0xa2>
   808f8:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   808fa:	4b08      	ldr	r3, [pc, #32]	; (8091c <pvPortMalloc+0xc4>)
   808fc:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   808fe:	4628      	mov	r0, r5
   80900:	bd38      	pop	{r3, r4, r5, pc}
   80902:	bf00      	nop
   80904:	00081165 	.word	0x00081165
   80908:	2007aaf8 	.word	0x2007aaf8
   8090c:	2007aafc 	.word	0x2007aafc
   80910:	20070af8 	.word	0x20070af8
   80914:	20070130 	.word	0x20070130
   80918:	00080801 	.word	0x00080801
   8091c:	000812b5 	.word	0x000812b5

00080920 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80920:	b180      	cbz	r0, 80944 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80922:	b510      	push	{r4, lr}
   80924:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80926:	4b08      	ldr	r3, [pc, #32]	; (80948 <vPortFree+0x28>)
   80928:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   8092a:	4a08      	ldr	r2, [pc, #32]	; (8094c <vPortFree+0x2c>)
   8092c:	6811      	ldr	r1, [r2, #0]
   8092e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80932:	440b      	add	r3, r1
   80934:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80936:	f1a4 0010 	sub.w	r0, r4, #16
   8093a:	4b05      	ldr	r3, [pc, #20]	; (80950 <vPortFree+0x30>)
   8093c:	4798      	blx	r3
		}
		xTaskResumeAll();
   8093e:	4b05      	ldr	r3, [pc, #20]	; (80954 <vPortFree+0x34>)
   80940:	4798      	blx	r3
   80942:	bd10      	pop	{r4, pc}
   80944:	4770      	bx	lr
   80946:	bf00      	nop
   80948:	00081165 	.word	0x00081165
   8094c:	20070130 	.word	0x20070130
   80950:	00080801 	.word	0x00080801
   80954:	000812b5 	.word	0x000812b5

00080958 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80958:	b510      	push	{r4, lr}
   8095a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   8095c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8095e:	b93b      	cbnz	r3, 80970 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80960:	6803      	ldr	r3, [r0, #0]
   80962:	bb1b      	cbnz	r3, 809ac <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80964:	6840      	ldr	r0, [r0, #4]
   80966:	4b13      	ldr	r3, [pc, #76]	; (809b4 <prvCopyDataToQueue+0x5c>)
   80968:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8096a:	2300      	movs	r3, #0
   8096c:	6063      	str	r3, [r4, #4]
   8096e:	e01d      	b.n	809ac <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80970:	b96a      	cbnz	r2, 8098e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80972:	6880      	ldr	r0, [r0, #8]
   80974:	461a      	mov	r2, r3
   80976:	4b10      	ldr	r3, [pc, #64]	; (809b8 <prvCopyDataToQueue+0x60>)
   80978:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8097a:	68a2      	ldr	r2, [r4, #8]
   8097c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8097e:	4413      	add	r3, r2
   80980:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80982:	6862      	ldr	r2, [r4, #4]
   80984:	4293      	cmp	r3, r2
   80986:	d311      	bcc.n	809ac <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80988:	6823      	ldr	r3, [r4, #0]
   8098a:	60a3      	str	r3, [r4, #8]
   8098c:	e00e      	b.n	809ac <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8098e:	68c0      	ldr	r0, [r0, #12]
   80990:	461a      	mov	r2, r3
   80992:	4b09      	ldr	r3, [pc, #36]	; (809b8 <prvCopyDataToQueue+0x60>)
   80994:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80996:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80998:	425b      	negs	r3, r3
   8099a:	68e2      	ldr	r2, [r4, #12]
   8099c:	441a      	add	r2, r3
   8099e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   809a0:	6821      	ldr	r1, [r4, #0]
   809a2:	428a      	cmp	r2, r1
   809a4:	d202      	bcs.n	809ac <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   809a6:	6862      	ldr	r2, [r4, #4]
   809a8:	4413      	add	r3, r2
   809aa:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   809ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   809ae:	3301      	adds	r3, #1
   809b0:	63a3      	str	r3, [r4, #56]	; 0x38
   809b2:	bd10      	pop	{r4, pc}
   809b4:	0008176d 	.word	0x0008176d
   809b8:	00082e49 	.word	0x00082e49

000809bc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   809bc:	b538      	push	{r3, r4, r5, lr}
   809be:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   809c0:	6800      	ldr	r0, [r0, #0]
   809c2:	b158      	cbz	r0, 809dc <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   809c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   809c6:	68dc      	ldr	r4, [r3, #12]
   809c8:	4414      	add	r4, r2
   809ca:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   809cc:	685d      	ldr	r5, [r3, #4]
   809ce:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   809d0:	bf28      	it	cs
   809d2:	60d8      	strcs	r0, [r3, #12]
   809d4:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   809d6:	68d9      	ldr	r1, [r3, #12]
   809d8:	4b01      	ldr	r3, [pc, #4]	; (809e0 <prvCopyDataFromQueue+0x24>)
   809da:	4798      	blx	r3
   809dc:	bd38      	pop	{r3, r4, r5, pc}
   809de:	bf00      	nop
   809e0:	00082e49 	.word	0x00082e49

000809e4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   809e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   809e6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   809e8:	4b1e      	ldr	r3, [pc, #120]	; (80a64 <prvUnlockQueue+0x80>)
   809ea:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   809ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   809ee:	2b00      	cmp	r3, #0
   809f0:	dd13      	ble.n	80a1a <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   809f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   809f4:	b91b      	cbnz	r3, 809fe <prvUnlockQueue+0x1a>
   809f6:	e010      	b.n	80a1a <prvUnlockQueue+0x36>
   809f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   809fa:	b923      	cbnz	r3, 80a06 <prvUnlockQueue+0x22>
   809fc:	e00d      	b.n	80a1a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   809fe:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80a02:	4d19      	ldr	r5, [pc, #100]	; (80a68 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80a04:	4f19      	ldr	r7, [pc, #100]	; (80a6c <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80a06:	4630      	mov	r0, r6
   80a08:	47a8      	blx	r5
   80a0a:	b100      	cbz	r0, 80a0e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80a0c:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80a0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a10:	3b01      	subs	r3, #1
   80a12:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80a14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a16:	2b00      	cmp	r3, #0
   80a18:	dcee      	bgt.n	809f8 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80a1a:	f04f 33ff 	mov.w	r3, #4294967295
   80a1e:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80a20:	4b13      	ldr	r3, [pc, #76]	; (80a70 <prvUnlockQueue+0x8c>)
   80a22:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80a24:	4b0f      	ldr	r3, [pc, #60]	; (80a64 <prvUnlockQueue+0x80>)
   80a26:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80a28:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a2a:	2b00      	cmp	r3, #0
   80a2c:	dd13      	ble.n	80a56 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80a2e:	6923      	ldr	r3, [r4, #16]
   80a30:	b91b      	cbnz	r3, 80a3a <prvUnlockQueue+0x56>
   80a32:	e010      	b.n	80a56 <prvUnlockQueue+0x72>
   80a34:	6923      	ldr	r3, [r4, #16]
   80a36:	b923      	cbnz	r3, 80a42 <prvUnlockQueue+0x5e>
   80a38:	e00d      	b.n	80a56 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80a3a:	f104 0610 	add.w	r6, r4, #16
   80a3e:	4d0a      	ldr	r5, [pc, #40]	; (80a68 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80a40:	4f0a      	ldr	r7, [pc, #40]	; (80a6c <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80a42:	4630      	mov	r0, r6
   80a44:	47a8      	blx	r5
   80a46:	b100      	cbz	r0, 80a4a <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   80a48:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a4c:	3b01      	subs	r3, #1
   80a4e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80a50:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a52:	2b00      	cmp	r3, #0
   80a54:	dcee      	bgt.n	80a34 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80a56:	f04f 33ff 	mov.w	r3, #4294967295
   80a5a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80a5c:	4b04      	ldr	r3, [pc, #16]	; (80a70 <prvUnlockQueue+0x8c>)
   80a5e:	4798      	blx	r3
   80a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80a62:	bf00      	nop
   80a64:	0008070d 	.word	0x0008070d
   80a68:	00081585 	.word	0x00081585
   80a6c:	000816b5 	.word	0x000816b5
   80a70:	0008072d 	.word	0x0008072d

00080a74 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80a74:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80a76:	b918      	cbnz	r0, 80a80 <xQueueGenericReset+0xc>
   80a78:	4b17      	ldr	r3, [pc, #92]	; (80ad8 <xQueueGenericReset+0x64>)
   80a7a:	4798      	blx	r3
   80a7c:	bf00      	nop
   80a7e:	e7fd      	b.n	80a7c <xQueueGenericReset+0x8>
   80a80:	460d      	mov	r5, r1
   80a82:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80a84:	4b15      	ldr	r3, [pc, #84]	; (80adc <xQueueGenericReset+0x68>)
   80a86:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80a88:	6822      	ldr	r2, [r4, #0]
   80a8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80a8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a8e:	fb03 f301 	mul.w	r3, r3, r1
   80a92:	18d0      	adds	r0, r2, r3
   80a94:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80a96:	2000      	movs	r0, #0
   80a98:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80a9a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80a9c:	1a5b      	subs	r3, r3, r1
   80a9e:	4413      	add	r3, r2
   80aa0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80aa2:	f04f 33ff 	mov.w	r3, #4294967295
   80aa6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80aa8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80aaa:	b955      	cbnz	r5, 80ac2 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80aac:	6923      	ldr	r3, [r4, #16]
   80aae:	b17b      	cbz	r3, 80ad0 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80ab0:	f104 0010 	add.w	r0, r4, #16
   80ab4:	4b0a      	ldr	r3, [pc, #40]	; (80ae0 <xQueueGenericReset+0x6c>)
   80ab6:	4798      	blx	r3
   80ab8:	2801      	cmp	r0, #1
   80aba:	d109      	bne.n	80ad0 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80abc:	4b09      	ldr	r3, [pc, #36]	; (80ae4 <xQueueGenericReset+0x70>)
   80abe:	4798      	blx	r3
   80ac0:	e006      	b.n	80ad0 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80ac2:	f104 0010 	add.w	r0, r4, #16
   80ac6:	4d08      	ldr	r5, [pc, #32]	; (80ae8 <xQueueGenericReset+0x74>)
   80ac8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80aca:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80ace:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80ad0:	4b06      	ldr	r3, [pc, #24]	; (80aec <xQueueGenericReset+0x78>)
   80ad2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80ad4:	2001      	movs	r0, #1
   80ad6:	bd38      	pop	{r3, r4, r5, pc}
   80ad8:	000806fd 	.word	0x000806fd
   80adc:	0008070d 	.word	0x0008070d
   80ae0:	00081585 	.word	0x00081585
   80ae4:	000806ed 	.word	0x000806ed
   80ae8:	000805fd 	.word	0x000805fd
   80aec:	0008072d 	.word	0x0008072d

00080af0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80af2:	b1a0      	cbz	r0, 80b1e <xQueueGenericCreate+0x2e>
   80af4:	460d      	mov	r5, r1
   80af6:	4617      	mov	r7, r2
   80af8:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80afa:	2050      	movs	r0, #80	; 0x50
   80afc:	4b0e      	ldr	r3, [pc, #56]	; (80b38 <xQueueGenericCreate+0x48>)
   80afe:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80b00:	4604      	mov	r4, r0
   80b02:	b160      	cbz	r0, 80b1e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80b04:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80b08:	3001      	adds	r0, #1
   80b0a:	4b0b      	ldr	r3, [pc, #44]	; (80b38 <xQueueGenericCreate+0x48>)
   80b0c:	4798      	blx	r3
   80b0e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80b10:	b940      	cbnz	r0, 80b24 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80b12:	4620      	mov	r0, r4
   80b14:	4b09      	ldr	r3, [pc, #36]	; (80b3c <xQueueGenericCreate+0x4c>)
   80b16:	4798      	blx	r3
   80b18:	e001      	b.n	80b1e <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80b1a:	bf00      	nop
   80b1c:	e7fd      	b.n	80b1a <xQueueGenericCreate+0x2a>
   80b1e:	4b08      	ldr	r3, [pc, #32]	; (80b40 <xQueueGenericCreate+0x50>)
   80b20:	4798      	blx	r3
   80b22:	e7fa      	b.n	80b1a <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80b24:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80b26:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80b28:	4620      	mov	r0, r4
   80b2a:	2101      	movs	r1, #1
   80b2c:	4b05      	ldr	r3, [pc, #20]	; (80b44 <xQueueGenericCreate+0x54>)
   80b2e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80b30:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80b34:	4620      	mov	r0, r4
   80b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b38:	00080859 	.word	0x00080859
   80b3c:	00080921 	.word	0x00080921
   80b40:	000806fd 	.word	0x000806fd
   80b44:	00080a75 	.word	0x00080a75

00080b48 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b4c:	b085      	sub	sp, #20
   80b4e:	9201      	str	r2, [sp, #4]
   80b50:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80b52:	b918      	cbnz	r0, 80b5c <xQueueGenericSend+0x14>
   80b54:	4b38      	ldr	r3, [pc, #224]	; (80c38 <xQueueGenericSend+0xf0>)
   80b56:	4798      	blx	r3
   80b58:	bf00      	nop
   80b5a:	e7fd      	b.n	80b58 <xQueueGenericSend+0x10>
   80b5c:	468a      	mov	sl, r1
   80b5e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80b60:	b929      	cbnz	r1, 80b6e <xQueueGenericSend+0x26>
   80b62:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b64:	b12b      	cbz	r3, 80b72 <xQueueGenericSend+0x2a>
   80b66:	4b34      	ldr	r3, [pc, #208]	; (80c38 <xQueueGenericSend+0xf0>)
   80b68:	4798      	blx	r3
   80b6a:	bf00      	nop
   80b6c:	e7fd      	b.n	80b6a <xQueueGenericSend+0x22>
   80b6e:	2700      	movs	r7, #0
   80b70:	e000      	b.n	80b74 <xQueueGenericSend+0x2c>
   80b72:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80b74:	4e31      	ldr	r6, [pc, #196]	; (80c3c <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80b76:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80c64 <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80b7a:	4d31      	ldr	r5, [pc, #196]	; (80c40 <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80b7c:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80b7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80b80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80b82:	429a      	cmp	r2, r3
   80b84:	d212      	bcs.n	80bac <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80b86:	4620      	mov	r0, r4
   80b88:	4651      	mov	r1, sl
   80b8a:	9a00      	ldr	r2, [sp, #0]
   80b8c:	4b2d      	ldr	r3, [pc, #180]	; (80c44 <xQueueGenericSend+0xfc>)
   80b8e:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b92:	b13b      	cbz	r3, 80ba4 <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80b94:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b98:	4b2b      	ldr	r3, [pc, #172]	; (80c48 <xQueueGenericSend+0x100>)
   80b9a:	4798      	blx	r3
   80b9c:	2801      	cmp	r0, #1
   80b9e:	d101      	bne.n	80ba4 <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80ba0:	4b2a      	ldr	r3, [pc, #168]	; (80c4c <xQueueGenericSend+0x104>)
   80ba2:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80ba4:	4b26      	ldr	r3, [pc, #152]	; (80c40 <xQueueGenericSend+0xf8>)
   80ba6:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80ba8:	2001      	movs	r0, #1
   80baa:	e042      	b.n	80c32 <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80bac:	9b01      	ldr	r3, [sp, #4]
   80bae:	b91b      	cbnz	r3, 80bb8 <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80bb0:	4b23      	ldr	r3, [pc, #140]	; (80c40 <xQueueGenericSend+0xf8>)
   80bb2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80bb4:	2000      	movs	r0, #0
   80bb6:	e03c      	b.n	80c32 <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
   80bb8:	b917      	cbnz	r7, 80bc0 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80bba:	a802      	add	r0, sp, #8
   80bbc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80bbe:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80bc0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80bc2:	4b23      	ldr	r3, [pc, #140]	; (80c50 <xQueueGenericSend+0x108>)
   80bc4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80bc6:	47b0      	blx	r6
   80bc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bca:	f1b3 3fff 	cmp.w	r3, #4294967295
   80bce:	bf04      	itt	eq
   80bd0:	2300      	moveq	r3, #0
   80bd2:	6463      	streq	r3, [r4, #68]	; 0x44
   80bd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80bda:	bf04      	itt	eq
   80bdc:	2300      	moveq	r3, #0
   80bde:	64a3      	streq	r3, [r4, #72]	; 0x48
   80be0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80be2:	a802      	add	r0, sp, #8
   80be4:	a901      	add	r1, sp, #4
   80be6:	4b1b      	ldr	r3, [pc, #108]	; (80c54 <xQueueGenericSend+0x10c>)
   80be8:	4798      	blx	r3
   80bea:	b9e0      	cbnz	r0, 80c26 <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80bec:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80bee:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80bf2:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80bf6:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80bf8:	45c1      	cmp	r9, r8
   80bfa:	d10e      	bne.n	80c1a <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80bfc:	f104 0010 	add.w	r0, r4, #16
   80c00:	9901      	ldr	r1, [sp, #4]
   80c02:	4b15      	ldr	r3, [pc, #84]	; (80c58 <xQueueGenericSend+0x110>)
   80c04:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80c06:	4620      	mov	r0, r4
   80c08:	4b14      	ldr	r3, [pc, #80]	; (80c5c <xQueueGenericSend+0x114>)
   80c0a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80c0c:	4b14      	ldr	r3, [pc, #80]	; (80c60 <xQueueGenericSend+0x118>)
   80c0e:	4798      	blx	r3
   80c10:	2800      	cmp	r0, #0
   80c12:	d1b3      	bne.n	80b7c <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
   80c14:	4b0d      	ldr	r3, [pc, #52]	; (80c4c <xQueueGenericSend+0x104>)
   80c16:	4798      	blx	r3
   80c18:	e7b0      	b.n	80b7c <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80c1a:	4620      	mov	r0, r4
   80c1c:	4b0f      	ldr	r3, [pc, #60]	; (80c5c <xQueueGenericSend+0x114>)
   80c1e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80c20:	4b0f      	ldr	r3, [pc, #60]	; (80c60 <xQueueGenericSend+0x118>)
   80c22:	4798      	blx	r3
   80c24:	e7aa      	b.n	80b7c <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80c26:	4620      	mov	r0, r4
   80c28:	4b0c      	ldr	r3, [pc, #48]	; (80c5c <xQueueGenericSend+0x114>)
   80c2a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80c2c:	4b0c      	ldr	r3, [pc, #48]	; (80c60 <xQueueGenericSend+0x118>)
   80c2e:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80c30:	2000      	movs	r0, #0
		}
	}
}
   80c32:	b005      	add	sp, #20
   80c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c38:	000806fd 	.word	0x000806fd
   80c3c:	0008070d 	.word	0x0008070d
   80c40:	0008072d 	.word	0x0008072d
   80c44:	00080959 	.word	0x00080959
   80c48:	00081585 	.word	0x00081585
   80c4c:	000806ed 	.word	0x000806ed
   80c50:	00081165 	.word	0x00081165
   80c54:	00081631 	.word	0x00081631
   80c58:	000814e1 	.word	0x000814e1
   80c5c:	000809e5 	.word	0x000809e5
   80c60:	000812b5 	.word	0x000812b5
   80c64:	00081609 	.word	0x00081609

00080c68 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80c6c:	b918      	cbnz	r0, 80c76 <xQueueGenericSendFromISR+0xe>
   80c6e:	4b1e      	ldr	r3, [pc, #120]	; (80ce8 <xQueueGenericSendFromISR+0x80>)
   80c70:	4798      	blx	r3
   80c72:	bf00      	nop
   80c74:	e7fd      	b.n	80c72 <xQueueGenericSendFromISR+0xa>
   80c76:	460e      	mov	r6, r1
   80c78:	4615      	mov	r5, r2
   80c7a:	4698      	mov	r8, r3
   80c7c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80c7e:	b929      	cbnz	r1, 80c8c <xQueueGenericSendFromISR+0x24>
   80c80:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80c82:	b11b      	cbz	r3, 80c8c <xQueueGenericSendFromISR+0x24>
   80c84:	4b18      	ldr	r3, [pc, #96]	; (80ce8 <xQueueGenericSendFromISR+0x80>)
   80c86:	4798      	blx	r3
   80c88:	bf00      	nop
   80c8a:	e7fd      	b.n	80c88 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80c8c:	4b16      	ldr	r3, [pc, #88]	; (80ce8 <xQueueGenericSendFromISR+0x80>)
   80c8e:	4798      	blx	r3
   80c90:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80c92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80c96:	429a      	cmp	r2, r3
   80c98:	d218      	bcs.n	80ccc <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80c9a:	4620      	mov	r0, r4
   80c9c:	4631      	mov	r1, r6
   80c9e:	4642      	mov	r2, r8
   80ca0:	4b12      	ldr	r3, [pc, #72]	; (80cec <xQueueGenericSendFromISR+0x84>)
   80ca2:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80ca4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80caa:	d10a      	bne.n	80cc2 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80cae:	b17b      	cbz	r3, 80cd0 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80cb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80cb4:	4b0e      	ldr	r3, [pc, #56]	; (80cf0 <xQueueGenericSendFromISR+0x88>)
   80cb6:	4798      	blx	r3
   80cb8:	b160      	cbz	r0, 80cd4 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80cba:	b16d      	cbz	r5, 80cd8 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80cbc:	2401      	movs	r4, #1
   80cbe:	602c      	str	r4, [r5, #0]
   80cc0:	e00b      	b.n	80cda <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80cc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80cc4:	3301      	adds	r3, #1
   80cc6:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80cc8:	2401      	movs	r4, #1
   80cca:	e006      	b.n	80cda <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80ccc:	2400      	movs	r4, #0
   80cce:	e004      	b.n	80cda <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80cd0:	2401      	movs	r4, #1
   80cd2:	e002      	b.n	80cda <xQueueGenericSendFromISR+0x72>
   80cd4:	2401      	movs	r4, #1
   80cd6:	e000      	b.n	80cda <xQueueGenericSendFromISR+0x72>
   80cd8:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80cda:	4638      	mov	r0, r7
   80cdc:	4b05      	ldr	r3, [pc, #20]	; (80cf4 <xQueueGenericSendFromISR+0x8c>)
   80cde:	4798      	blx	r3

	return xReturn;
}
   80ce0:	4620      	mov	r0, r4
   80ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ce6:	bf00      	nop
   80ce8:	000806fd 	.word	0x000806fd
   80cec:	00080959 	.word	0x00080959
   80cf0:	00081585 	.word	0x00081585
   80cf4:	00080725 	.word	0x00080725

00080cf8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80cfc:	b085      	sub	sp, #20
   80cfe:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80d00:	b918      	cbnz	r0, 80d0a <xQueueGenericReceive+0x12>
   80d02:	4b46      	ldr	r3, [pc, #280]	; (80e1c <xQueueGenericReceive+0x124>)
   80d04:	4798      	blx	r3
   80d06:	bf00      	nop
   80d08:	e7fd      	b.n	80d06 <xQueueGenericReceive+0xe>
   80d0a:	4689      	mov	r9, r1
   80d0c:	469a      	mov	sl, r3
   80d0e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d10:	b929      	cbnz	r1, 80d1e <xQueueGenericReceive+0x26>
   80d12:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80d14:	b12b      	cbz	r3, 80d22 <xQueueGenericReceive+0x2a>
   80d16:	4b41      	ldr	r3, [pc, #260]	; (80e1c <xQueueGenericReceive+0x124>)
   80d18:	4798      	blx	r3
   80d1a:	bf00      	nop
   80d1c:	e7fd      	b.n	80d1a <xQueueGenericReceive+0x22>
   80d1e:	2700      	movs	r7, #0
   80d20:	e000      	b.n	80d24 <xQueueGenericReceive+0x2c>
   80d22:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80d24:	4e3e      	ldr	r6, [pc, #248]	; (80e20 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80d26:	f8df b128 	ldr.w	fp, [pc, #296]	; 80e50 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80d2a:	4d3e      	ldr	r5, [pc, #248]	; (80e24 <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80d2c:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80d2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80d30:	b343      	cbz	r3, 80d84 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80d32:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80d34:	4620      	mov	r0, r4
   80d36:	4649      	mov	r1, r9
   80d38:	4b3b      	ldr	r3, [pc, #236]	; (80e28 <xQueueGenericReceive+0x130>)
   80d3a:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80d3c:	f1ba 0f00 	cmp.w	sl, #0
   80d40:	d112      	bne.n	80d68 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80d44:	3b01      	subs	r3, #1
   80d46:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80d48:	6823      	ldr	r3, [r4, #0]
   80d4a:	b913      	cbnz	r3, 80d52 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80d4c:	4b37      	ldr	r3, [pc, #220]	; (80e2c <xQueueGenericReceive+0x134>)
   80d4e:	4798      	blx	r3
   80d50:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80d52:	6923      	ldr	r3, [r4, #16]
   80d54:	b193      	cbz	r3, 80d7c <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80d56:	f104 0010 	add.w	r0, r4, #16
   80d5a:	4b35      	ldr	r3, [pc, #212]	; (80e30 <xQueueGenericReceive+0x138>)
   80d5c:	4798      	blx	r3
   80d5e:	2801      	cmp	r0, #1
   80d60:	d10c      	bne.n	80d7c <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   80d62:	4b34      	ldr	r3, [pc, #208]	; (80e34 <xQueueGenericReceive+0x13c>)
   80d64:	4798      	blx	r3
   80d66:	e009      	b.n	80d7c <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80d68:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80d6c:	b133      	cbz	r3, 80d7c <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80d6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d72:	4b2f      	ldr	r3, [pc, #188]	; (80e30 <xQueueGenericReceive+0x138>)
   80d74:	4798      	blx	r3
   80d76:	b108      	cbz	r0, 80d7c <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80d78:	4b2e      	ldr	r3, [pc, #184]	; (80e34 <xQueueGenericReceive+0x13c>)
   80d7a:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80d7c:	4b29      	ldr	r3, [pc, #164]	; (80e24 <xQueueGenericReceive+0x12c>)
   80d7e:	4798      	blx	r3
				return pdPASS;
   80d80:	2001      	movs	r0, #1
   80d82:	e048      	b.n	80e16 <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80d84:	9b01      	ldr	r3, [sp, #4]
   80d86:	b91b      	cbnz	r3, 80d90 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80d88:	4b26      	ldr	r3, [pc, #152]	; (80e24 <xQueueGenericReceive+0x12c>)
   80d8a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80d8c:	2000      	movs	r0, #0
   80d8e:	e042      	b.n	80e16 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   80d90:	b917      	cbnz	r7, 80d98 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80d92:	a802      	add	r0, sp, #8
   80d94:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80d96:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80d98:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80d9a:	4b27      	ldr	r3, [pc, #156]	; (80e38 <xQueueGenericReceive+0x140>)
   80d9c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80d9e:	47b0      	blx	r6
   80da0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80da2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80da6:	bf04      	itt	eq
   80da8:	2300      	moveq	r3, #0
   80daa:	6463      	streq	r3, [r4, #68]	; 0x44
   80dac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80dae:	f1b3 3fff 	cmp.w	r3, #4294967295
   80db2:	bf04      	itt	eq
   80db4:	2300      	moveq	r3, #0
   80db6:	64a3      	streq	r3, [r4, #72]	; 0x48
   80db8:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80dba:	a802      	add	r0, sp, #8
   80dbc:	a901      	add	r1, sp, #4
   80dbe:	4b1f      	ldr	r3, [pc, #124]	; (80e3c <xQueueGenericReceive+0x144>)
   80dc0:	4798      	blx	r3
   80dc2:	bb10      	cbnz	r0, 80e0a <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80dc4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80dc6:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80dca:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80dcc:	f1b8 0f00 	cmp.w	r8, #0
   80dd0:	d115      	bne.n	80dfe <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80dd2:	6823      	ldr	r3, [r4, #0]
   80dd4:	b923      	cbnz	r3, 80de0 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   80dd6:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80dd8:	6860      	ldr	r0, [r4, #4]
   80dda:	4b19      	ldr	r3, [pc, #100]	; (80e40 <xQueueGenericReceive+0x148>)
   80ddc:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80dde:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80de0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80de4:	9901      	ldr	r1, [sp, #4]
   80de6:	4b17      	ldr	r3, [pc, #92]	; (80e44 <xQueueGenericReceive+0x14c>)
   80de8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80dea:	4620      	mov	r0, r4
   80dec:	4b16      	ldr	r3, [pc, #88]	; (80e48 <xQueueGenericReceive+0x150>)
   80dee:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80df0:	4b16      	ldr	r3, [pc, #88]	; (80e4c <xQueueGenericReceive+0x154>)
   80df2:	4798      	blx	r3
   80df4:	2800      	cmp	r0, #0
   80df6:	d199      	bne.n	80d2c <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   80df8:	4b0e      	ldr	r3, [pc, #56]	; (80e34 <xQueueGenericReceive+0x13c>)
   80dfa:	4798      	blx	r3
   80dfc:	e796      	b.n	80d2c <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80dfe:	4620      	mov	r0, r4
   80e00:	4b11      	ldr	r3, [pc, #68]	; (80e48 <xQueueGenericReceive+0x150>)
   80e02:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80e04:	4b11      	ldr	r3, [pc, #68]	; (80e4c <xQueueGenericReceive+0x154>)
   80e06:	4798      	blx	r3
   80e08:	e790      	b.n	80d2c <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80e0a:	4620      	mov	r0, r4
   80e0c:	4b0e      	ldr	r3, [pc, #56]	; (80e48 <xQueueGenericReceive+0x150>)
   80e0e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80e10:	4b0e      	ldr	r3, [pc, #56]	; (80e4c <xQueueGenericReceive+0x154>)
   80e12:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   80e14:	2000      	movs	r0, #0
		}
	}
}
   80e16:	b005      	add	sp, #20
   80e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e1c:	000806fd 	.word	0x000806fd
   80e20:	0008070d 	.word	0x0008070d
   80e24:	0008072d 	.word	0x0008072d
   80e28:	000809bd 	.word	0x000809bd
   80e2c:	000816c1 	.word	0x000816c1
   80e30:	00081585 	.word	0x00081585
   80e34:	000806ed 	.word	0x000806ed
   80e38:	00081165 	.word	0x00081165
   80e3c:	00081631 	.word	0x00081631
   80e40:	000816ed 	.word	0x000816ed
   80e44:	000814e1 	.word	0x000814e1
   80e48:	000809e5 	.word	0x000809e5
   80e4c:	000812b5 	.word	0x000812b5
   80e50:	00081609 	.word	0x00081609

00080e54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80e54:	b538      	push	{r3, r4, r5, lr}
   80e56:	4604      	mov	r4, r0
   80e58:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80e5a:	4b0d      	ldr	r3, [pc, #52]	; (80e90 <vQueueWaitForMessageRestricted+0x3c>)
   80e5c:	4798      	blx	r3
   80e5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80e60:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e64:	bf04      	itt	eq
   80e66:	2300      	moveq	r3, #0
   80e68:	6463      	streq	r3, [r4, #68]	; 0x44
   80e6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e70:	bf04      	itt	eq
   80e72:	2300      	moveq	r3, #0
   80e74:	64a3      	streq	r3, [r4, #72]	; 0x48
   80e76:	4b07      	ldr	r3, [pc, #28]	; (80e94 <vQueueWaitForMessageRestricted+0x40>)
   80e78:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80e7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80e7c:	b923      	cbnz	r3, 80e88 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80e7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e82:	4629      	mov	r1, r5
   80e84:	4b04      	ldr	r3, [pc, #16]	; (80e98 <vQueueWaitForMessageRestricted+0x44>)
   80e86:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80e88:	4620      	mov	r0, r4
   80e8a:	4b04      	ldr	r3, [pc, #16]	; (80e9c <vQueueWaitForMessageRestricted+0x48>)
   80e8c:	4798      	blx	r3
   80e8e:	bd38      	pop	{r3, r4, r5, pc}
   80e90:	0008070d 	.word	0x0008070d
   80e94:	0008072d 	.word	0x0008072d
   80e98:	00081541 	.word	0x00081541
   80e9c:	000809e5 	.word	0x000809e5

00080ea0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80ea0:	b510      	push	{r4, lr}
   80ea2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80ea4:	4b0e      	ldr	r3, [pc, #56]	; (80ee0 <prvAddCurrentTaskToDelayedList+0x40>)
   80ea6:	681b      	ldr	r3, [r3, #0]
   80ea8:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80eaa:	4b0e      	ldr	r3, [pc, #56]	; (80ee4 <prvAddCurrentTaskToDelayedList+0x44>)
   80eac:	681b      	ldr	r3, [r3, #0]
   80eae:	4298      	cmp	r0, r3
   80eb0:	d207      	bcs.n	80ec2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80eb2:	4b0d      	ldr	r3, [pc, #52]	; (80ee8 <prvAddCurrentTaskToDelayedList+0x48>)
   80eb4:	6818      	ldr	r0, [r3, #0]
   80eb6:	4b0a      	ldr	r3, [pc, #40]	; (80ee0 <prvAddCurrentTaskToDelayedList+0x40>)
   80eb8:	6819      	ldr	r1, [r3, #0]
   80eba:	3104      	adds	r1, #4
   80ebc:	4b0b      	ldr	r3, [pc, #44]	; (80eec <prvAddCurrentTaskToDelayedList+0x4c>)
   80ebe:	4798      	blx	r3
   80ec0:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80ec2:	4b0b      	ldr	r3, [pc, #44]	; (80ef0 <prvAddCurrentTaskToDelayedList+0x50>)
   80ec4:	6818      	ldr	r0, [r3, #0]
   80ec6:	4b06      	ldr	r3, [pc, #24]	; (80ee0 <prvAddCurrentTaskToDelayedList+0x40>)
   80ec8:	6819      	ldr	r1, [r3, #0]
   80eca:	3104      	adds	r1, #4
   80ecc:	4b07      	ldr	r3, [pc, #28]	; (80eec <prvAddCurrentTaskToDelayedList+0x4c>)
   80ece:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80ed0:	4b08      	ldr	r3, [pc, #32]	; (80ef4 <prvAddCurrentTaskToDelayedList+0x54>)
   80ed2:	681b      	ldr	r3, [r3, #0]
   80ed4:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80ed6:	bf3c      	itt	cc
   80ed8:	4b06      	ldrcc	r3, [pc, #24]	; (80ef4 <prvAddCurrentTaskToDelayedList+0x54>)
   80eda:	601c      	strcc	r4, [r3, #0]
   80edc:	bd10      	pop	{r4, pc}
   80ede:	bf00      	nop
   80ee0:	2007abd0 	.word	0x2007abd0
   80ee4:	2007abec 	.word	0x2007abec
   80ee8:	2007abf0 	.word	0x2007abf0
   80eec:	00080639 	.word	0x00080639
   80ef0:	2007ab1c 	.word	0x2007ab1c
   80ef4:	20070134 	.word	0x20070134

00080ef8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80efc:	b083      	sub	sp, #12
   80efe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   80f00:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   80f04:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   80f06:	9001      	str	r0, [sp, #4]
   80f08:	b918      	cbnz	r0, 80f12 <xTaskGenericCreate+0x1a>
   80f0a:	4b62      	ldr	r3, [pc, #392]	; (81094 <xTaskGenericCreate+0x19c>)
   80f0c:	4798      	blx	r3
   80f0e:	bf00      	nop
   80f10:	e7fd      	b.n	80f0e <xTaskGenericCreate+0x16>
   80f12:	4689      	mov	r9, r1
   80f14:	4615      	mov	r5, r2
   80f16:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80f18:	2f04      	cmp	r7, #4
   80f1a:	d903      	bls.n	80f24 <xTaskGenericCreate+0x2c>
   80f1c:	4b5d      	ldr	r3, [pc, #372]	; (81094 <xTaskGenericCreate+0x19c>)
   80f1e:	4798      	blx	r3
   80f20:	bf00      	nop
   80f22:	e7fd      	b.n	80f20 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80f24:	204c      	movs	r0, #76	; 0x4c
   80f26:	4b5c      	ldr	r3, [pc, #368]	; (81098 <xTaskGenericCreate+0x1a0>)
   80f28:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80f2a:	4604      	mov	r4, r0
   80f2c:	2800      	cmp	r0, #0
   80f2e:	f000 80ab 	beq.w	81088 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80f32:	2e00      	cmp	r6, #0
   80f34:	f040 80a5 	bne.w	81082 <xTaskGenericCreate+0x18a>
   80f38:	00a8      	lsls	r0, r5, #2
   80f3a:	4b57      	ldr	r3, [pc, #348]	; (81098 <xTaskGenericCreate+0x1a0>)
   80f3c:	4798      	blx	r3
   80f3e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   80f40:	b918      	cbnz	r0, 80f4a <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   80f42:	4620      	mov	r0, r4
   80f44:	4b55      	ldr	r3, [pc, #340]	; (8109c <xTaskGenericCreate+0x1a4>)
   80f46:	4798      	blx	r3
   80f48:	e09e      	b.n	81088 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80f4a:	21a5      	movs	r1, #165	; 0xa5
   80f4c:	00aa      	lsls	r2, r5, #2
   80f4e:	4b54      	ldr	r3, [pc, #336]	; (810a0 <xTaskGenericCreate+0x1a8>)
   80f50:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80f52:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80f56:	3d01      	subs	r5, #1
   80f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80f5a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80f5e:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80f62:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80f66:	4649      	mov	r1, r9
   80f68:	220a      	movs	r2, #10
   80f6a:	4b4e      	ldr	r3, [pc, #312]	; (810a4 <xTaskGenericCreate+0x1ac>)
   80f6c:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80f6e:	2300      	movs	r3, #0
   80f70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   80f74:	463e      	mov	r6, r7
   80f76:	2f04      	cmp	r7, #4
   80f78:	bf28      	it	cs
   80f7a:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   80f7c:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   80f7e:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80f80:	f104 0904 	add.w	r9, r4, #4
   80f84:	4648      	mov	r0, r9
   80f86:	f8df a16c 	ldr.w	sl, [pc, #364]	; 810f4 <xTaskGenericCreate+0x1fc>
   80f8a:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80f8c:	f104 0018 	add.w	r0, r4, #24
   80f90:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80f92:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80f94:	f1c6 0605 	rsb	r6, r6, #5
   80f98:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80f9a:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80f9c:	4628      	mov	r0, r5
   80f9e:	9901      	ldr	r1, [sp, #4]
   80fa0:	465a      	mov	r2, fp
   80fa2:	4b41      	ldr	r3, [pc, #260]	; (810a8 <xTaskGenericCreate+0x1b0>)
   80fa4:	4798      	blx	r3
   80fa6:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80fa8:	f010 0f07 	tst.w	r0, #7
   80fac:	d003      	beq.n	80fb6 <xTaskGenericCreate+0xbe>
   80fae:	4b39      	ldr	r3, [pc, #228]	; (81094 <xTaskGenericCreate+0x19c>)
   80fb0:	4798      	blx	r3
   80fb2:	bf00      	nop
   80fb4:	e7fd      	b.n	80fb2 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   80fb6:	f1b8 0f00 	cmp.w	r8, #0
   80fba:	d001      	beq.n	80fc0 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80fbc:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   80fc0:	4b3a      	ldr	r3, [pc, #232]	; (810ac <xTaskGenericCreate+0x1b4>)
   80fc2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   80fc4:	4a3a      	ldr	r2, [pc, #232]	; (810b0 <xTaskGenericCreate+0x1b8>)
   80fc6:	6813      	ldr	r3, [r2, #0]
   80fc8:	3301      	adds	r3, #1
   80fca:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80fcc:	4b39      	ldr	r3, [pc, #228]	; (810b4 <xTaskGenericCreate+0x1bc>)
   80fce:	681b      	ldr	r3, [r3, #0]
   80fd0:	bb0b      	cbnz	r3, 81016 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   80fd2:	4b38      	ldr	r3, [pc, #224]	; (810b4 <xTaskGenericCreate+0x1bc>)
   80fd4:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80fd6:	6813      	ldr	r3, [r2, #0]
   80fd8:	2b01      	cmp	r3, #1
   80fda:	d126      	bne.n	8102a <xTaskGenericCreate+0x132>
   80fdc:	4d36      	ldr	r5, [pc, #216]	; (810b8 <xTaskGenericCreate+0x1c0>)
   80fde:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80fe2:	4e36      	ldr	r6, [pc, #216]	; (810bc <xTaskGenericCreate+0x1c4>)
   80fe4:	4628      	mov	r0, r5
   80fe6:	47b0      	blx	r6
   80fe8:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   80fea:	4545      	cmp	r5, r8
   80fec:	d1fa      	bne.n	80fe4 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80fee:	f8df 8108 	ldr.w	r8, [pc, #264]	; 810f8 <xTaskGenericCreate+0x200>
   80ff2:	4640      	mov	r0, r8
   80ff4:	4d31      	ldr	r5, [pc, #196]	; (810bc <xTaskGenericCreate+0x1c4>)
   80ff6:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80ff8:	4e31      	ldr	r6, [pc, #196]	; (810c0 <xTaskGenericCreate+0x1c8>)
   80ffa:	4630      	mov	r0, r6
   80ffc:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80ffe:	4831      	ldr	r0, [pc, #196]	; (810c4 <xTaskGenericCreate+0x1cc>)
   81000:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81002:	4831      	ldr	r0, [pc, #196]	; (810c8 <xTaskGenericCreate+0x1d0>)
   81004:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81006:	4831      	ldr	r0, [pc, #196]	; (810cc <xTaskGenericCreate+0x1d4>)
   81008:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   8100a:	4b31      	ldr	r3, [pc, #196]	; (810d0 <xTaskGenericCreate+0x1d8>)
   8100c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81010:	4b30      	ldr	r3, [pc, #192]	; (810d4 <xTaskGenericCreate+0x1dc>)
   81012:	601e      	str	r6, [r3, #0]
   81014:	e009      	b.n	8102a <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81016:	4b30      	ldr	r3, [pc, #192]	; (810d8 <xTaskGenericCreate+0x1e0>)
   81018:	681b      	ldr	r3, [r3, #0]
   8101a:	b933      	cbnz	r3, 8102a <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8101c:	4b25      	ldr	r3, [pc, #148]	; (810b4 <xTaskGenericCreate+0x1bc>)
   8101e:	681b      	ldr	r3, [r3, #0]
   81020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81022:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   81024:	bf24      	itt	cs
   81026:	4b23      	ldrcs	r3, [pc, #140]	; (810b4 <xTaskGenericCreate+0x1bc>)
   81028:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8102a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8102c:	4b2b      	ldr	r3, [pc, #172]	; (810dc <xTaskGenericCreate+0x1e4>)
   8102e:	681b      	ldr	r3, [r3, #0]
   81030:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81032:	bf84      	itt	hi
   81034:	4b29      	ldrhi	r3, [pc, #164]	; (810dc <xTaskGenericCreate+0x1e4>)
   81036:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81038:	4a29      	ldr	r2, [pc, #164]	; (810e0 <xTaskGenericCreate+0x1e8>)
   8103a:	6813      	ldr	r3, [r2, #0]
   8103c:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   8103e:	3301      	adds	r3, #1
   81040:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81042:	4b28      	ldr	r3, [pc, #160]	; (810e4 <xTaskGenericCreate+0x1ec>)
   81044:	681b      	ldr	r3, [r3, #0]
   81046:	4298      	cmp	r0, r3
   81048:	bf84      	itt	hi
   8104a:	4b26      	ldrhi	r3, [pc, #152]	; (810e4 <xTaskGenericCreate+0x1ec>)
   8104c:	6018      	strhi	r0, [r3, #0]
   8104e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81052:	4b19      	ldr	r3, [pc, #100]	; (810b8 <xTaskGenericCreate+0x1c0>)
   81054:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81058:	4649      	mov	r1, r9
   8105a:	4b23      	ldr	r3, [pc, #140]	; (810e8 <xTaskGenericCreate+0x1f0>)
   8105c:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   8105e:	4b23      	ldr	r3, [pc, #140]	; (810ec <xTaskGenericCreate+0x1f4>)
   81060:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81062:	4b1d      	ldr	r3, [pc, #116]	; (810d8 <xTaskGenericCreate+0x1e0>)
   81064:	681b      	ldr	r3, [r3, #0]
   81066:	b143      	cbz	r3, 8107a <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81068:	4b12      	ldr	r3, [pc, #72]	; (810b4 <xTaskGenericCreate+0x1bc>)
   8106a:	681b      	ldr	r3, [r3, #0]
   8106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8106e:	429f      	cmp	r7, r3
   81070:	d905      	bls.n	8107e <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   81072:	4b1f      	ldr	r3, [pc, #124]	; (810f0 <xTaskGenericCreate+0x1f8>)
   81074:	4798      	blx	r3
   81076:	2001      	movs	r0, #1
   81078:	e008      	b.n	8108c <xTaskGenericCreate+0x194>
   8107a:	2001      	movs	r0, #1
   8107c:	e006      	b.n	8108c <xTaskGenericCreate+0x194>
   8107e:	2001      	movs	r0, #1
   81080:	e004      	b.n	8108c <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81082:	6306      	str	r6, [r0, #48]	; 0x30
   81084:	4630      	mov	r0, r6
   81086:	e760      	b.n	80f4a <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81088:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   8108c:	b003      	add	sp, #12
   8108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81092:	bf00      	nop
   81094:	000806fd 	.word	0x000806fd
   81098:	00080859 	.word	0x00080859
   8109c:	00080921 	.word	0x00080921
   810a0:	00082f35 	.word	0x00082f35
   810a4:	000831fd 	.word	0x000831fd
   810a8:	000806b1 	.word	0x000806b1
   810ac:	0008070d 	.word	0x0008070d
   810b0:	2007abf8 	.word	0x2007abf8
   810b4:	2007abd0 	.word	0x2007abd0
   810b8:	2007ab54 	.word	0x2007ab54
   810bc:	000805fd 	.word	0x000805fd
   810c0:	2007ab3c 	.word	0x2007ab3c
   810c4:	2007abd4 	.word	0x2007abd4
   810c8:	2007abb8 	.word	0x2007abb8
   810cc:	2007ab08 	.word	0x2007ab08
   810d0:	2007ab1c 	.word	0x2007ab1c
   810d4:	2007abf0 	.word	0x2007abf0
   810d8:	2007ab20 	.word	0x2007ab20
   810dc:	2007ac00 	.word	0x2007ac00
   810e0:	2007abf4 	.word	0x2007abf4
   810e4:	2007ab50 	.word	0x2007ab50
   810e8:	0008061d 	.word	0x0008061d
   810ec:	0008072d 	.word	0x0008072d
   810f0:	000806ed 	.word	0x000806ed
   810f4:	00080615 	.word	0x00080615
   810f8:	2007ab28 	.word	0x2007ab28

000810fc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   810fc:	b510      	push	{r4, lr}
   810fe:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81100:	2300      	movs	r3, #0
   81102:	9300      	str	r3, [sp, #0]
   81104:	9301      	str	r3, [sp, #4]
   81106:	9302      	str	r3, [sp, #8]
   81108:	9303      	str	r3, [sp, #12]
   8110a:	480e      	ldr	r0, [pc, #56]	; (81144 <vTaskStartScheduler+0x48>)
   8110c:	490e      	ldr	r1, [pc, #56]	; (81148 <vTaskStartScheduler+0x4c>)
   8110e:	2282      	movs	r2, #130	; 0x82
   81110:	4c0e      	ldr	r4, [pc, #56]	; (8114c <vTaskStartScheduler+0x50>)
   81112:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81114:	2801      	cmp	r0, #1
   81116:	d10e      	bne.n	81136 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   81118:	4b0d      	ldr	r3, [pc, #52]	; (81150 <vTaskStartScheduler+0x54>)
   8111a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   8111c:	2801      	cmp	r0, #1
   8111e:	d10a      	bne.n	81136 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81120:	4b0c      	ldr	r3, [pc, #48]	; (81154 <vTaskStartScheduler+0x58>)
   81122:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81124:	2201      	movs	r2, #1
   81126:	4b0c      	ldr	r3, [pc, #48]	; (81158 <vTaskStartScheduler+0x5c>)
   81128:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8112a:	2200      	movs	r2, #0
   8112c:	4b0b      	ldr	r3, [pc, #44]	; (8115c <vTaskStartScheduler+0x60>)
   8112e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81130:	4b0b      	ldr	r3, [pc, #44]	; (81160 <vTaskStartScheduler+0x64>)
   81132:	4798      	blx	r3
   81134:	e004      	b.n	81140 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81136:	b918      	cbnz	r0, 81140 <vTaskStartScheduler+0x44>
   81138:	4b06      	ldr	r3, [pc, #24]	; (81154 <vTaskStartScheduler+0x58>)
   8113a:	4798      	blx	r3
   8113c:	bf00      	nop
   8113e:	e7fd      	b.n	8113c <vTaskStartScheduler+0x40>
}
   81140:	b004      	add	sp, #16
   81142:	bd10      	pop	{r4, pc}
   81144:	000813b9 	.word	0x000813b9
   81148:	00088ab4 	.word	0x00088ab4
   8114c:	00080ef9 	.word	0x00080ef9
   81150:	00081865 	.word	0x00081865
   81154:	000806fd 	.word	0x000806fd
   81158:	2007ab20 	.word	0x2007ab20
   8115c:	2007abec 	.word	0x2007abec
   81160:	000807c9 	.word	0x000807c9

00081164 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81164:	4a02      	ldr	r2, [pc, #8]	; (81170 <vTaskSuspendAll+0xc>)
   81166:	6813      	ldr	r3, [r2, #0]
   81168:	3301      	adds	r3, #1
   8116a:	6013      	str	r3, [r2, #0]
   8116c:	4770      	bx	lr
   8116e:	bf00      	nop
   81170:	2007abe8 	.word	0x2007abe8

00081174 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81174:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81176:	4b04      	ldr	r3, [pc, #16]	; (81188 <xTaskGetTickCount+0x14>)
   81178:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8117a:	4b04      	ldr	r3, [pc, #16]	; (8118c <xTaskGetTickCount+0x18>)
   8117c:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   8117e:	4b04      	ldr	r3, [pc, #16]	; (81190 <xTaskGetTickCount+0x1c>)
   81180:	4798      	blx	r3

	return xTicks;
}
   81182:	4620      	mov	r0, r4
   81184:	bd10      	pop	{r4, pc}
   81186:	bf00      	nop
   81188:	0008070d 	.word	0x0008070d
   8118c:	2007abec 	.word	0x2007abec
   81190:	0008072d 	.word	0x0008072d

00081194 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81198:	4b3a      	ldr	r3, [pc, #232]	; (81284 <vTaskIncrementTick+0xf0>)
   8119a:	681b      	ldr	r3, [r3, #0]
   8119c:	2b00      	cmp	r3, #0
   8119e:	d16b      	bne.n	81278 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   811a0:	4b39      	ldr	r3, [pc, #228]	; (81288 <vTaskIncrementTick+0xf4>)
   811a2:	681a      	ldr	r2, [r3, #0]
   811a4:	3201      	adds	r2, #1
   811a6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   811a8:	681b      	ldr	r3, [r3, #0]
   811aa:	bb03      	cbnz	r3, 811ee <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   811ac:	4b37      	ldr	r3, [pc, #220]	; (8128c <vTaskIncrementTick+0xf8>)
   811ae:	681b      	ldr	r3, [r3, #0]
   811b0:	681b      	ldr	r3, [r3, #0]
   811b2:	b11b      	cbz	r3, 811bc <vTaskIncrementTick+0x28>
   811b4:	4b36      	ldr	r3, [pc, #216]	; (81290 <vTaskIncrementTick+0xfc>)
   811b6:	4798      	blx	r3
   811b8:	bf00      	nop
   811ba:	e7fd      	b.n	811b8 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   811bc:	4b33      	ldr	r3, [pc, #204]	; (8128c <vTaskIncrementTick+0xf8>)
   811be:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   811c0:	4a34      	ldr	r2, [pc, #208]	; (81294 <vTaskIncrementTick+0x100>)
   811c2:	6810      	ldr	r0, [r2, #0]
   811c4:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   811c6:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   811c8:	4933      	ldr	r1, [pc, #204]	; (81298 <vTaskIncrementTick+0x104>)
   811ca:	680a      	ldr	r2, [r1, #0]
   811cc:	3201      	adds	r2, #1
   811ce:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   811d0:	681b      	ldr	r3, [r3, #0]
   811d2:	681b      	ldr	r3, [r3, #0]
   811d4:	b923      	cbnz	r3, 811e0 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   811d6:	f04f 32ff 	mov.w	r2, #4294967295
   811da:	4b30      	ldr	r3, [pc, #192]	; (8129c <vTaskIncrementTick+0x108>)
   811dc:	601a      	str	r2, [r3, #0]
   811de:	e006      	b.n	811ee <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   811e0:	4b2a      	ldr	r3, [pc, #168]	; (8128c <vTaskIncrementTick+0xf8>)
   811e2:	681b      	ldr	r3, [r3, #0]
   811e4:	68db      	ldr	r3, [r3, #12]
   811e6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   811e8:	685a      	ldr	r2, [r3, #4]
   811ea:	4b2c      	ldr	r3, [pc, #176]	; (8129c <vTaskIncrementTick+0x108>)
   811ec:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   811ee:	4b26      	ldr	r3, [pc, #152]	; (81288 <vTaskIncrementTick+0xf4>)
   811f0:	681a      	ldr	r2, [r3, #0]
   811f2:	4b2a      	ldr	r3, [pc, #168]	; (8129c <vTaskIncrementTick+0x108>)
   811f4:	681b      	ldr	r3, [r3, #0]
   811f6:	429a      	cmp	r2, r3
   811f8:	d342      	bcc.n	81280 <vTaskIncrementTick+0xec>
   811fa:	4b24      	ldr	r3, [pc, #144]	; (8128c <vTaskIncrementTick+0xf8>)
   811fc:	681b      	ldr	r3, [r3, #0]
   811fe:	681b      	ldr	r3, [r3, #0]
   81200:	b16b      	cbz	r3, 8121e <vTaskIncrementTick+0x8a>
   81202:	4b22      	ldr	r3, [pc, #136]	; (8128c <vTaskIncrementTick+0xf8>)
   81204:	681b      	ldr	r3, [r3, #0]
   81206:	68db      	ldr	r3, [r3, #12]
   81208:	68dc      	ldr	r4, [r3, #12]
   8120a:	6863      	ldr	r3, [r4, #4]
   8120c:	4a1e      	ldr	r2, [pc, #120]	; (81288 <vTaskIncrementTick+0xf4>)
   8120e:	6812      	ldr	r2, [r2, #0]
   81210:	4293      	cmp	r3, r2
   81212:	d813      	bhi.n	8123c <vTaskIncrementTick+0xa8>
   81214:	4e22      	ldr	r6, [pc, #136]	; (812a0 <vTaskIncrementTick+0x10c>)
   81216:	4f23      	ldr	r7, [pc, #140]	; (812a4 <vTaskIncrementTick+0x110>)
   81218:	f8df 8094 	ldr.w	r8, [pc, #148]	; 812b0 <vTaskIncrementTick+0x11c>
   8121c:	e012      	b.n	81244 <vTaskIncrementTick+0xb0>
   8121e:	f04f 32ff 	mov.w	r2, #4294967295
   81222:	4b1e      	ldr	r3, [pc, #120]	; (8129c <vTaskIncrementTick+0x108>)
   81224:	601a      	str	r2, [r3, #0]
   81226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8122a:	4b18      	ldr	r3, [pc, #96]	; (8128c <vTaskIncrementTick+0xf8>)
   8122c:	681b      	ldr	r3, [r3, #0]
   8122e:	68db      	ldr	r3, [r3, #12]
   81230:	68dc      	ldr	r4, [r3, #12]
   81232:	6863      	ldr	r3, [r4, #4]
   81234:	4a14      	ldr	r2, [pc, #80]	; (81288 <vTaskIncrementTick+0xf4>)
   81236:	6812      	ldr	r2, [r2, #0]
   81238:	4293      	cmp	r3, r2
   8123a:	d903      	bls.n	81244 <vTaskIncrementTick+0xb0>
   8123c:	4a17      	ldr	r2, [pc, #92]	; (8129c <vTaskIncrementTick+0x108>)
   8123e:	6013      	str	r3, [r2, #0]
   81240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81244:	1d25      	adds	r5, r4, #4
   81246:	4628      	mov	r0, r5
   81248:	47b0      	blx	r6
   8124a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8124c:	b113      	cbz	r3, 81254 <vTaskIncrementTick+0xc0>
   8124e:	f104 0018 	add.w	r0, r4, #24
   81252:	47b0      	blx	r6
   81254:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81256:	683b      	ldr	r3, [r7, #0]
   81258:	4298      	cmp	r0, r3
   8125a:	bf88      	it	hi
   8125c:	6038      	strhi	r0, [r7, #0]
   8125e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81262:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81266:	4629      	mov	r1, r5
   81268:	4b0f      	ldr	r3, [pc, #60]	; (812a8 <vTaskIncrementTick+0x114>)
   8126a:	4798      	blx	r3
   8126c:	4b07      	ldr	r3, [pc, #28]	; (8128c <vTaskIncrementTick+0xf8>)
   8126e:	681b      	ldr	r3, [r3, #0]
   81270:	681b      	ldr	r3, [r3, #0]
   81272:	2b00      	cmp	r3, #0
   81274:	d1d9      	bne.n	8122a <vTaskIncrementTick+0x96>
   81276:	e7d2      	b.n	8121e <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
   81278:	4a0c      	ldr	r2, [pc, #48]	; (812ac <vTaskIncrementTick+0x118>)
   8127a:	6813      	ldr	r3, [r2, #0]
   8127c:	3301      	adds	r3, #1
   8127e:	6013      	str	r3, [r2, #0]
   81280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81284:	2007abe8 	.word	0x2007abe8
   81288:	2007abec 	.word	0x2007abec
   8128c:	2007ab1c 	.word	0x2007ab1c
   81290:	000806fd 	.word	0x000806fd
   81294:	2007abf0 	.word	0x2007abf0
   81298:	2007abcc 	.word	0x2007abcc
   8129c:	20070134 	.word	0x20070134
   812a0:	00080675 	.word	0x00080675
   812a4:	2007ab50 	.word	0x2007ab50
   812a8:	0008061d 	.word	0x0008061d
   812ac:	2007ab04 	.word	0x2007ab04
   812b0:	2007ab54 	.word	0x2007ab54

000812b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   812b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   812b8:	4b30      	ldr	r3, [pc, #192]	; (8137c <xTaskResumeAll+0xc8>)
   812ba:	681b      	ldr	r3, [r3, #0]
   812bc:	b91b      	cbnz	r3, 812c6 <xTaskResumeAll+0x12>
   812be:	4b30      	ldr	r3, [pc, #192]	; (81380 <xTaskResumeAll+0xcc>)
   812c0:	4798      	blx	r3
   812c2:	bf00      	nop
   812c4:	e7fd      	b.n	812c2 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   812c6:	4b2f      	ldr	r3, [pc, #188]	; (81384 <xTaskResumeAll+0xd0>)
   812c8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   812ca:	4b2c      	ldr	r3, [pc, #176]	; (8137c <xTaskResumeAll+0xc8>)
   812cc:	681a      	ldr	r2, [r3, #0]
   812ce:	3a01      	subs	r2, #1
   812d0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   812d2:	681b      	ldr	r3, [r3, #0]
   812d4:	2b00      	cmp	r3, #0
   812d6:	d149      	bne.n	8136c <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   812d8:	4b2b      	ldr	r3, [pc, #172]	; (81388 <xTaskResumeAll+0xd4>)
   812da:	681b      	ldr	r3, [r3, #0]
   812dc:	bb03      	cbnz	r3, 81320 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   812de:	2400      	movs	r4, #0
   812e0:	e047      	b.n	81372 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   812e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   812e6:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   812e8:	f104 0018 	add.w	r0, r4, #24
   812ec:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   812ee:	f104 0904 	add.w	r9, r4, #4
   812f2:	4648      	mov	r0, r9
   812f4:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   812f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   812f8:	6833      	ldr	r3, [r6, #0]
   812fa:	4298      	cmp	r0, r3
   812fc:	bf88      	it	hi
   812fe:	6030      	strhi	r0, [r6, #0]
   81300:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81304:	4b21      	ldr	r3, [pc, #132]	; (8138c <xTaskResumeAll+0xd8>)
   81306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8130a:	4649      	mov	r1, r9
   8130c:	4b20      	ldr	r3, [pc, #128]	; (81390 <xTaskResumeAll+0xdc>)
   8130e:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81310:	4b20      	ldr	r3, [pc, #128]	; (81394 <xTaskResumeAll+0xe0>)
   81312:	681b      	ldr	r3, [r3, #0]
   81314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81318:	429a      	cmp	r2, r3
   8131a:	bf28      	it	cs
   8131c:	2501      	movcs	r5, #1
   8131e:	e004      	b.n	8132a <xTaskResumeAll+0x76>
   81320:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81322:	f8df 8090 	ldr.w	r8, [pc, #144]	; 813b4 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81326:	4f1c      	ldr	r7, [pc, #112]	; (81398 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81328:	4e1c      	ldr	r6, [pc, #112]	; (8139c <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8132a:	f8d8 3000 	ldr.w	r3, [r8]
   8132e:	2b00      	cmp	r3, #0
   81330:	d1d7      	bne.n	812e2 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81332:	4b1b      	ldr	r3, [pc, #108]	; (813a0 <xTaskResumeAll+0xec>)
   81334:	681b      	ldr	r3, [r3, #0]
   81336:	b163      	cbz	r3, 81352 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81338:	4b19      	ldr	r3, [pc, #100]	; (813a0 <xTaskResumeAll+0xec>)
   8133a:	681b      	ldr	r3, [r3, #0]
   8133c:	b17b      	cbz	r3, 8135e <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   8133e:	4d19      	ldr	r5, [pc, #100]	; (813a4 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81340:	4c17      	ldr	r4, [pc, #92]	; (813a0 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81342:	47a8      	blx	r5
						--uxMissedTicks;
   81344:	6823      	ldr	r3, [r4, #0]
   81346:	3b01      	subs	r3, #1
   81348:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8134a:	6823      	ldr	r3, [r4, #0]
   8134c:	2b00      	cmp	r3, #0
   8134e:	d1f8      	bne.n	81342 <xTaskResumeAll+0x8e>
   81350:	e005      	b.n	8135e <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81352:	2d01      	cmp	r5, #1
   81354:	d003      	beq.n	8135e <xTaskResumeAll+0xaa>
   81356:	4b14      	ldr	r3, [pc, #80]	; (813a8 <xTaskResumeAll+0xf4>)
   81358:	681b      	ldr	r3, [r3, #0]
   8135a:	2b01      	cmp	r3, #1
   8135c:	d108      	bne.n	81370 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   8135e:	2200      	movs	r2, #0
   81360:	4b11      	ldr	r3, [pc, #68]	; (813a8 <xTaskResumeAll+0xf4>)
   81362:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81364:	4b11      	ldr	r3, [pc, #68]	; (813ac <xTaskResumeAll+0xf8>)
   81366:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81368:	2401      	movs	r4, #1
   8136a:	e002      	b.n	81372 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8136c:	2400      	movs	r4, #0
   8136e:	e000      	b.n	81372 <xTaskResumeAll+0xbe>
   81370:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81372:	4b0f      	ldr	r3, [pc, #60]	; (813b0 <xTaskResumeAll+0xfc>)
   81374:	4798      	blx	r3

	return xAlreadyYielded;
}
   81376:	4620      	mov	r0, r4
   81378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8137c:	2007abe8 	.word	0x2007abe8
   81380:	000806fd 	.word	0x000806fd
   81384:	0008070d 	.word	0x0008070d
   81388:	2007abf8 	.word	0x2007abf8
   8138c:	2007ab54 	.word	0x2007ab54
   81390:	0008061d 	.word	0x0008061d
   81394:	2007abd0 	.word	0x2007abd0
   81398:	00080675 	.word	0x00080675
   8139c:	2007ab50 	.word	0x2007ab50
   813a0:	2007ab04 	.word	0x2007ab04
   813a4:	00081195 	.word	0x00081195
   813a8:	2007abfc 	.word	0x2007abfc
   813ac:	000806ed 	.word	0x000806ed
   813b0:	0008072d 	.word	0x0008072d
   813b4:	2007abd4 	.word	0x2007abd4

000813b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   813b8:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   813ba:	4d15      	ldr	r5, [pc, #84]	; (81410 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   813bc:	4e15      	ldr	r6, [pc, #84]	; (81414 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   813be:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81434 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   813c2:	4f15      	ldr	r7, [pc, #84]	; (81418 <prvIdleTask+0x60>)
   813c4:	e019      	b.n	813fa <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   813c6:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   813c8:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   813ca:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   813cc:	b1ac      	cbz	r4, 813fa <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   813ce:	4b13      	ldr	r3, [pc, #76]	; (8141c <prvIdleTask+0x64>)
   813d0:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   813d2:	68f3      	ldr	r3, [r6, #12]
   813d4:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   813d6:	1d20      	adds	r0, r4, #4
   813d8:	4b11      	ldr	r3, [pc, #68]	; (81420 <prvIdleTask+0x68>)
   813da:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   813dc:	4a11      	ldr	r2, [pc, #68]	; (81424 <prvIdleTask+0x6c>)
   813de:	6813      	ldr	r3, [r2, #0]
   813e0:	3b01      	subs	r3, #1
   813e2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   813e4:	682b      	ldr	r3, [r5, #0]
   813e6:	3b01      	subs	r3, #1
   813e8:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   813ea:	4b0f      	ldr	r3, [pc, #60]	; (81428 <prvIdleTask+0x70>)
   813ec:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   813ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
   813f0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 81438 <prvIdleTask+0x80>
   813f4:	47c8      	blx	r9
		vPortFree( pxTCB );
   813f6:	4620      	mov	r0, r4
   813f8:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   813fa:	682b      	ldr	r3, [r5, #0]
   813fc:	2b00      	cmp	r3, #0
   813fe:	d1e2      	bne.n	813c6 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81400:	4b0a      	ldr	r3, [pc, #40]	; (8142c <prvIdleTask+0x74>)
   81402:	681b      	ldr	r3, [r3, #0]
   81404:	2b01      	cmp	r3, #1
   81406:	d9f8      	bls.n	813fa <prvIdleTask+0x42>
			{
				taskYIELD();
   81408:	4b09      	ldr	r3, [pc, #36]	; (81430 <prvIdleTask+0x78>)
   8140a:	4798      	blx	r3
   8140c:	e7d7      	b.n	813be <prvIdleTask+0x6>
   8140e:	bf00      	nop
   81410:	2007ab24 	.word	0x2007ab24
   81414:	2007abb8 	.word	0x2007abb8
   81418:	000812b5 	.word	0x000812b5
   8141c:	0008070d 	.word	0x0008070d
   81420:	00080675 	.word	0x00080675
   81424:	2007abf8 	.word	0x2007abf8
   81428:	0008072d 	.word	0x0008072d
   8142c:	2007ab54 	.word	0x2007ab54
   81430:	000806ed 	.word	0x000806ed
   81434:	00081165 	.word	0x00081165
   81438:	00080921 	.word	0x00080921

0008143c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   8143c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8143e:	4b22      	ldr	r3, [pc, #136]	; (814c8 <vTaskSwitchContext+0x8c>)
   81440:	681b      	ldr	r3, [r3, #0]
   81442:	b96b      	cbnz	r3, 81460 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81444:	4b21      	ldr	r3, [pc, #132]	; (814cc <vTaskSwitchContext+0x90>)
   81446:	681b      	ldr	r3, [r3, #0]
   81448:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8144c:	009b      	lsls	r3, r3, #2
   8144e:	4a20      	ldr	r2, [pc, #128]	; (814d0 <vTaskSwitchContext+0x94>)
   81450:	58d3      	ldr	r3, [r2, r3]
   81452:	b9cb      	cbnz	r3, 81488 <vTaskSwitchContext+0x4c>
   81454:	4b1d      	ldr	r3, [pc, #116]	; (814cc <vTaskSwitchContext+0x90>)
   81456:	681b      	ldr	r3, [r3, #0]
   81458:	b143      	cbz	r3, 8146c <vTaskSwitchContext+0x30>
   8145a:	4a1c      	ldr	r2, [pc, #112]	; (814cc <vTaskSwitchContext+0x90>)
   8145c:	491c      	ldr	r1, [pc, #112]	; (814d0 <vTaskSwitchContext+0x94>)
   8145e:	e009      	b.n	81474 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81460:	2201      	movs	r2, #1
   81462:	4b1c      	ldr	r3, [pc, #112]	; (814d4 <vTaskSwitchContext+0x98>)
   81464:	601a      	str	r2, [r3, #0]
   81466:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81468:	6813      	ldr	r3, [r2, #0]
   8146a:	b91b      	cbnz	r3, 81474 <vTaskSwitchContext+0x38>
   8146c:	4b1a      	ldr	r3, [pc, #104]	; (814d8 <vTaskSwitchContext+0x9c>)
   8146e:	4798      	blx	r3
   81470:	bf00      	nop
   81472:	e7fd      	b.n	81470 <vTaskSwitchContext+0x34>
   81474:	6813      	ldr	r3, [r2, #0]
   81476:	3b01      	subs	r3, #1
   81478:	6013      	str	r3, [r2, #0]
   8147a:	6813      	ldr	r3, [r2, #0]
   8147c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81480:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81484:	2b00      	cmp	r3, #0
   81486:	d0ef      	beq.n	81468 <vTaskSwitchContext+0x2c>
   81488:	4b10      	ldr	r3, [pc, #64]	; (814cc <vTaskSwitchContext+0x90>)
   8148a:	681b      	ldr	r3, [r3, #0]
   8148c:	4a10      	ldr	r2, [pc, #64]	; (814d0 <vTaskSwitchContext+0x94>)
   8148e:	0099      	lsls	r1, r3, #2
   81490:	18c8      	adds	r0, r1, r3
   81492:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81496:	6844      	ldr	r4, [r0, #4]
   81498:	6864      	ldr	r4, [r4, #4]
   8149a:	6044      	str	r4, [r0, #4]
   8149c:	4602      	mov	r2, r0
   8149e:	3208      	adds	r2, #8
   814a0:	4294      	cmp	r4, r2
   814a2:	d106      	bne.n	814b2 <vTaskSwitchContext+0x76>
   814a4:	6860      	ldr	r0, [r4, #4]
   814a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   814aa:	4a09      	ldr	r2, [pc, #36]	; (814d0 <vTaskSwitchContext+0x94>)
   814ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   814b0:	6050      	str	r0, [r2, #4]
   814b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   814b6:	4a06      	ldr	r2, [pc, #24]	; (814d0 <vTaskSwitchContext+0x94>)
   814b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   814bc:	685b      	ldr	r3, [r3, #4]
   814be:	68da      	ldr	r2, [r3, #12]
   814c0:	4b06      	ldr	r3, [pc, #24]	; (814dc <vTaskSwitchContext+0xa0>)
   814c2:	601a      	str	r2, [r3, #0]
   814c4:	bd10      	pop	{r4, pc}
   814c6:	bf00      	nop
   814c8:	2007abe8 	.word	0x2007abe8
   814cc:	2007ab50 	.word	0x2007ab50
   814d0:	2007ab54 	.word	0x2007ab54
   814d4:	2007abfc 	.word	0x2007abfc
   814d8:	000806fd 	.word	0x000806fd
   814dc:	2007abd0 	.word	0x2007abd0

000814e0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   814e0:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   814e2:	b918      	cbnz	r0, 814ec <vTaskPlaceOnEventList+0xc>
   814e4:	4b0e      	ldr	r3, [pc, #56]	; (81520 <vTaskPlaceOnEventList+0x40>)
   814e6:	4798      	blx	r3
   814e8:	bf00      	nop
   814ea:	e7fd      	b.n	814e8 <vTaskPlaceOnEventList+0x8>
   814ec:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   814ee:	4d0d      	ldr	r5, [pc, #52]	; (81524 <vTaskPlaceOnEventList+0x44>)
   814f0:	6829      	ldr	r1, [r5, #0]
   814f2:	3118      	adds	r1, #24
   814f4:	4b0c      	ldr	r3, [pc, #48]	; (81528 <vTaskPlaceOnEventList+0x48>)
   814f6:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   814f8:	6828      	ldr	r0, [r5, #0]
   814fa:	3004      	adds	r0, #4
   814fc:	4b0b      	ldr	r3, [pc, #44]	; (8152c <vTaskPlaceOnEventList+0x4c>)
   814fe:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81500:	f1b4 3fff 	cmp.w	r4, #4294967295
   81504:	d105      	bne.n	81512 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81506:	6829      	ldr	r1, [r5, #0]
   81508:	4809      	ldr	r0, [pc, #36]	; (81530 <vTaskPlaceOnEventList+0x50>)
   8150a:	3104      	adds	r1, #4
   8150c:	4b09      	ldr	r3, [pc, #36]	; (81534 <vTaskPlaceOnEventList+0x54>)
   8150e:	4798      	blx	r3
   81510:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81512:	4b09      	ldr	r3, [pc, #36]	; (81538 <vTaskPlaceOnEventList+0x58>)
   81514:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81516:	4420      	add	r0, r4
   81518:	4b08      	ldr	r3, [pc, #32]	; (8153c <vTaskPlaceOnEventList+0x5c>)
   8151a:	4798      	blx	r3
   8151c:	bd38      	pop	{r3, r4, r5, pc}
   8151e:	bf00      	nop
   81520:	000806fd 	.word	0x000806fd
   81524:	2007abd0 	.word	0x2007abd0
   81528:	00080639 	.word	0x00080639
   8152c:	00080675 	.word	0x00080675
   81530:	2007ab08 	.word	0x2007ab08
   81534:	0008061d 	.word	0x0008061d
   81538:	2007abec 	.word	0x2007abec
   8153c:	00080ea1 	.word	0x00080ea1

00081540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81540:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81542:	b918      	cbnz	r0, 8154c <vTaskPlaceOnEventListRestricted+0xc>
   81544:	4b09      	ldr	r3, [pc, #36]	; (8156c <vTaskPlaceOnEventListRestricted+0x2c>)
   81546:	4798      	blx	r3
   81548:	bf00      	nop
   8154a:	e7fd      	b.n	81548 <vTaskPlaceOnEventListRestricted+0x8>
   8154c:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8154e:	4c08      	ldr	r4, [pc, #32]	; (81570 <vTaskPlaceOnEventListRestricted+0x30>)
   81550:	6821      	ldr	r1, [r4, #0]
   81552:	3118      	adds	r1, #24
   81554:	4b07      	ldr	r3, [pc, #28]	; (81574 <vTaskPlaceOnEventListRestricted+0x34>)
   81556:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81558:	6820      	ldr	r0, [r4, #0]
   8155a:	3004      	adds	r0, #4
   8155c:	4b06      	ldr	r3, [pc, #24]	; (81578 <vTaskPlaceOnEventListRestricted+0x38>)
   8155e:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81560:	4b06      	ldr	r3, [pc, #24]	; (8157c <vTaskPlaceOnEventListRestricted+0x3c>)
   81562:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81564:	4428      	add	r0, r5
   81566:	4b06      	ldr	r3, [pc, #24]	; (81580 <vTaskPlaceOnEventListRestricted+0x40>)
   81568:	4798      	blx	r3
   8156a:	bd38      	pop	{r3, r4, r5, pc}
   8156c:	000806fd 	.word	0x000806fd
   81570:	2007abd0 	.word	0x2007abd0
   81574:	0008061d 	.word	0x0008061d
   81578:	00080675 	.word	0x00080675
   8157c:	2007abec 	.word	0x2007abec
   81580:	00080ea1 	.word	0x00080ea1

00081584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81584:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81586:	68c3      	ldr	r3, [r0, #12]
   81588:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8158a:	b91c      	cbnz	r4, 81594 <xTaskRemoveFromEventList+0x10>
   8158c:	4b16      	ldr	r3, [pc, #88]	; (815e8 <xTaskRemoveFromEventList+0x64>)
   8158e:	4798      	blx	r3
   81590:	bf00      	nop
   81592:	e7fd      	b.n	81590 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81594:	f104 0518 	add.w	r5, r4, #24
   81598:	4628      	mov	r0, r5
   8159a:	4b14      	ldr	r3, [pc, #80]	; (815ec <xTaskRemoveFromEventList+0x68>)
   8159c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8159e:	4b14      	ldr	r3, [pc, #80]	; (815f0 <xTaskRemoveFromEventList+0x6c>)
   815a0:	681b      	ldr	r3, [r3, #0]
   815a2:	b99b      	cbnz	r3, 815cc <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   815a4:	1d25      	adds	r5, r4, #4
   815a6:	4628      	mov	r0, r5
   815a8:	4b10      	ldr	r3, [pc, #64]	; (815ec <xTaskRemoveFromEventList+0x68>)
   815aa:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   815ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   815ae:	4b11      	ldr	r3, [pc, #68]	; (815f4 <xTaskRemoveFromEventList+0x70>)
   815b0:	681b      	ldr	r3, [r3, #0]
   815b2:	4298      	cmp	r0, r3
   815b4:	bf84      	itt	hi
   815b6:	4b0f      	ldrhi	r3, [pc, #60]	; (815f4 <xTaskRemoveFromEventList+0x70>)
   815b8:	6018      	strhi	r0, [r3, #0]
   815ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   815be:	4b0e      	ldr	r3, [pc, #56]	; (815f8 <xTaskRemoveFromEventList+0x74>)
   815c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   815c4:	4629      	mov	r1, r5
   815c6:	4b0d      	ldr	r3, [pc, #52]	; (815fc <xTaskRemoveFromEventList+0x78>)
   815c8:	4798      	blx	r3
   815ca:	e003      	b.n	815d4 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   815cc:	480c      	ldr	r0, [pc, #48]	; (81600 <xTaskRemoveFromEventList+0x7c>)
   815ce:	4629      	mov	r1, r5
   815d0:	4b0a      	ldr	r3, [pc, #40]	; (815fc <xTaskRemoveFromEventList+0x78>)
   815d2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   815d4:	4b0b      	ldr	r3, [pc, #44]	; (81604 <xTaskRemoveFromEventList+0x80>)
   815d6:	681b      	ldr	r3, [r3, #0]
   815d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   815da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   815dc:	4298      	cmp	r0, r3
   815de:	bf34      	ite	cc
   815e0:	2000      	movcc	r0, #0
   815e2:	2001      	movcs	r0, #1
   815e4:	bd38      	pop	{r3, r4, r5, pc}
   815e6:	bf00      	nop
   815e8:	000806fd 	.word	0x000806fd
   815ec:	00080675 	.word	0x00080675
   815f0:	2007abe8 	.word	0x2007abe8
   815f4:	2007ab50 	.word	0x2007ab50
   815f8:	2007ab54 	.word	0x2007ab54
   815fc:	0008061d 	.word	0x0008061d
   81600:	2007abd4 	.word	0x2007abd4
   81604:	2007abd0 	.word	0x2007abd0

00081608 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81608:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8160a:	b918      	cbnz	r0, 81614 <vTaskSetTimeOutState+0xc>
   8160c:	4b05      	ldr	r3, [pc, #20]	; (81624 <vTaskSetTimeOutState+0x1c>)
   8160e:	4798      	blx	r3
   81610:	bf00      	nop
   81612:	e7fd      	b.n	81610 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81614:	4a04      	ldr	r2, [pc, #16]	; (81628 <vTaskSetTimeOutState+0x20>)
   81616:	6812      	ldr	r2, [r2, #0]
   81618:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8161a:	4a04      	ldr	r2, [pc, #16]	; (8162c <vTaskSetTimeOutState+0x24>)
   8161c:	6812      	ldr	r2, [r2, #0]
   8161e:	6042      	str	r2, [r0, #4]
   81620:	bd08      	pop	{r3, pc}
   81622:	bf00      	nop
   81624:	000806fd 	.word	0x000806fd
   81628:	2007abcc 	.word	0x2007abcc
   8162c:	2007abec 	.word	0x2007abec

00081630 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81630:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81632:	b918      	cbnz	r0, 8163c <xTaskCheckForTimeOut+0xc>
   81634:	4b19      	ldr	r3, [pc, #100]	; (8169c <xTaskCheckForTimeOut+0x6c>)
   81636:	4798      	blx	r3
   81638:	bf00      	nop
   8163a:	e7fd      	b.n	81638 <xTaskCheckForTimeOut+0x8>
   8163c:	460d      	mov	r5, r1
   8163e:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81640:	b919      	cbnz	r1, 8164a <xTaskCheckForTimeOut+0x1a>
   81642:	4b16      	ldr	r3, [pc, #88]	; (8169c <xTaskCheckForTimeOut+0x6c>)
   81644:	4798      	blx	r3
   81646:	bf00      	nop
   81648:	e7fd      	b.n	81646 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8164a:	4b15      	ldr	r3, [pc, #84]	; (816a0 <xTaskCheckForTimeOut+0x70>)
   8164c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   8164e:	682b      	ldr	r3, [r5, #0]
   81650:	f1b3 3fff 	cmp.w	r3, #4294967295
   81654:	d018      	beq.n	81688 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81656:	4a13      	ldr	r2, [pc, #76]	; (816a4 <xTaskCheckForTimeOut+0x74>)
   81658:	6812      	ldr	r2, [r2, #0]
   8165a:	6821      	ldr	r1, [r4, #0]
   8165c:	4291      	cmp	r1, r2
   8165e:	d004      	beq.n	8166a <xTaskCheckForTimeOut+0x3a>
   81660:	4a11      	ldr	r2, [pc, #68]	; (816a8 <xTaskCheckForTimeOut+0x78>)
   81662:	6812      	ldr	r2, [r2, #0]
   81664:	6861      	ldr	r1, [r4, #4]
   81666:	4291      	cmp	r1, r2
   81668:	d910      	bls.n	8168c <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8166a:	4a0f      	ldr	r2, [pc, #60]	; (816a8 <xTaskCheckForTimeOut+0x78>)
   8166c:	6811      	ldr	r1, [r2, #0]
   8166e:	6860      	ldr	r0, [r4, #4]
   81670:	1a09      	subs	r1, r1, r0
   81672:	428b      	cmp	r3, r1
   81674:	d90c      	bls.n	81690 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81676:	6812      	ldr	r2, [r2, #0]
   81678:	1a12      	subs	r2, r2, r0
   8167a:	1a9b      	subs	r3, r3, r2
   8167c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8167e:	4620      	mov	r0, r4
   81680:	4b0a      	ldr	r3, [pc, #40]	; (816ac <xTaskCheckForTimeOut+0x7c>)
   81682:	4798      	blx	r3
			xReturn = pdFALSE;
   81684:	2400      	movs	r4, #0
   81686:	e004      	b.n	81692 <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81688:	2400      	movs	r4, #0
   8168a:	e002      	b.n	81692 <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8168c:	2401      	movs	r4, #1
   8168e:	e000      	b.n	81692 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81690:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81692:	4b07      	ldr	r3, [pc, #28]	; (816b0 <xTaskCheckForTimeOut+0x80>)
   81694:	4798      	blx	r3

	return xReturn;
}
   81696:	4620      	mov	r0, r4
   81698:	bd38      	pop	{r3, r4, r5, pc}
   8169a:	bf00      	nop
   8169c:	000806fd 	.word	0x000806fd
   816a0:	0008070d 	.word	0x0008070d
   816a4:	2007abcc 	.word	0x2007abcc
   816a8:	2007abec 	.word	0x2007abec
   816ac:	00081609 	.word	0x00081609
   816b0:	0008072d 	.word	0x0008072d

000816b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   816b4:	2201      	movs	r2, #1
   816b6:	4b01      	ldr	r3, [pc, #4]	; (816bc <vTaskMissedYield+0x8>)
   816b8:	601a      	str	r2, [r3, #0]
   816ba:	4770      	bx	lr
   816bc:	2007abfc 	.word	0x2007abfc

000816c0 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   816c0:	4b01      	ldr	r3, [pc, #4]	; (816c8 <xTaskGetCurrentTaskHandle+0x8>)
   816c2:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   816c4:	4770      	bx	lr
   816c6:	bf00      	nop
   816c8:	2007abd0 	.word	0x2007abd0

000816cc <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   816cc:	4b05      	ldr	r3, [pc, #20]	; (816e4 <xTaskGetSchedulerState+0x18>)
   816ce:	681b      	ldr	r3, [r3, #0]
   816d0:	b133      	cbz	r3, 816e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   816d2:	4b05      	ldr	r3, [pc, #20]	; (816e8 <xTaskGetSchedulerState+0x1c>)
   816d4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   816d6:	2b00      	cmp	r3, #0
   816d8:	bf0c      	ite	eq
   816da:	2001      	moveq	r0, #1
   816dc:	2002      	movne	r0, #2
   816de:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   816e0:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   816e2:	4770      	bx	lr
   816e4:	2007ab20 	.word	0x2007ab20
   816e8:	2007abe8 	.word	0x2007abe8

000816ec <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   816ec:	2800      	cmp	r0, #0
   816ee:	d031      	beq.n	81754 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   816f0:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   816f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   816f4:	4918      	ldr	r1, [pc, #96]	; (81758 <vTaskPriorityInherit+0x6c>)
   816f6:	6809      	ldr	r1, [r1, #0]
   816f8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   816fa:	428b      	cmp	r3, r1
   816fc:	d229      	bcs.n	81752 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   816fe:	4916      	ldr	r1, [pc, #88]	; (81758 <vTaskPriorityInherit+0x6c>)
   81700:	6809      	ldr	r1, [r1, #0]
   81702:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81704:	f1c1 0105 	rsb	r1, r1, #5
   81708:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   8170a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8170e:	4913      	ldr	r1, [pc, #76]	; (8175c <vTaskPriorityInherit+0x70>)
   81710:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81714:	6941      	ldr	r1, [r0, #20]
   81716:	4299      	cmp	r1, r3
   81718:	d117      	bne.n	8174a <vTaskPriorityInherit+0x5e>
   8171a:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8171c:	1d04      	adds	r4, r0, #4
   8171e:	4620      	mov	r0, r4
   81720:	4b0f      	ldr	r3, [pc, #60]	; (81760 <vTaskPriorityInherit+0x74>)
   81722:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81724:	4b0c      	ldr	r3, [pc, #48]	; (81758 <vTaskPriorityInherit+0x6c>)
   81726:	681b      	ldr	r3, [r3, #0]
   81728:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   8172a:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   8172c:	4b0d      	ldr	r3, [pc, #52]	; (81764 <vTaskPriorityInherit+0x78>)
   8172e:	681b      	ldr	r3, [r3, #0]
   81730:	4298      	cmp	r0, r3
   81732:	bf84      	itt	hi
   81734:	4b0b      	ldrhi	r3, [pc, #44]	; (81764 <vTaskPriorityInherit+0x78>)
   81736:	6018      	strhi	r0, [r3, #0]
   81738:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8173c:	4b07      	ldr	r3, [pc, #28]	; (8175c <vTaskPriorityInherit+0x70>)
   8173e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81742:	4621      	mov	r1, r4
   81744:	4b08      	ldr	r3, [pc, #32]	; (81768 <vTaskPriorityInherit+0x7c>)
   81746:	4798      	blx	r3
   81748:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8174a:	4b03      	ldr	r3, [pc, #12]	; (81758 <vTaskPriorityInherit+0x6c>)
   8174c:	681b      	ldr	r3, [r3, #0]
   8174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81750:	62c3      	str	r3, [r0, #44]	; 0x2c
   81752:	bd38      	pop	{r3, r4, r5, pc}
   81754:	4770      	bx	lr
   81756:	bf00      	nop
   81758:	2007abd0 	.word	0x2007abd0
   8175c:	2007ab54 	.word	0x2007ab54
   81760:	00080675 	.word	0x00080675
   81764:	2007ab50 	.word	0x2007ab50
   81768:	0008061d 	.word	0x0008061d

0008176c <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8176c:	b1e8      	cbz	r0, 817aa <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   8176e:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81770:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81772:	6c82      	ldr	r2, [r0, #72]	; 0x48
   81774:	4291      	cmp	r1, r2
   81776:	d017      	beq.n	817a8 <vTaskPriorityDisinherit+0x3c>
   81778:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8177a:	1d05      	adds	r5, r0, #4
   8177c:	4628      	mov	r0, r5
   8177e:	4b0b      	ldr	r3, [pc, #44]	; (817ac <vTaskPriorityDisinherit+0x40>)
   81780:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81782:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81784:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81786:	f1c0 0305 	rsb	r3, r0, #5
   8178a:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   8178c:	4b08      	ldr	r3, [pc, #32]	; (817b0 <vTaskPriorityDisinherit+0x44>)
   8178e:	681b      	ldr	r3, [r3, #0]
   81790:	4298      	cmp	r0, r3
   81792:	bf84      	itt	hi
   81794:	4b06      	ldrhi	r3, [pc, #24]	; (817b0 <vTaskPriorityDisinherit+0x44>)
   81796:	6018      	strhi	r0, [r3, #0]
   81798:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8179c:	4b05      	ldr	r3, [pc, #20]	; (817b4 <vTaskPriorityDisinherit+0x48>)
   8179e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   817a2:	4629      	mov	r1, r5
   817a4:	4b04      	ldr	r3, [pc, #16]	; (817b8 <vTaskPriorityDisinherit+0x4c>)
   817a6:	4798      	blx	r3
   817a8:	bd38      	pop	{r3, r4, r5, pc}
   817aa:	4770      	bx	lr
   817ac:	00080675 	.word	0x00080675
   817b0:	2007ab50 	.word	0x2007ab50
   817b4:	2007ab54 	.word	0x2007ab54
   817b8:	0008061d 	.word	0x0008061d

000817bc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   817bc:	b510      	push	{r4, lr}
   817be:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   817c0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   817c2:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   817c4:	4291      	cmp	r1, r2
   817c6:	d80a      	bhi.n	817de <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   817c8:	1ad2      	subs	r2, r2, r3
   817ca:	6983      	ldr	r3, [r0, #24]
   817cc:	429a      	cmp	r2, r3
   817ce:	d211      	bcs.n	817f4 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   817d0:	4b0a      	ldr	r3, [pc, #40]	; (817fc <prvInsertTimerInActiveList+0x40>)
   817d2:	6818      	ldr	r0, [r3, #0]
   817d4:	1d21      	adds	r1, r4, #4
   817d6:	4b0a      	ldr	r3, [pc, #40]	; (81800 <prvInsertTimerInActiveList+0x44>)
   817d8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   817da:	2000      	movs	r0, #0
   817dc:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   817de:	429a      	cmp	r2, r3
   817e0:	d201      	bcs.n	817e6 <prvInsertTimerInActiveList+0x2a>
   817e2:	4299      	cmp	r1, r3
   817e4:	d208      	bcs.n	817f8 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   817e6:	4b07      	ldr	r3, [pc, #28]	; (81804 <prvInsertTimerInActiveList+0x48>)
   817e8:	6818      	ldr	r0, [r3, #0]
   817ea:	1d21      	adds	r1, r4, #4
   817ec:	4b04      	ldr	r3, [pc, #16]	; (81800 <prvInsertTimerInActiveList+0x44>)
   817ee:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   817f0:	2000      	movs	r0, #0
   817f2:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   817f4:	2001      	movs	r0, #1
   817f6:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   817f8:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   817fa:	bd10      	pop	{r4, pc}
   817fc:	2007ac38 	.word	0x2007ac38
   81800:	00080639 	.word	0x00080639
   81804:	2007ac04 	.word	0x2007ac04

00081808 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81808:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8180a:	4b0d      	ldr	r3, [pc, #52]	; (81840 <prvCheckForValidListAndQueue+0x38>)
   8180c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8180e:	4b0d      	ldr	r3, [pc, #52]	; (81844 <prvCheckForValidListAndQueue+0x3c>)
   81810:	681b      	ldr	r3, [r3, #0]
   81812:	b98b      	cbnz	r3, 81838 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81814:	4d0c      	ldr	r5, [pc, #48]	; (81848 <prvCheckForValidListAndQueue+0x40>)
   81816:	4628      	mov	r0, r5
   81818:	4e0c      	ldr	r6, [pc, #48]	; (8184c <prvCheckForValidListAndQueue+0x44>)
   8181a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   8181c:	4c0c      	ldr	r4, [pc, #48]	; (81850 <prvCheckForValidListAndQueue+0x48>)
   8181e:	4620      	mov	r0, r4
   81820:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81822:	4b0c      	ldr	r3, [pc, #48]	; (81854 <prvCheckForValidListAndQueue+0x4c>)
   81824:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81826:	4b0c      	ldr	r3, [pc, #48]	; (81858 <prvCheckForValidListAndQueue+0x50>)
   81828:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   8182a:	2005      	movs	r0, #5
   8182c:	210c      	movs	r1, #12
   8182e:	2200      	movs	r2, #0
   81830:	4b0a      	ldr	r3, [pc, #40]	; (8185c <prvCheckForValidListAndQueue+0x54>)
   81832:	4798      	blx	r3
   81834:	4b03      	ldr	r3, [pc, #12]	; (81844 <prvCheckForValidListAndQueue+0x3c>)
   81836:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81838:	4b09      	ldr	r3, [pc, #36]	; (81860 <prvCheckForValidListAndQueue+0x58>)
   8183a:	4798      	blx	r3
   8183c:	bd70      	pop	{r4, r5, r6, pc}
   8183e:	bf00      	nop
   81840:	0008070d 	.word	0x0008070d
   81844:	2007ac34 	.word	0x2007ac34
   81848:	2007ac08 	.word	0x2007ac08
   8184c:	000805fd 	.word	0x000805fd
   81850:	2007ac1c 	.word	0x2007ac1c
   81854:	2007ac04 	.word	0x2007ac04
   81858:	2007ac38 	.word	0x2007ac38
   8185c:	00080af1 	.word	0x00080af1
   81860:	0008072d 	.word	0x0008072d

00081864 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81864:	b510      	push	{r4, lr}
   81866:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81868:	4b0b      	ldr	r3, [pc, #44]	; (81898 <xTimerCreateTimerTask+0x34>)
   8186a:	4798      	blx	r3

	if( xTimerQueue != NULL )
   8186c:	4b0b      	ldr	r3, [pc, #44]	; (8189c <xTimerCreateTimerTask+0x38>)
   8186e:	681b      	ldr	r3, [r3, #0]
   81870:	b163      	cbz	r3, 8188c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81872:	2304      	movs	r3, #4
   81874:	9300      	str	r3, [sp, #0]
   81876:	2300      	movs	r3, #0
   81878:	9301      	str	r3, [sp, #4]
   8187a:	9302      	str	r3, [sp, #8]
   8187c:	9303      	str	r3, [sp, #12]
   8187e:	4808      	ldr	r0, [pc, #32]	; (818a0 <xTimerCreateTimerTask+0x3c>)
   81880:	4908      	ldr	r1, [pc, #32]	; (818a4 <xTimerCreateTimerTask+0x40>)
   81882:	f44f 7282 	mov.w	r2, #260	; 0x104
   81886:	4c08      	ldr	r4, [pc, #32]	; (818a8 <xTimerCreateTimerTask+0x44>)
   81888:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   8188a:	b918      	cbnz	r0, 81894 <xTimerCreateTimerTask+0x30>
   8188c:	4b07      	ldr	r3, [pc, #28]	; (818ac <xTimerCreateTimerTask+0x48>)
   8188e:	4798      	blx	r3
   81890:	bf00      	nop
   81892:	e7fd      	b.n	81890 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81894:	b004      	add	sp, #16
   81896:	bd10      	pop	{r4, pc}
   81898:	00081809 	.word	0x00081809
   8189c:	2007ac34 	.word	0x2007ac34
   818a0:	000819b9 	.word	0x000819b9
   818a4:	00088ac0 	.word	0x00088ac0
   818a8:	00080ef9 	.word	0x00080ef9
   818ac:	000806fd 	.word	0x000806fd

000818b0 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   818b0:	b530      	push	{r4, r5, lr}
   818b2:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   818b4:	4c0f      	ldr	r4, [pc, #60]	; (818f4 <xTimerGenericCommand+0x44>)
   818b6:	6825      	ldr	r5, [r4, #0]
   818b8:	b1c5      	cbz	r5, 818ec <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   818ba:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   818bc:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   818be:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   818c0:	b96b      	cbnz	r3, 818de <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   818c2:	4b0d      	ldr	r3, [pc, #52]	; (818f8 <xTimerGenericCommand+0x48>)
   818c4:	4798      	blx	r3
   818c6:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   818c8:	4b0a      	ldr	r3, [pc, #40]	; (818f4 <xTimerGenericCommand+0x44>)
   818ca:	6818      	ldr	r0, [r3, #0]
   818cc:	a901      	add	r1, sp, #4
   818ce:	bf07      	ittee	eq
   818d0:	9a08      	ldreq	r2, [sp, #32]
   818d2:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   818d4:	2200      	movne	r2, #0
   818d6:	4613      	movne	r3, r2
   818d8:	4c08      	ldr	r4, [pc, #32]	; (818fc <xTimerGenericCommand+0x4c>)
   818da:	47a0      	blx	r4
   818dc:	e007      	b.n	818ee <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   818de:	4628      	mov	r0, r5
   818e0:	a901      	add	r1, sp, #4
   818e2:	461a      	mov	r2, r3
   818e4:	2300      	movs	r3, #0
   818e6:	4c06      	ldr	r4, [pc, #24]	; (81900 <xTimerGenericCommand+0x50>)
   818e8:	47a0      	blx	r4
   818ea:	e000      	b.n	818ee <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   818ec:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   818ee:	b005      	add	sp, #20
   818f0:	bd30      	pop	{r4, r5, pc}
   818f2:	bf00      	nop
   818f4:	2007ac34 	.word	0x2007ac34
   818f8:	000816cd 	.word	0x000816cd
   818fc:	00080b49 	.word	0x00080b49
   81900:	00080c69 	.word	0x00080c69

00081904 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81908:	b082      	sub	sp, #8
   8190a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   8190c:	4b22      	ldr	r3, [pc, #136]	; (81998 <prvSampleTimeNow+0x94>)
   8190e:	4798      	blx	r3
   81910:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81912:	4b22      	ldr	r3, [pc, #136]	; (8199c <prvSampleTimeNow+0x98>)
   81914:	681b      	ldr	r3, [r3, #0]
   81916:	4298      	cmp	r0, r3
   81918:	d234      	bcs.n	81984 <prvSampleTimeNow+0x80>
   8191a:	e024      	b.n	81966 <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8191c:	68da      	ldr	r2, [r3, #12]
   8191e:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81922:	68db      	ldr	r3, [r3, #12]
   81924:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81926:	1d25      	adds	r5, r4, #4
   81928:	4628      	mov	r0, r5
   8192a:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8192c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8192e:	4620      	mov	r0, r4
   81930:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81932:	69e3      	ldr	r3, [r4, #28]
   81934:	2b01      	cmp	r3, #1
   81936:	d118      	bne.n	8196a <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81938:	69a3      	ldr	r3, [r4, #24]
   8193a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   8193c:	4553      	cmp	r3, sl
   8193e:	d906      	bls.n	8194e <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81940:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81942:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81944:	6830      	ldr	r0, [r6, #0]
   81946:	4629      	mov	r1, r5
   81948:	4b15      	ldr	r3, [pc, #84]	; (819a0 <prvSampleTimeNow+0x9c>)
   8194a:	4798      	blx	r3
   8194c:	e00d      	b.n	8196a <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8194e:	2300      	movs	r3, #0
   81950:	9300      	str	r3, [sp, #0]
   81952:	4620      	mov	r0, r4
   81954:	4619      	mov	r1, r3
   81956:	4652      	mov	r2, sl
   81958:	4c12      	ldr	r4, [pc, #72]	; (819a4 <prvSampleTimeNow+0xa0>)
   8195a:	47a0      	blx	r4
				configASSERT( xResult );
   8195c:	b928      	cbnz	r0, 8196a <prvSampleTimeNow+0x66>
   8195e:	4b12      	ldr	r3, [pc, #72]	; (819a8 <prvSampleTimeNow+0xa4>)
   81960:	4798      	blx	r3
   81962:	bf00      	nop
   81964:	e7fd      	b.n	81962 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81966:	4e11      	ldr	r6, [pc, #68]	; (819ac <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81968:	4f11      	ldr	r7, [pc, #68]	; (819b0 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8196a:	6833      	ldr	r3, [r6, #0]
   8196c:	681a      	ldr	r2, [r3, #0]
   8196e:	2a00      	cmp	r2, #0
   81970:	d1d4      	bne.n	8191c <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81972:	4a10      	ldr	r2, [pc, #64]	; (819b4 <prvSampleTimeNow+0xb0>)
   81974:	6810      	ldr	r0, [r2, #0]
   81976:	490d      	ldr	r1, [pc, #52]	; (819ac <prvSampleTimeNow+0xa8>)
   81978:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   8197a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   8197c:	2301      	movs	r3, #1
   8197e:	f8c9 3000 	str.w	r3, [r9]
   81982:	e002      	b.n	8198a <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81984:	2300      	movs	r3, #0
   81986:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   8198a:	4b04      	ldr	r3, [pc, #16]	; (8199c <prvSampleTimeNow+0x98>)
   8198c:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81990:	4640      	mov	r0, r8
   81992:	b002      	add	sp, #8
   81994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81998:	00081175 	.word	0x00081175
   8199c:	2007ac30 	.word	0x2007ac30
   819a0:	00080639 	.word	0x00080639
   819a4:	000818b1 	.word	0x000818b1
   819a8:	000806fd 	.word	0x000806fd
   819ac:	2007ac04 	.word	0x2007ac04
   819b0:	00080675 	.word	0x00080675
   819b4:	2007ac38 	.word	0x2007ac38

000819b8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   819b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   819bc:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   819be:	4d4d      	ldr	r5, [pc, #308]	; (81af4 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   819c0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 81b24 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   819c4:	4b4c      	ldr	r3, [pc, #304]	; (81af8 <prvTimerTask+0x140>)
   819c6:	681b      	ldr	r3, [r3, #0]
   819c8:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   819ca:	2a00      	cmp	r2, #0
   819cc:	f000 8087 	beq.w	81ade <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   819d0:	68db      	ldr	r3, [r3, #12]
   819d2:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   819d4:	4b49      	ldr	r3, [pc, #292]	; (81afc <prvTimerTask+0x144>)
   819d6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   819d8:	a803      	add	r0, sp, #12
   819da:	4b49      	ldr	r3, [pc, #292]	; (81b00 <prvTimerTask+0x148>)
   819dc:	4798      	blx	r3
   819de:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   819e0:	9b03      	ldr	r3, [sp, #12]
   819e2:	2b00      	cmp	r3, #0
   819e4:	d130      	bne.n	81a48 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   819e6:	4286      	cmp	r6, r0
   819e8:	d824      	bhi.n	81a34 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   819ea:	4b46      	ldr	r3, [pc, #280]	; (81b04 <prvTimerTask+0x14c>)
   819ec:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   819ee:	4b42      	ldr	r3, [pc, #264]	; (81af8 <prvTimerTask+0x140>)
   819f0:	681b      	ldr	r3, [r3, #0]
   819f2:	68db      	ldr	r3, [r3, #12]
   819f4:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   819f6:	1d20      	adds	r0, r4, #4
   819f8:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   819fa:	69e3      	ldr	r3, [r4, #28]
   819fc:	2b01      	cmp	r3, #1
   819fe:	d114      	bne.n	81a2a <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81a00:	69a1      	ldr	r1, [r4, #24]
   81a02:	4620      	mov	r0, r4
   81a04:	4431      	add	r1, r6
   81a06:	463a      	mov	r2, r7
   81a08:	4633      	mov	r3, r6
   81a0a:	4f3f      	ldr	r7, [pc, #252]	; (81b08 <prvTimerTask+0x150>)
   81a0c:	47b8      	blx	r7
   81a0e:	2801      	cmp	r0, #1
   81a10:	d10b      	bne.n	81a2a <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81a12:	2300      	movs	r3, #0
   81a14:	9300      	str	r3, [sp, #0]
   81a16:	4620      	mov	r0, r4
   81a18:	4619      	mov	r1, r3
   81a1a:	4632      	mov	r2, r6
   81a1c:	4e3b      	ldr	r6, [pc, #236]	; (81b0c <prvTimerTask+0x154>)
   81a1e:	47b0      	blx	r6
			configASSERT( xResult );
   81a20:	b918      	cbnz	r0, 81a2a <prvTimerTask+0x72>
   81a22:	4b3b      	ldr	r3, [pc, #236]	; (81b10 <prvTimerTask+0x158>)
   81a24:	4798      	blx	r3
   81a26:	bf00      	nop
   81a28:	e7fd      	b.n	81a26 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81a2c:	4620      	mov	r0, r4
   81a2e:	4798      	blx	r3
   81a30:	e00c      	b.n	81a4c <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81a32:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81a34:	6828      	ldr	r0, [r5, #0]
   81a36:	1bf1      	subs	r1, r6, r7
   81a38:	4b36      	ldr	r3, [pc, #216]	; (81b14 <prvTimerTask+0x15c>)
   81a3a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81a3c:	4b31      	ldr	r3, [pc, #196]	; (81b04 <prvTimerTask+0x14c>)
   81a3e:	4798      	blx	r3
   81a40:	b920      	cbnz	r0, 81a4c <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81a42:	4b35      	ldr	r3, [pc, #212]	; (81b18 <prvTimerTask+0x160>)
   81a44:	4798      	blx	r3
   81a46:	e001      	b.n	81a4c <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81a48:	4b2e      	ldr	r3, [pc, #184]	; (81b04 <prvTimerTask+0x14c>)
   81a4a:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81a4c:	a802      	add	r0, sp, #8
   81a4e:	4b2c      	ldr	r3, [pc, #176]	; (81b00 <prvTimerTask+0x148>)
   81a50:	4798      	blx	r3
   81a52:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81a54:	4e31      	ldr	r6, [pc, #196]	; (81b1c <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81a56:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 81b08 <prvTimerTask+0x150>
   81a5a:	e038      	b.n	81ace <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81a5c:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81a5e:	b11c      	cbz	r4, 81a68 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81a60:	6963      	ldr	r3, [r4, #20]
   81a62:	b10b      	cbz	r3, 81a68 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81a64:	1d20      	adds	r0, r4, #4
   81a66:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81a68:	9b03      	ldr	r3, [sp, #12]
   81a6a:	2b02      	cmp	r3, #2
   81a6c:	d01f      	beq.n	81aae <prvTimerTask+0xf6>
   81a6e:	2b03      	cmp	r3, #3
   81a70:	d02a      	beq.n	81ac8 <prvTimerTask+0x110>
   81a72:	2b00      	cmp	r3, #0
   81a74:	d12b      	bne.n	81ace <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81a76:	9b04      	ldr	r3, [sp, #16]
   81a78:	69a1      	ldr	r1, [r4, #24]
   81a7a:	4620      	mov	r0, r4
   81a7c:	4419      	add	r1, r3
   81a7e:	463a      	mov	r2, r7
   81a80:	47c8      	blx	r9
   81a82:	2801      	cmp	r0, #1
   81a84:	d123      	bne.n	81ace <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81a88:	4620      	mov	r0, r4
   81a8a:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81a8c:	69e3      	ldr	r3, [r4, #28]
   81a8e:	2b01      	cmp	r3, #1
   81a90:	d11d      	bne.n	81ace <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81a92:	69a2      	ldr	r2, [r4, #24]
   81a94:	2300      	movs	r3, #0
   81a96:	9300      	str	r3, [sp, #0]
   81a98:	4620      	mov	r0, r4
   81a9a:	4619      	mov	r1, r3
   81a9c:	9c04      	ldr	r4, [sp, #16]
   81a9e:	4422      	add	r2, r4
   81aa0:	4c1a      	ldr	r4, [pc, #104]	; (81b0c <prvTimerTask+0x154>)
   81aa2:	47a0      	blx	r4
						configASSERT( xResult );
   81aa4:	b998      	cbnz	r0, 81ace <prvTimerTask+0x116>
   81aa6:	4b1a      	ldr	r3, [pc, #104]	; (81b10 <prvTimerTask+0x158>)
   81aa8:	4798      	blx	r3
   81aaa:	bf00      	nop
   81aac:	e7fd      	b.n	81aaa <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81aae:	9904      	ldr	r1, [sp, #16]
   81ab0:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81ab2:	b919      	cbnz	r1, 81abc <prvTimerTask+0x104>
   81ab4:	4b16      	ldr	r3, [pc, #88]	; (81b10 <prvTimerTask+0x158>)
   81ab6:	4798      	blx	r3
   81ab8:	bf00      	nop
   81aba:	e7fd      	b.n	81ab8 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81abc:	4620      	mov	r0, r4
   81abe:	4439      	add	r1, r7
   81ac0:	463a      	mov	r2, r7
   81ac2:	463b      	mov	r3, r7
   81ac4:	47c8      	blx	r9
   81ac6:	e002      	b.n	81ace <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81ac8:	4620      	mov	r0, r4
   81aca:	4b15      	ldr	r3, [pc, #84]	; (81b20 <prvTimerTask+0x168>)
   81acc:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81ace:	6828      	ldr	r0, [r5, #0]
   81ad0:	a903      	add	r1, sp, #12
   81ad2:	2200      	movs	r2, #0
   81ad4:	4613      	mov	r3, r2
   81ad6:	47b0      	blx	r6
   81ad8:	2800      	cmp	r0, #0
   81ada:	d1bf      	bne.n	81a5c <prvTimerTask+0xa4>
   81adc:	e772      	b.n	819c4 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81ade:	4b07      	ldr	r3, [pc, #28]	; (81afc <prvTimerTask+0x144>)
   81ae0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81ae2:	a803      	add	r0, sp, #12
   81ae4:	4b06      	ldr	r3, [pc, #24]	; (81b00 <prvTimerTask+0x148>)
   81ae6:	4798      	blx	r3
   81ae8:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81aea:	9b03      	ldr	r3, [sp, #12]
   81aec:	2b00      	cmp	r3, #0
   81aee:	d0a0      	beq.n	81a32 <prvTimerTask+0x7a>
   81af0:	e7aa      	b.n	81a48 <prvTimerTask+0x90>
   81af2:	bf00      	nop
   81af4:	2007ac34 	.word	0x2007ac34
   81af8:	2007ac04 	.word	0x2007ac04
   81afc:	00081165 	.word	0x00081165
   81b00:	00081905 	.word	0x00081905
   81b04:	000812b5 	.word	0x000812b5
   81b08:	000817bd 	.word	0x000817bd
   81b0c:	000818b1 	.word	0x000818b1
   81b10:	000806fd 	.word	0x000806fd
   81b14:	00080e55 	.word	0x00080e55
   81b18:	000806ed 	.word	0x000806ed
   81b1c:	00080cf9 	.word	0x00080cf9
   81b20:	00080921 	.word	0x00080921
   81b24:	00080675 	.word	0x00080675

00081b28 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81b28:	3801      	subs	r0, #1
   81b2a:	2802      	cmp	r0, #2
   81b2c:	d818      	bhi.n	81b60 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b32:	460e      	mov	r6, r1
   81b34:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81b36:	b182      	cbz	r2, 81b5a <_write+0x32>
   81b38:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81b3a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81b74 <_write+0x4c>
   81b3e:	4f0c      	ldr	r7, [pc, #48]	; (81b70 <_write+0x48>)
   81b40:	f8d8 0000 	ldr.w	r0, [r8]
   81b44:	f815 1b01 	ldrb.w	r1, [r5], #1
   81b48:	683b      	ldr	r3, [r7, #0]
   81b4a:	4798      	blx	r3
   81b4c:	2800      	cmp	r0, #0
   81b4e:	db0a      	blt.n	81b66 <_write+0x3e>
   81b50:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81b52:	3c01      	subs	r4, #1
   81b54:	d1f4      	bne.n	81b40 <_write+0x18>
   81b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81b5a:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   81b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   81b60:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   81b64:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   81b66:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   81b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81b6e:	bf00      	nop
   81b70:	2007aedc 	.word	0x2007aedc
   81b74:	2007aee0 	.word	0x2007aee0

00081b78 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   81b78:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   81b7a:	2401      	movs	r4, #1
   81b7c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   81b7e:	2400      	movs	r4, #0
   81b80:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   81b82:	f240 2502 	movw	r5, #514	; 0x202
   81b86:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   81b8a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   81b8e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   81b92:	6845      	ldr	r5, [r0, #4]
   81b94:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   81b96:	0052      	lsls	r2, r2, #1
   81b98:	fbb1 f1f2 	udiv	r1, r1, r2
   81b9c:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   81b9e:	0212      	lsls	r2, r2, #8
   81ba0:	b292      	uxth	r2, r2
   81ba2:	4313      	orrs	r3, r2
   81ba4:	6043      	str	r3, [r0, #4]
	return 0;
}
   81ba6:	4620      	mov	r0, r4
   81ba8:	bc30      	pop	{r4, r5}
   81baa:	4770      	bx	lr

00081bac <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   81bac:	6843      	ldr	r3, [r0, #4]
   81bae:	f023 0310 	bic.w	r3, r3, #16
   81bb2:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   81bb4:	6843      	ldr	r3, [r0, #4]
   81bb6:	4319      	orrs	r1, r3
   81bb8:	6041      	str	r1, [r0, #4]
   81bba:	4770      	bx	lr

00081bbc <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   81bbc:	6843      	ldr	r3, [r0, #4]
   81bbe:	4319      	orrs	r1, r3
   81bc0:	01d2      	lsls	r2, r2, #7
   81bc2:	b2d2      	uxtb	r2, r2
   81bc4:	4311      	orrs	r1, r2
   81bc6:	6041      	str	r1, [r0, #4]
   81bc8:	4770      	bx	lr
   81bca:	bf00      	nop

00081bcc <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   81bcc:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   81bce:	6844      	ldr	r4, [r0, #4]
   81bd0:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   81bd2:	0609      	lsls	r1, r1, #24
   81bd4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   81bd8:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   81bda:	071b      	lsls	r3, r3, #28
   81bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   81be0:	4313      	orrs	r3, r2
   81be2:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   81be4:	f85d 4b04 	ldr.w	r4, [sp], #4
   81be8:	4770      	bx	lr
   81bea:	bf00      	nop

00081bec <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   81bec:	2301      	movs	r3, #1
   81bee:	408b      	lsls	r3, r1
   81bf0:	6103      	str	r3, [r0, #16]
   81bf2:	4770      	bx	lr

00081bf4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81bf4:	6943      	ldr	r3, [r0, #20]
   81bf6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81bfa:	bf1d      	ittte	ne
   81bfc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81c00:	61c1      	strne	r1, [r0, #28]
	return 0;
   81c02:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81c04:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81c06:	4770      	bx	lr

00081c08 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81c08:	6943      	ldr	r3, [r0, #20]
   81c0a:	f013 0f01 	tst.w	r3, #1
   81c0e:	d005      	beq.n	81c1c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81c10:	6983      	ldr	r3, [r0, #24]
   81c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81c16:	600b      	str	r3, [r1, #0]

	return 0;
   81c18:	2000      	movs	r0, #0
   81c1a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   81c1c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   81c1e:	4770      	bx	lr

00081c20 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   81c20:	2a00      	cmp	r2, #0
   81c22:	d04e      	beq.n	81cc2 <usart_serial_read_packet+0xa2>
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   81c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c28:	b085      	sub	sp, #20
   81c2a:	4606      	mov	r6, r0
   81c2c:	460d      	mov	r5, r1
   81c2e:	4617      	mov	r7, r2

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81c30:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 81cd8 <usart_serial_read_packet+0xb8>
		while (uart_read((Uart*)p_usart, data));
   81c34:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 81cdc <usart_serial_read_packet+0xbc>
   81c38:	f8cd a000 	str.w	sl, [sp]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81c3c:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 81ce0 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
   81c40:	4c21      	ldr	r4, [pc, #132]	; (81cc8 <usart_serial_read_packet+0xa8>)
   81c42:	f8cd b004 	str.w	fp, [sp, #4]
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   81c46:	2300      	movs	r3, #0
   81c48:	9303      	str	r3, [sp, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81c4a:	4556      	cmp	r6, sl
   81c4c:	d105      	bne.n	81c5a <usart_serial_read_packet+0x3a>
		while (uart_read((Uart*)p_usart, data));
   81c4e:	9800      	ldr	r0, [sp, #0]
   81c50:	4629      	mov	r1, r5
   81c52:	47c8      	blx	r9
   81c54:	2800      	cmp	r0, #0
   81c56:	d1fa      	bne.n	81c4e <usart_serial_read_packet+0x2e>
   81c58:	e015      	b.n	81c86 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81c5a:	455e      	cmp	r6, fp
   81c5c:	d107      	bne.n	81c6e <usart_serial_read_packet+0x4e>
		while (usart_read(p_usart, &val));
   81c5e:	9801      	ldr	r0, [sp, #4]
   81c60:	a903      	add	r1, sp, #12
   81c62:	47a0      	blx	r4
   81c64:	2800      	cmp	r0, #0
   81c66:	d1fa      	bne.n	81c5e <usart_serial_read_packet+0x3e>
		*data = (uint8_t)(val & 0xFF);
   81c68:	9b03      	ldr	r3, [sp, #12]
   81c6a:	702b      	strb	r3, [r5, #0]
   81c6c:	e017      	b.n	81c9e <usart_serial_read_packet+0x7e>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81c6e:	4b17      	ldr	r3, [pc, #92]	; (81ccc <usart_serial_read_packet+0xac>)
   81c70:	429e      	cmp	r6, r3
   81c72:	d108      	bne.n	81c86 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
   81c74:	4698      	mov	r8, r3
   81c76:	4640      	mov	r0, r8
   81c78:	a903      	add	r1, sp, #12
   81c7a:	47a0      	blx	r4
   81c7c:	2800      	cmp	r0, #0
   81c7e:	d1fa      	bne.n	81c76 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
   81c80:	9b03      	ldr	r3, [sp, #12]
   81c82:	702b      	strb	r3, [r5, #0]
   81c84:	e016      	b.n	81cb4 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81c86:	4b12      	ldr	r3, [pc, #72]	; (81cd0 <usart_serial_read_packet+0xb0>)
   81c88:	429e      	cmp	r6, r3
   81c8a:	d108      	bne.n	81c9e <usart_serial_read_packet+0x7e>
		while (usart_read(p_usart, &val));
   81c8c:	4698      	mov	r8, r3
   81c8e:	4640      	mov	r0, r8
   81c90:	a903      	add	r1, sp, #12
   81c92:	47a0      	blx	r4
   81c94:	2800      	cmp	r0, #0
   81c96:	d1fa      	bne.n	81c8e <usart_serial_read_packet+0x6e>
		*data = (uint8_t)(val & 0xFF);
   81c98:	9b03      	ldr	r3, [sp, #12]
   81c9a:	702b      	strb	r3, [r5, #0]
   81c9c:	e00a      	b.n	81cb4 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81c9e:	4b0d      	ldr	r3, [pc, #52]	; (81cd4 <usart_serial_read_packet+0xb4>)
   81ca0:	429e      	cmp	r6, r3
   81ca2:	d107      	bne.n	81cb4 <usart_serial_read_packet+0x94>
		while (usart_read(p_usart, &val));
   81ca4:	4698      	mov	r8, r3
   81ca6:	4640      	mov	r0, r8
   81ca8:	a903      	add	r1, sp, #12
   81caa:	47a0      	blx	r4
   81cac:	2800      	cmp	r0, #0
   81cae:	d1fa      	bne.n	81ca6 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   81cb0:	9b03      	ldr	r3, [sp, #12]
   81cb2:	702b      	strb	r3, [r5, #0]
	while (len) {
		usart_serial_getchar(usart, data);
		len--;
		data++;
   81cb4:	3501      	adds	r5, #1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   81cb6:	3f01      	subs	r7, #1
   81cb8:	d1c5      	bne.n	81c46 <usart_serial_read_packet+0x26>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   81cba:	2000      	movs	r0, #0
   81cbc:	b005      	add	sp, #20
   81cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81cc2:	2000      	movs	r0, #0
   81cc4:	4770      	bx	lr
   81cc6:	bf00      	nop
   81cc8:	00081c09 	.word	0x00081c09
   81ccc:	4009c000 	.word	0x4009c000
   81cd0:	400a0000 	.word	0x400a0000
   81cd4:	400a4000 	.word	0x400a4000
   81cd8:	400e0800 	.word	0x400e0800
   81cdc:	00081ee5 	.word	0x00081ee5
   81ce0:	40098000 	.word	0x40098000

00081ce4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   81ce4:	b4f0      	push	{r4, r5, r6, r7}
   81ce6:	b08c      	sub	sp, #48	; 0x30
   81ce8:	4607      	mov	r7, r0
   81cea:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81cec:	ac01      	add	r4, sp, #4
   81cee:	4d11      	ldr	r5, [pc, #68]	; (81d34 <pwm_clocks_generate+0x50>)
   81cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81cf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   81cfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   81d00:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   81d02:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81d04:	f852 3b04 	ldr.w	r3, [r2], #4
   81d08:	fbb6 f3f3 	udiv	r3, r6, r3
   81d0c:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   81d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   81d14:	d905      	bls.n	81d22 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   81d16:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81d18:	280b      	cmp	r0, #11
   81d1a:	d1f3      	bne.n	81d04 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   81d1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81d20:	e005      	b.n	81d2e <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81d22:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   81d24:	bf94      	ite	ls
   81d26:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   81d2a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   81d2e:	b00c      	add	sp, #48	; 0x30
   81d30:	bcf0      	pop	{r4, r5, r6, r7}
   81d32:	4770      	bx	lr
   81d34:	00088ac8 	.word	0x00088ac8

00081d38 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81d38:	b570      	push	{r4, r5, r6, lr}
   81d3a:	4606      	mov	r6, r0
   81d3c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81d3e:	6808      	ldr	r0, [r1, #0]
   81d40:	b140      	cbz	r0, 81d54 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   81d42:	6889      	ldr	r1, [r1, #8]
   81d44:	4b0e      	ldr	r3, [pc, #56]	; (81d80 <pwm_init+0x48>)
   81d46:	4798      	blx	r3
   81d48:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   81d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81d4e:	4298      	cmp	r0, r3
   81d50:	d101      	bne.n	81d56 <pwm_init+0x1e>
   81d52:	e00e      	b.n	81d72 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81d54:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81d56:	6860      	ldr	r0, [r4, #4]
   81d58:	b140      	cbz	r0, 81d6c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81d5a:	68a1      	ldr	r1, [r4, #8]
   81d5c:	4b08      	ldr	r3, [pc, #32]	; (81d80 <pwm_init+0x48>)
   81d5e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   81d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81d64:	4298      	cmp	r0, r3
   81d66:	d007      	beq.n	81d78 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   81d68:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81d6c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81d6e:	2000      	movs	r0, #0
   81d70:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   81d72:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81d76:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   81d78:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   81d7c:	bd70      	pop	{r4, r5, r6, pc}
   81d7e:	bf00      	nop
   81d80:	00081ce5 	.word	0x00081ce5

00081d84 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81d84:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   81d86:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81d88:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81d8a:	684c      	ldr	r4, [r1, #4]
   81d8c:	f004 040f 	and.w	r4, r4, #15
   81d90:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   81d92:	890c      	ldrh	r4, [r1, #8]
   81d94:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81d96:	7a8c      	ldrb	r4, [r1, #10]
   81d98:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   81d9c:	7d8c      	ldrb	r4, [r1, #22]
   81d9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   81da2:	7dcc      	ldrb	r4, [r1, #23]
   81da4:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   81da8:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81daa:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   81dae:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   81db2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   81db6:	68ca      	ldr	r2, [r1, #12]
   81db8:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   81dbc:	690a      	ldr	r2, [r1, #16]
   81dbe:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   81dc2:	7d8a      	ldrb	r2, [r1, #22]
   81dc4:	b13a      	cbz	r2, 81dd6 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   81dc6:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   81dc8:	8b4a      	ldrh	r2, [r1, #26]
   81dca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   81dce:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   81dd2:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   81dd6:	6c84      	ldr	r4, [r0, #72]	; 0x48
   81dd8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   81ddc:	409a      	lsls	r2, r3
   81dde:	43d2      	mvns	r2, r2
   81de0:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   81de4:	7fcc      	ldrb	r4, [r1, #31]
   81de6:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   81dea:	7f8c      	ldrb	r4, [r1, #30]
   81dec:	409c      	lsls	r4, r3
   81dee:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   81df2:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   81df4:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   81df6:	6c44      	ldr	r4, [r0, #68]	; 0x44
   81df8:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   81dfa:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   81dfe:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   81e02:	f891 2020 	ldrb.w	r2, [r1, #32]
   81e06:	409a      	lsls	r2, r3
   81e08:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   81e0c:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   81e0e:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   81e10:	2201      	movs	r2, #1
   81e12:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   81e14:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81e18:	b11c      	cbz	r4, 81e22 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   81e1a:	6a04      	ldr	r4, [r0, #32]
   81e1c:	4314      	orrs	r4, r2
   81e1e:	6204      	str	r4, [r0, #32]
   81e20:	e003      	b.n	81e2a <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81e22:	6a04      	ldr	r4, [r0, #32]
   81e24:	ea24 0402 	bic.w	r4, r4, r2
   81e28:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81e2a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81e2e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81e30:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81e32:	bf0c      	ite	eq
   81e34:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81e36:	4394      	bicne	r4, r2
   81e38:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81e3a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81e3e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81e40:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81e42:	bf0c      	ite	eq
   81e44:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81e48:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   81e4c:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81e4e:	2b03      	cmp	r3, #3
   81e50:	d80b      	bhi.n	81e6a <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81e52:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   81e54:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81e56:	22ff      	movs	r2, #255	; 0xff
   81e58:	40aa      	lsls	r2, r5
   81e5a:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81e5e:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   81e62:	40ab      	lsls	r3, r5
   81e64:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81e66:	66c3      	str	r3, [r0, #108]	; 0x6c
   81e68:	e00c      	b.n	81e84 <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   81e6a:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81e6c:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81e6e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81e70:	24ff      	movs	r4, #255	; 0xff
   81e72:	409c      	lsls	r4, r3
   81e74:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81e78:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   81e7c:	fa02 f303 	lsl.w	r3, r2, r3
   81e80:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   81e82:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   81e84:	2000      	movs	r0, #0
   81e86:	bc70      	pop	{r4, r5, r6}
   81e88:	4770      	bx	lr
   81e8a:	bf00      	nop

00081e8c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81e8c:	2301      	movs	r3, #1
   81e8e:	408b      	lsls	r3, r1
   81e90:	6043      	str	r3, [r0, #4]
   81e92:	4770      	bx	lr

00081e94 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81e94:	2301      	movs	r3, #1
   81e96:	408b      	lsls	r3, r1
   81e98:	6083      	str	r3, [r0, #8]
   81e9a:	4770      	bx	lr

00081e9c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81e9c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81e9e:	23ac      	movs	r3, #172	; 0xac
   81ea0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81ea2:	680b      	ldr	r3, [r1, #0]
   81ea4:	684a      	ldr	r2, [r1, #4]
   81ea6:	fbb3 f3f2 	udiv	r3, r3, r2
   81eaa:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81eac:	1e5c      	subs	r4, r3, #1
   81eae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81eb2:	4294      	cmp	r4, r2
   81eb4:	d80a      	bhi.n	81ecc <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81eb6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81eb8:	688b      	ldr	r3, [r1, #8]
   81eba:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81ebc:	f240 2302 	movw	r3, #514	; 0x202
   81ec0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81ec4:	2350      	movs	r3, #80	; 0x50
   81ec6:	6003      	str	r3, [r0, #0]

	return 0;
   81ec8:	2000      	movs	r0, #0
   81eca:	e000      	b.n	81ece <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81ecc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81ece:	f85d 4b04 	ldr.w	r4, [sp], #4
   81ed2:	4770      	bx	lr

00081ed4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81ed4:	6943      	ldr	r3, [r0, #20]
   81ed6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81eda:	bf1a      	itte	ne
   81edc:	61c1      	strne	r1, [r0, #28]
	return 0;
   81ede:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81ee0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81ee2:	4770      	bx	lr

00081ee4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81ee4:	6943      	ldr	r3, [r0, #20]
   81ee6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81eea:	bf1d      	ittte	ne
   81eec:	6983      	ldrne	r3, [r0, #24]
   81eee:	700b      	strbne	r3, [r1, #0]
	return 0;
   81ef0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   81ef2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81ef4:	4770      	bx	lr
   81ef6:	bf00      	nop

00081ef8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81ef8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81efa:	480e      	ldr	r0, [pc, #56]	; (81f34 <sysclk_init+0x3c>)
   81efc:	4b0e      	ldr	r3, [pc, #56]	; (81f38 <sysclk_init+0x40>)
   81efe:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81f00:	2000      	movs	r0, #0
   81f02:	213e      	movs	r1, #62	; 0x3e
   81f04:	4b0d      	ldr	r3, [pc, #52]	; (81f3c <sysclk_init+0x44>)
   81f06:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81f08:	4c0d      	ldr	r4, [pc, #52]	; (81f40 <sysclk_init+0x48>)
   81f0a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81f0c:	2800      	cmp	r0, #0
   81f0e:	d0fc      	beq.n	81f0a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81f10:	4b0c      	ldr	r3, [pc, #48]	; (81f44 <sysclk_init+0x4c>)
   81f12:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81f14:	4a0c      	ldr	r2, [pc, #48]	; (81f48 <sysclk_init+0x50>)
   81f16:	4b0d      	ldr	r3, [pc, #52]	; (81f4c <sysclk_init+0x54>)
   81f18:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81f1a:	4c0d      	ldr	r4, [pc, #52]	; (81f50 <sysclk_init+0x58>)
   81f1c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81f1e:	2800      	cmp	r0, #0
   81f20:	d0fc      	beq.n	81f1c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81f22:	2010      	movs	r0, #16
   81f24:	4b0b      	ldr	r3, [pc, #44]	; (81f54 <sysclk_init+0x5c>)
   81f26:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81f28:	4b0b      	ldr	r3, [pc, #44]	; (81f58 <sysclk_init+0x60>)
   81f2a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81f2c:	4801      	ldr	r0, [pc, #4]	; (81f34 <sysclk_init+0x3c>)
   81f2e:	4b02      	ldr	r3, [pc, #8]	; (81f38 <sysclk_init+0x40>)
   81f30:	4798      	blx	r3
   81f32:	bd10      	pop	{r4, pc}
   81f34:	0501bd00 	.word	0x0501bd00
   81f38:	200700a5 	.word	0x200700a5
   81f3c:	000822fd 	.word	0x000822fd
   81f40:	00082351 	.word	0x00082351
   81f44:	00082361 	.word	0x00082361
   81f48:	200d3f01 	.word	0x200d3f01
   81f4c:	400e0600 	.word	0x400e0600
   81f50:	00082371 	.word	0x00082371
   81f54:	00082295 	.word	0x00082295
   81f58:	00082489 	.word	0x00082489

00081f5c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81f5c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81f5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81f62:	4b16      	ldr	r3, [pc, #88]	; (81fbc <board_init+0x60>)
   81f64:	605a      	str	r2, [r3, #4]
   81f66:	200b      	movs	r0, #11
   81f68:	4c15      	ldr	r4, [pc, #84]	; (81fc0 <board_init+0x64>)
   81f6a:	47a0      	blx	r4
   81f6c:	200c      	movs	r0, #12
   81f6e:	47a0      	blx	r4
   81f70:	200d      	movs	r0, #13
   81f72:	47a0      	blx	r4
   81f74:	200e      	movs	r0, #14
   81f76:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81f78:	203b      	movs	r0, #59	; 0x3b
   81f7a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f7e:	4c11      	ldr	r4, [pc, #68]	; (81fc4 <board_init+0x68>)
   81f80:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81f82:	2055      	movs	r0, #85	; 0x55
   81f84:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f88:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81f8a:	2056      	movs	r0, #86	; 0x56
   81f8c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f90:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81f92:	2068      	movs	r0, #104	; 0x68
   81f94:	490c      	ldr	r1, [pc, #48]	; (81fc8 <board_init+0x6c>)
   81f96:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81f98:	205c      	movs	r0, #92	; 0x5c
   81f9a:	490c      	ldr	r1, [pc, #48]	; (81fcc <board_init+0x70>)
   81f9c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81f9e:	480c      	ldr	r0, [pc, #48]	; (81fd0 <board_init+0x74>)
   81fa0:	f44f 7140 	mov.w	r1, #768	; 0x300
   81fa4:	4a0b      	ldr	r2, [pc, #44]	; (81fd4 <board_init+0x78>)
   81fa6:	4b0c      	ldr	r3, [pc, #48]	; (81fd8 <board_init+0x7c>)
   81fa8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81faa:	202b      	movs	r0, #43	; 0x2b
   81fac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fb0:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81fb2:	202a      	movs	r0, #42	; 0x2a
   81fb4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fb8:	47a0      	blx	r4
   81fba:	bd10      	pop	{r4, pc}
   81fbc:	400e1a50 	.word	0x400e1a50
   81fc0:	00082381 	.word	0x00082381
   81fc4:	00082081 	.word	0x00082081
   81fc8:	28000079 	.word	0x28000079
   81fcc:	28000001 	.word	0x28000001
   81fd0:	400e0e00 	.word	0x400e0e00
   81fd4:	08000001 	.word	0x08000001
   81fd8:	00082155 	.word	0x00082155

00081fdc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81fdc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81fde:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81fe2:	d016      	beq.n	82012 <pio_set_peripheral+0x36>
   81fe4:	d804      	bhi.n	81ff0 <pio_set_peripheral+0x14>
   81fe6:	b1c1      	cbz	r1, 8201a <pio_set_peripheral+0x3e>
   81fe8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81fec:	d00a      	beq.n	82004 <pio_set_peripheral+0x28>
   81fee:	e013      	b.n	82018 <pio_set_peripheral+0x3c>
   81ff0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81ff4:	d011      	beq.n	8201a <pio_set_peripheral+0x3e>
   81ff6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81ffa:	d00e      	beq.n	8201a <pio_set_peripheral+0x3e>
   81ffc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82000:	d10a      	bne.n	82018 <pio_set_peripheral+0x3c>
   82002:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82004:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82006:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82008:	400b      	ands	r3, r1
   8200a:	ea23 0302 	bic.w	r3, r3, r2
   8200e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82010:	e002      	b.n	82018 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82012:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82014:	4313      	orrs	r3, r2
   82016:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82018:	6042      	str	r2, [r0, #4]
   8201a:	4770      	bx	lr

0008201c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8201c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8201e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82022:	bf14      	ite	ne
   82024:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82026:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82028:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8202c:	bf14      	ite	ne
   8202e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82030:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82032:	f012 0f02 	tst.w	r2, #2
   82036:	d002      	beq.n	8203e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82038:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8203c:	e004      	b.n	82048 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8203e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82042:	bf18      	it	ne
   82044:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82048:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8204a:	6001      	str	r1, [r0, #0]
   8204c:	4770      	bx	lr
   8204e:	bf00      	nop

00082050 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82050:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82052:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82054:	9c01      	ldr	r4, [sp, #4]
   82056:	b10c      	cbz	r4, 8205c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82058:	6641      	str	r1, [r0, #100]	; 0x64
   8205a:	e000      	b.n	8205e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8205c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8205e:	b10b      	cbz	r3, 82064 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82060:	6501      	str	r1, [r0, #80]	; 0x50
   82062:	e000      	b.n	82066 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82064:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82066:	b10a      	cbz	r2, 8206c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82068:	6301      	str	r1, [r0, #48]	; 0x30
   8206a:	e000      	b.n	8206e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8206c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8206e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82070:	6001      	str	r1, [r0, #0]
}
   82072:	f85d 4b04 	ldr.w	r4, [sp], #4
   82076:	4770      	bx	lr

00082078 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82078:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8207a:	4770      	bx	lr

0008207c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8207c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8207e:	4770      	bx	lr

00082080 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82080:	b570      	push	{r4, r5, r6, lr}
   82082:	b082      	sub	sp, #8
   82084:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82086:	0943      	lsrs	r3, r0, #5
   82088:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8208c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82090:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82092:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82096:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8209a:	d030      	beq.n	820fe <pio_configure_pin+0x7e>
   8209c:	d806      	bhi.n	820ac <pio_configure_pin+0x2c>
   8209e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   820a2:	d00a      	beq.n	820ba <pio_configure_pin+0x3a>
   820a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   820a8:	d018      	beq.n	820dc <pio_configure_pin+0x5c>
   820aa:	e049      	b.n	82140 <pio_configure_pin+0xc0>
   820ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   820b0:	d030      	beq.n	82114 <pio_configure_pin+0x94>
   820b2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   820b6:	d02d      	beq.n	82114 <pio_configure_pin+0x94>
   820b8:	e042      	b.n	82140 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   820ba:	f000 001f 	and.w	r0, r0, #31
   820be:	2601      	movs	r6, #1
   820c0:	4086      	lsls	r6, r0
   820c2:	4620      	mov	r0, r4
   820c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820c8:	4632      	mov	r2, r6
   820ca:	4b1f      	ldr	r3, [pc, #124]	; (82148 <pio_configure_pin+0xc8>)
   820cc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   820ce:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   820d2:	bf14      	ite	ne
   820d4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   820d6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   820d8:	2001      	movs	r0, #1
   820da:	e032      	b.n	82142 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   820dc:	f000 001f 	and.w	r0, r0, #31
   820e0:	2601      	movs	r6, #1
   820e2:	4086      	lsls	r6, r0
   820e4:	4620      	mov	r0, r4
   820e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   820ea:	4632      	mov	r2, r6
   820ec:	4b16      	ldr	r3, [pc, #88]	; (82148 <pio_configure_pin+0xc8>)
   820ee:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   820f0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   820f4:	bf14      	ite	ne
   820f6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   820f8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   820fa:	2001      	movs	r0, #1
   820fc:	e021      	b.n	82142 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   820fe:	f000 031f 	and.w	r3, r0, #31
   82102:	2601      	movs	r6, #1
   82104:	4620      	mov	r0, r4
   82106:	fa06 f103 	lsl.w	r1, r6, r3
   8210a:	462a      	mov	r2, r5
   8210c:	4b0f      	ldr	r3, [pc, #60]	; (8214c <pio_configure_pin+0xcc>)
   8210e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82110:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82112:	e016      	b.n	82142 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82114:	f000 031f 	and.w	r3, r0, #31
   82118:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8211a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8211e:	ea05 0106 	and.w	r1, r5, r6
   82122:	9100      	str	r1, [sp, #0]
   82124:	4620      	mov	r0, r4
   82126:	fa06 f103 	lsl.w	r1, r6, r3
   8212a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8212e:	bf14      	ite	ne
   82130:	2200      	movne	r2, #0
   82132:	2201      	moveq	r2, #1
   82134:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82138:	4c05      	ldr	r4, [pc, #20]	; (82150 <pio_configure_pin+0xd0>)
   8213a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8213c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8213e:	e000      	b.n	82142 <pio_configure_pin+0xc2>

	default:
		return 0;
   82140:	2000      	movs	r0, #0
	}

	return 1;
}
   82142:	b002      	add	sp, #8
   82144:	bd70      	pop	{r4, r5, r6, pc}
   82146:	bf00      	nop
   82148:	00081fdd 	.word	0x00081fdd
   8214c:	0008201d 	.word	0x0008201d
   82150:	00082051 	.word	0x00082051

00082154 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82154:	b570      	push	{r4, r5, r6, lr}
   82156:	b082      	sub	sp, #8
   82158:	4606      	mov	r6, r0
   8215a:	460d      	mov	r5, r1
   8215c:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8215e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82162:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82166:	d026      	beq.n	821b6 <pio_configure_pin_group+0x62>
   82168:	d806      	bhi.n	82178 <pio_configure_pin_group+0x24>
   8216a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8216e:	d00a      	beq.n	82186 <pio_configure_pin_group+0x32>
   82170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82174:	d013      	beq.n	8219e <pio_configure_pin_group+0x4a>
   82176:	e034      	b.n	821e2 <pio_configure_pin_group+0x8e>
   82178:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8217c:	d01f      	beq.n	821be <pio_configure_pin_group+0x6a>
   8217e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82182:	d01c      	beq.n	821be <pio_configure_pin_group+0x6a>
   82184:	e02d      	b.n	821e2 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82186:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8218a:	462a      	mov	r2, r5
   8218c:	4b16      	ldr	r3, [pc, #88]	; (821e8 <pio_configure_pin_group+0x94>)
   8218e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82190:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82194:	bf14      	ite	ne
   82196:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82198:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8219a:	2001      	movs	r0, #1
   8219c:	e022      	b.n	821e4 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8219e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   821a2:	462a      	mov	r2, r5
   821a4:	4b10      	ldr	r3, [pc, #64]	; (821e8 <pio_configure_pin_group+0x94>)
   821a6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   821a8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   821ac:	bf14      	ite	ne
   821ae:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   821b0:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   821b2:	2001      	movs	r0, #1
   821b4:	e016      	b.n	821e4 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   821b6:	4b0d      	ldr	r3, [pc, #52]	; (821ec <pio_configure_pin_group+0x98>)
   821b8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   821ba:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   821bc:	e012      	b.n	821e4 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   821be:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   821c2:	f004 0301 	and.w	r3, r4, #1
   821c6:	9300      	str	r3, [sp, #0]
   821c8:	4630      	mov	r0, r6
   821ca:	4629      	mov	r1, r5
   821cc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   821d0:	bf14      	ite	ne
   821d2:	2200      	movne	r2, #0
   821d4:	2201      	moveq	r2, #1
   821d6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   821da:	4c05      	ldr	r4, [pc, #20]	; (821f0 <pio_configure_pin_group+0x9c>)
   821dc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   821de:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   821e0:	e000      	b.n	821e4 <pio_configure_pin_group+0x90>

	default:
		return 0;
   821e2:	2000      	movs	r0, #0
	}

	return 1;
}
   821e4:	b002      	add	sp, #8
   821e6:	bd70      	pop	{r4, r5, r6, pc}
   821e8:	00081fdd 	.word	0x00081fdd
   821ec:	0008201d 	.word	0x0008201d
   821f0:	00082051 	.word	0x00082051

000821f4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   821f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   821f8:	4604      	mov	r4, r0
   821fa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   821fc:	4b0e      	ldr	r3, [pc, #56]	; (82238 <pio_handler_process+0x44>)
   821fe:	4798      	blx	r3
   82200:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82202:	4620      	mov	r0, r4
   82204:	4b0d      	ldr	r3, [pc, #52]	; (8223c <pio_handler_process+0x48>)
   82206:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82208:	4005      	ands	r5, r0
   8220a:	d013      	beq.n	82234 <pio_handler_process+0x40>
   8220c:	4c0c      	ldr	r4, [pc, #48]	; (82240 <pio_handler_process+0x4c>)
   8220e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82212:	6823      	ldr	r3, [r4, #0]
   82214:	4543      	cmp	r3, r8
   82216:	d108      	bne.n	8222a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82218:	6861      	ldr	r1, [r4, #4]
   8221a:	4229      	tst	r1, r5
   8221c:	d005      	beq.n	8222a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8221e:	68e3      	ldr	r3, [r4, #12]
   82220:	4640      	mov	r0, r8
   82222:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82224:	6863      	ldr	r3, [r4, #4]
   82226:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8222a:	42b4      	cmp	r4, r6
   8222c:	d002      	beq.n	82234 <pio_handler_process+0x40>
   8222e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82230:	2d00      	cmp	r5, #0
   82232:	d1ee      	bne.n	82212 <pio_handler_process+0x1e>
   82234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82238:	00082079 	.word	0x00082079
   8223c:	0008207d 	.word	0x0008207d
   82240:	2007ac3c 	.word	0x2007ac3c

00082244 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82244:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82246:	4802      	ldr	r0, [pc, #8]	; (82250 <PIOA_Handler+0xc>)
   82248:	210b      	movs	r1, #11
   8224a:	4b02      	ldr	r3, [pc, #8]	; (82254 <PIOA_Handler+0x10>)
   8224c:	4798      	blx	r3
   8224e:	bd08      	pop	{r3, pc}
   82250:	400e0e00 	.word	0x400e0e00
   82254:	000821f5 	.word	0x000821f5

00082258 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82258:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8225a:	4802      	ldr	r0, [pc, #8]	; (82264 <PIOB_Handler+0xc>)
   8225c:	210c      	movs	r1, #12
   8225e:	4b02      	ldr	r3, [pc, #8]	; (82268 <PIOB_Handler+0x10>)
   82260:	4798      	blx	r3
   82262:	bd08      	pop	{r3, pc}
   82264:	400e1000 	.word	0x400e1000
   82268:	000821f5 	.word	0x000821f5

0008226c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8226c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8226e:	4802      	ldr	r0, [pc, #8]	; (82278 <PIOC_Handler+0xc>)
   82270:	210d      	movs	r1, #13
   82272:	4b02      	ldr	r3, [pc, #8]	; (8227c <PIOC_Handler+0x10>)
   82274:	4798      	blx	r3
   82276:	bd08      	pop	{r3, pc}
   82278:	400e1200 	.word	0x400e1200
   8227c:	000821f5 	.word	0x000821f5

00082280 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82280:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82282:	4802      	ldr	r0, [pc, #8]	; (8228c <PIOD_Handler+0xc>)
   82284:	210e      	movs	r1, #14
   82286:	4b02      	ldr	r3, [pc, #8]	; (82290 <PIOD_Handler+0x10>)
   82288:	4798      	blx	r3
   8228a:	bd08      	pop	{r3, pc}
   8228c:	400e1400 	.word	0x400e1400
   82290:	000821f5 	.word	0x000821f5

00082294 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82294:	4a18      	ldr	r2, [pc, #96]	; (822f8 <pmc_switch_mck_to_pllack+0x64>)
   82296:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8229c:	4318      	orrs	r0, r3
   8229e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   822a2:	f013 0f08 	tst.w	r3, #8
   822a6:	d003      	beq.n	822b0 <pmc_switch_mck_to_pllack+0x1c>
   822a8:	e009      	b.n	822be <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   822aa:	3b01      	subs	r3, #1
   822ac:	d103      	bne.n	822b6 <pmc_switch_mck_to_pllack+0x22>
   822ae:	e01e      	b.n	822ee <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822b4:	4910      	ldr	r1, [pc, #64]	; (822f8 <pmc_switch_mck_to_pllack+0x64>)
   822b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   822b8:	f012 0f08 	tst.w	r2, #8
   822bc:	d0f5      	beq.n	822aa <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   822be:	4a0e      	ldr	r2, [pc, #56]	; (822f8 <pmc_switch_mck_to_pllack+0x64>)
   822c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   822c2:	f023 0303 	bic.w	r3, r3, #3
   822c6:	f043 0302 	orr.w	r3, r3, #2
   822ca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822cc:	6e90      	ldr	r0, [r2, #104]	; 0x68
   822ce:	f010 0008 	ands.w	r0, r0, #8
   822d2:	d004      	beq.n	822de <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   822d4:	2000      	movs	r0, #0
   822d6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   822d8:	3b01      	subs	r3, #1
   822da:	d103      	bne.n	822e4 <pmc_switch_mck_to_pllack+0x50>
   822dc:	e009      	b.n	822f2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822de:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822e2:	4905      	ldr	r1, [pc, #20]	; (822f8 <pmc_switch_mck_to_pllack+0x64>)
   822e4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   822e6:	f012 0f08 	tst.w	r2, #8
   822ea:	d0f5      	beq.n	822d8 <pmc_switch_mck_to_pllack+0x44>
   822ec:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   822ee:	2001      	movs	r0, #1
   822f0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   822f2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   822f4:	4770      	bx	lr
   822f6:	bf00      	nop
   822f8:	400e0600 	.word	0x400e0600

000822fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   822fc:	b138      	cbz	r0, 8230e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   822fe:	4911      	ldr	r1, [pc, #68]	; (82344 <pmc_switch_mainck_to_xtal+0x48>)
   82300:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82302:	4a11      	ldr	r2, [pc, #68]	; (82348 <pmc_switch_mainck_to_xtal+0x4c>)
   82304:	401a      	ands	r2, r3
   82306:	4b11      	ldr	r3, [pc, #68]	; (8234c <pmc_switch_mainck_to_xtal+0x50>)
   82308:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8230a:	620b      	str	r3, [r1, #32]
   8230c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8230e:	4a0d      	ldr	r2, [pc, #52]	; (82344 <pmc_switch_mainck_to_xtal+0x48>)
   82310:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82312:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82316:	f023 0303 	bic.w	r3, r3, #3
   8231a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8231e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82322:	0209      	lsls	r1, r1, #8
   82324:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82326:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82328:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8232a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8232c:	f013 0f01 	tst.w	r3, #1
   82330:	d0fb      	beq.n	8232a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82332:	4a04      	ldr	r2, [pc, #16]	; (82344 <pmc_switch_mainck_to_xtal+0x48>)
   82334:	6a13      	ldr	r3, [r2, #32]
   82336:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8233a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8233e:	6213      	str	r3, [r2, #32]
   82340:	4770      	bx	lr
   82342:	bf00      	nop
   82344:	400e0600 	.word	0x400e0600
   82348:	fec8fffc 	.word	0xfec8fffc
   8234c:	01370002 	.word	0x01370002

00082350 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82350:	4b02      	ldr	r3, [pc, #8]	; (8235c <pmc_osc_is_ready_mainck+0xc>)
   82352:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82354:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82358:	4770      	bx	lr
   8235a:	bf00      	nop
   8235c:	400e0600 	.word	0x400e0600

00082360 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82360:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82364:	4b01      	ldr	r3, [pc, #4]	; (8236c <pmc_disable_pllack+0xc>)
   82366:	629a      	str	r2, [r3, #40]	; 0x28
   82368:	4770      	bx	lr
   8236a:	bf00      	nop
   8236c:	400e0600 	.word	0x400e0600

00082370 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82370:	4b02      	ldr	r3, [pc, #8]	; (8237c <pmc_is_locked_pllack+0xc>)
   82372:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82374:	f000 0002 	and.w	r0, r0, #2
   82378:	4770      	bx	lr
   8237a:	bf00      	nop
   8237c:	400e0600 	.word	0x400e0600

00082380 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82380:	282c      	cmp	r0, #44	; 0x2c
   82382:	d81e      	bhi.n	823c2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82384:	281f      	cmp	r0, #31
   82386:	d80c      	bhi.n	823a2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82388:	4b11      	ldr	r3, [pc, #68]	; (823d0 <pmc_enable_periph_clk+0x50>)
   8238a:	699a      	ldr	r2, [r3, #24]
   8238c:	2301      	movs	r3, #1
   8238e:	4083      	lsls	r3, r0
   82390:	401a      	ands	r2, r3
   82392:	4293      	cmp	r3, r2
   82394:	d017      	beq.n	823c6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   82396:	2301      	movs	r3, #1
   82398:	4083      	lsls	r3, r0
   8239a:	4a0d      	ldr	r2, [pc, #52]	; (823d0 <pmc_enable_periph_clk+0x50>)
   8239c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8239e:	2000      	movs	r0, #0
   823a0:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   823a2:	4b0b      	ldr	r3, [pc, #44]	; (823d0 <pmc_enable_periph_clk+0x50>)
   823a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   823a8:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   823aa:	2301      	movs	r3, #1
   823ac:	4083      	lsls	r3, r0
   823ae:	401a      	ands	r2, r3
   823b0:	4293      	cmp	r3, r2
   823b2:	d00a      	beq.n	823ca <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   823b4:	2301      	movs	r3, #1
   823b6:	4083      	lsls	r3, r0
   823b8:	4a05      	ldr	r2, [pc, #20]	; (823d0 <pmc_enable_periph_clk+0x50>)
   823ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   823be:	2000      	movs	r0, #0
   823c0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   823c2:	2001      	movs	r0, #1
   823c4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   823c6:	2000      	movs	r0, #0
   823c8:	4770      	bx	lr
   823ca:	2000      	movs	r0, #0
}
   823cc:	4770      	bx	lr
   823ce:	bf00      	nop
   823d0:	400e0600 	.word	0x400e0600

000823d4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   823d4:	e7fe      	b.n	823d4 <Dummy_Handler>
   823d6:	bf00      	nop

000823d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   823d8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   823da:	4b1f      	ldr	r3, [pc, #124]	; (82458 <Reset_Handler+0x80>)
   823dc:	4a1f      	ldr	r2, [pc, #124]	; (8245c <Reset_Handler+0x84>)
   823de:	429a      	cmp	r2, r3
   823e0:	d003      	beq.n	823ea <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   823e2:	4b1f      	ldr	r3, [pc, #124]	; (82460 <Reset_Handler+0x88>)
   823e4:	4a1c      	ldr	r2, [pc, #112]	; (82458 <Reset_Handler+0x80>)
   823e6:	429a      	cmp	r2, r3
   823e8:	d304      	bcc.n	823f4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   823ea:	4b1e      	ldr	r3, [pc, #120]	; (82464 <Reset_Handler+0x8c>)
   823ec:	4a1e      	ldr	r2, [pc, #120]	; (82468 <Reset_Handler+0x90>)
   823ee:	429a      	cmp	r2, r3
   823f0:	d310      	bcc.n	82414 <Reset_Handler+0x3c>
   823f2:	e01b      	b.n	8242c <Reset_Handler+0x54>
   823f4:	4918      	ldr	r1, [pc, #96]	; (82458 <Reset_Handler+0x80>)
   823f6:	1d0a      	adds	r2, r1, #4
   823f8:	4b1c      	ldr	r3, [pc, #112]	; (8246c <Reset_Handler+0x94>)
   823fa:	1a9b      	subs	r3, r3, r2
   823fc:	f023 0303 	bic.w	r3, r3, #3
   82400:	3304      	adds	r3, #4
   82402:	4a16      	ldr	r2, [pc, #88]	; (8245c <Reset_Handler+0x84>)
   82404:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   82406:	f852 0b04 	ldr.w	r0, [r2], #4
   8240a:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8240e:	429a      	cmp	r2, r3
   82410:	d1f9      	bne.n	82406 <Reset_Handler+0x2e>
   82412:	e7ea      	b.n	823ea <Reset_Handler+0x12>
   82414:	4b16      	ldr	r3, [pc, #88]	; (82470 <Reset_Handler+0x98>)
   82416:	4a17      	ldr	r2, [pc, #92]	; (82474 <Reset_Handler+0x9c>)
   82418:	1ad2      	subs	r2, r2, r3
   8241a:	f022 0203 	bic.w	r2, r2, #3
   8241e:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82420:	3b04      	subs	r3, #4
		*pDest++ = 0;
   82422:	2100      	movs	r1, #0
   82424:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82428:	4293      	cmp	r3, r2
   8242a:	d1fb      	bne.n	82424 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8242c:	4b12      	ldr	r3, [pc, #72]	; (82478 <Reset_Handler+0xa0>)
   8242e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82432:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82436:	4911      	ldr	r1, [pc, #68]	; (8247c <Reset_Handler+0xa4>)
   82438:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8243a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8243e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82442:	d203      	bcs.n	8244c <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82444:	688b      	ldr	r3, [r1, #8]
   82446:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8244a:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8244c:	4b0c      	ldr	r3, [pc, #48]	; (82480 <Reset_Handler+0xa8>)
   8244e:	4798      	blx	r3

	/* Branch to main function */
	main();
   82450:	4b0c      	ldr	r3, [pc, #48]	; (82484 <Reset_Handler+0xac>)
   82452:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82454:	e7fe      	b.n	82454 <Reset_Handler+0x7c>
   82456:	bf00      	nop
   82458:	20070000 	.word	0x20070000
   8245c:	00088f1c 	.word	0x00088f1c
   82460:	200709e0 	.word	0x200709e0
   82464:	2007afc4 	.word	0x2007afc4
   82468:	200709e0 	.word	0x200709e0
   8246c:	200709e3 	.word	0x200709e3
   82470:	200709e4 	.word	0x200709e4
   82474:	2007afc7 	.word	0x2007afc7
   82478:	00080000 	.word	0x00080000
   8247c:	e000ed00 	.word	0xe000ed00
   82480:	00082d9d 	.word	0x00082d9d
   82484:	000825f5 	.word	0x000825f5

00082488 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82488:	4b3e      	ldr	r3, [pc, #248]	; (82584 <SystemCoreClockUpdate+0xfc>)
   8248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8248c:	f003 0303 	and.w	r3, r3, #3
   82490:	2b03      	cmp	r3, #3
   82492:	d85f      	bhi.n	82554 <SystemCoreClockUpdate+0xcc>
   82494:	e8df f003 	tbb	[pc, r3]
   82498:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8249c:	4b3a      	ldr	r3, [pc, #232]	; (82588 <SystemCoreClockUpdate+0x100>)
   8249e:	695b      	ldr	r3, [r3, #20]
   824a0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   824a4:	bf14      	ite	ne
   824a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   824aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   824ae:	4b37      	ldr	r3, [pc, #220]	; (8258c <SystemCoreClockUpdate+0x104>)
   824b0:	601a      	str	r2, [r3, #0]
   824b2:	e04f      	b.n	82554 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   824b4:	4b33      	ldr	r3, [pc, #204]	; (82584 <SystemCoreClockUpdate+0xfc>)
   824b6:	6a1b      	ldr	r3, [r3, #32]
   824b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   824bc:	d003      	beq.n	824c6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   824be:	4a34      	ldr	r2, [pc, #208]	; (82590 <SystemCoreClockUpdate+0x108>)
   824c0:	4b32      	ldr	r3, [pc, #200]	; (8258c <SystemCoreClockUpdate+0x104>)
   824c2:	601a      	str	r2, [r3, #0]
   824c4:	e046      	b.n	82554 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   824c6:	4a33      	ldr	r2, [pc, #204]	; (82594 <SystemCoreClockUpdate+0x10c>)
   824c8:	4b30      	ldr	r3, [pc, #192]	; (8258c <SystemCoreClockUpdate+0x104>)
   824ca:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   824cc:	4b2d      	ldr	r3, [pc, #180]	; (82584 <SystemCoreClockUpdate+0xfc>)
   824ce:	6a1b      	ldr	r3, [r3, #32]
   824d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824d4:	2b10      	cmp	r3, #16
   824d6:	d002      	beq.n	824de <SystemCoreClockUpdate+0x56>
   824d8:	2b20      	cmp	r3, #32
   824da:	d004      	beq.n	824e6 <SystemCoreClockUpdate+0x5e>
   824dc:	e03a      	b.n	82554 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   824de:	4a2e      	ldr	r2, [pc, #184]	; (82598 <SystemCoreClockUpdate+0x110>)
   824e0:	4b2a      	ldr	r3, [pc, #168]	; (8258c <SystemCoreClockUpdate+0x104>)
   824e2:	601a      	str	r2, [r3, #0]
				break;
   824e4:	e036      	b.n	82554 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   824e6:	4a2a      	ldr	r2, [pc, #168]	; (82590 <SystemCoreClockUpdate+0x108>)
   824e8:	4b28      	ldr	r3, [pc, #160]	; (8258c <SystemCoreClockUpdate+0x104>)
   824ea:	601a      	str	r2, [r3, #0]
				break;
   824ec:	e032      	b.n	82554 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   824ee:	4b25      	ldr	r3, [pc, #148]	; (82584 <SystemCoreClockUpdate+0xfc>)
   824f0:	6a1b      	ldr	r3, [r3, #32]
   824f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   824f6:	d003      	beq.n	82500 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   824f8:	4a25      	ldr	r2, [pc, #148]	; (82590 <SystemCoreClockUpdate+0x108>)
   824fa:	4b24      	ldr	r3, [pc, #144]	; (8258c <SystemCoreClockUpdate+0x104>)
   824fc:	601a      	str	r2, [r3, #0]
   824fe:	e012      	b.n	82526 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82500:	4a24      	ldr	r2, [pc, #144]	; (82594 <SystemCoreClockUpdate+0x10c>)
   82502:	4b22      	ldr	r3, [pc, #136]	; (8258c <SystemCoreClockUpdate+0x104>)
   82504:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82506:	4b1f      	ldr	r3, [pc, #124]	; (82584 <SystemCoreClockUpdate+0xfc>)
   82508:	6a1b      	ldr	r3, [r3, #32]
   8250a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8250e:	2b10      	cmp	r3, #16
   82510:	d002      	beq.n	82518 <SystemCoreClockUpdate+0x90>
   82512:	2b20      	cmp	r3, #32
   82514:	d004      	beq.n	82520 <SystemCoreClockUpdate+0x98>
   82516:	e006      	b.n	82526 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82518:	4a1f      	ldr	r2, [pc, #124]	; (82598 <SystemCoreClockUpdate+0x110>)
   8251a:	4b1c      	ldr	r3, [pc, #112]	; (8258c <SystemCoreClockUpdate+0x104>)
   8251c:	601a      	str	r2, [r3, #0]
				break;
   8251e:	e002      	b.n	82526 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82520:	4a1b      	ldr	r2, [pc, #108]	; (82590 <SystemCoreClockUpdate+0x108>)
   82522:	4b1a      	ldr	r3, [pc, #104]	; (8258c <SystemCoreClockUpdate+0x104>)
   82524:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82526:	4b17      	ldr	r3, [pc, #92]	; (82584 <SystemCoreClockUpdate+0xfc>)
   82528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8252a:	f003 0303 	and.w	r3, r3, #3
   8252e:	2b02      	cmp	r3, #2
   82530:	d10d      	bne.n	8254e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82532:	4a14      	ldr	r2, [pc, #80]	; (82584 <SystemCoreClockUpdate+0xfc>)
   82534:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82536:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82538:	4814      	ldr	r0, [pc, #80]	; (8258c <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8253a:	f3c3 410a 	ubfx	r1, r3, #16, #11
   8253e:	6803      	ldr	r3, [r0, #0]
   82540:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82544:	b2d2      	uxtb	r2, r2
   82546:	fbb3 f3f2 	udiv	r3, r3, r2
   8254a:	6003      	str	r3, [r0, #0]
   8254c:	e002      	b.n	82554 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8254e:	4a13      	ldr	r2, [pc, #76]	; (8259c <SystemCoreClockUpdate+0x114>)
   82550:	4b0e      	ldr	r3, [pc, #56]	; (8258c <SystemCoreClockUpdate+0x104>)
   82552:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82554:	4b0b      	ldr	r3, [pc, #44]	; (82584 <SystemCoreClockUpdate+0xfc>)
   82556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82558:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8255c:	2b70      	cmp	r3, #112	; 0x70
   8255e:	d107      	bne.n	82570 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82560:	4a0a      	ldr	r2, [pc, #40]	; (8258c <SystemCoreClockUpdate+0x104>)
   82562:	6813      	ldr	r3, [r2, #0]
   82564:	490e      	ldr	r1, [pc, #56]	; (825a0 <SystemCoreClockUpdate+0x118>)
   82566:	fba1 1303 	umull	r1, r3, r1, r3
   8256a:	085b      	lsrs	r3, r3, #1
   8256c:	6013      	str	r3, [r2, #0]
   8256e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82570:	4b04      	ldr	r3, [pc, #16]	; (82584 <SystemCoreClockUpdate+0xfc>)
   82572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82574:	4905      	ldr	r1, [pc, #20]	; (8258c <SystemCoreClockUpdate+0x104>)
   82576:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8257a:	680b      	ldr	r3, [r1, #0]
   8257c:	40d3      	lsrs	r3, r2
   8257e:	600b      	str	r3, [r1, #0]
   82580:	4770      	bx	lr
   82582:	bf00      	nop
   82584:	400e0600 	.word	0x400e0600
   82588:	400e1a10 	.word	0x400e1a10
   8258c:	2007013c 	.word	0x2007013c
   82590:	00b71b00 	.word	0x00b71b00
   82594:	003d0900 	.word	0x003d0900
   82598:	007a1200 	.word	0x007a1200
   8259c:	0e4e1c00 	.word	0x0e4e1c00
   825a0:	aaaaaaab 	.word	0xaaaaaaab

000825a4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   825a4:	4b09      	ldr	r3, [pc, #36]	; (825cc <_sbrk+0x28>)
   825a6:	681b      	ldr	r3, [r3, #0]
   825a8:	b913      	cbnz	r3, 825b0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   825aa:	4a09      	ldr	r2, [pc, #36]	; (825d0 <_sbrk+0x2c>)
   825ac:	4b07      	ldr	r3, [pc, #28]	; (825cc <_sbrk+0x28>)
   825ae:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   825b0:	4b06      	ldr	r3, [pc, #24]	; (825cc <_sbrk+0x28>)
   825b2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   825b4:	181a      	adds	r2, r3, r0
   825b6:	4907      	ldr	r1, [pc, #28]	; (825d4 <_sbrk+0x30>)
   825b8:	4291      	cmp	r1, r2
   825ba:	db04      	blt.n	825c6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   825bc:	4610      	mov	r0, r2
   825be:	4a03      	ldr	r2, [pc, #12]	; (825cc <_sbrk+0x28>)
   825c0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   825c2:	4618      	mov	r0, r3
   825c4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   825c6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   825ca:	4770      	bx	lr
   825cc:	2007acac 	.word	0x2007acac
   825d0:	2007cfc8 	.word	0x2007cfc8
   825d4:	20087ffc 	.word	0x20087ffc

000825d8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   825d8:	f04f 30ff 	mov.w	r0, #4294967295
   825dc:	4770      	bx	lr
   825de:	bf00      	nop

000825e0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   825e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   825e4:	604b      	str	r3, [r1, #4]

	return 0;
}
   825e6:	2000      	movs	r0, #0
   825e8:	4770      	bx	lr
   825ea:	bf00      	nop

000825ec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   825ec:	2001      	movs	r0, #1
   825ee:	4770      	bx	lr

000825f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   825f0:	2000      	movs	r0, #0
   825f2:	4770      	bx	lr

000825f4 <main>:
uint16_t howoftenval;
char str[100] = {0};
float conv_arr[100] = {0.0};

int main (void)
{
   825f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   825f8:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   825fa:	4b48      	ldr	r3, [pc, #288]	; (8271c <main+0x128>)
   825fc:	4798      	blx	r3
	board_init();
   825fe:	4b48      	ldr	r3, [pc, #288]	; (82720 <main+0x12c>)
   82600:	4798      	blx	r3
   82602:	200b      	movs	r0, #11
   82604:	4c47      	ldr	r4, [pc, #284]	; (82724 <main+0x130>)
   82606:	47a0      	blx	r4
   82608:	200c      	movs	r0, #12
   8260a:	47a0      	blx	r4
   8260c:	200d      	movs	r0, #13
   8260e:	47a0      	blx	r4
   82610:	200e      	movs	r0, #14
   82612:	47a0      	blx	r4
	ioport_init();
	configure_console();
   82614:	4b44      	ldr	r3, [pc, #272]	; (82728 <main+0x134>)
   82616:	4798      	blx	r3
	motorshield_init();
   82618:	4b44      	ldr	r3, [pc, #272]	; (8272c <main+0x138>)
   8261a:	4798      	blx	r3
	adc_config();
   8261c:	4b44      	ldr	r3, [pc, #272]	; (82730 <main+0x13c>)
   8261e:	4798      	blx	r3
	pwm_config();
   82620:	4b44      	ldr	r3, [pc, #272]	; (82734 <main+0x140>)
   82622:	4798      	blx	r3
	param_init();
   82624:	4b44      	ldr	r3, [pc, #272]	; (82738 <main+0x144>)
   82626:	4798      	blx	r3
	
	//Testing purposesssss
	
	itoa(k_prop * 1000, str, 10);
   82628:	4e44      	ldr	r6, [pc, #272]	; (8273c <main+0x148>)
   8262a:	4b45      	ldr	r3, [pc, #276]	; (82740 <main+0x14c>)
   8262c:	6818      	ldr	r0, [r3, #0]
   8262e:	4945      	ldr	r1, [pc, #276]	; (82744 <main+0x150>)
   82630:	47b0      	blx	r6
   82632:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8277c <main+0x188>
   82636:	47c8      	blx	r9
   82638:	4d43      	ldr	r5, [pc, #268]	; (82748 <main+0x154>)
   8263a:	4629      	mov	r1, r5
   8263c:	220a      	movs	r2, #10
   8263e:	4f43      	ldr	r7, [pc, #268]	; (8274c <main+0x158>)
   82640:	47b8      	blx	r7
	printf(str);
   82642:	4628      	mov	r0, r5
   82644:	4c42      	ldr	r4, [pc, #264]	; (82750 <main+0x15c>)
   82646:	47a0      	blx	r4
	printf("\n");
   82648:	4842      	ldr	r0, [pc, #264]	; (82754 <main+0x160>)
   8264a:	47a0      	blx	r4
	itoa(k_int * 1000, str, 10);
   8264c:	4b42      	ldr	r3, [pc, #264]	; (82758 <main+0x164>)
   8264e:	6818      	ldr	r0, [r3, #0]
   82650:	493c      	ldr	r1, [pc, #240]	; (82744 <main+0x150>)
   82652:	47b0      	blx	r6
   82654:	47c8      	blx	r9
   82656:	4629      	mov	r1, r5
   82658:	220a      	movs	r2, #10
   8265a:	47b8      	blx	r7
	printf(str);
   8265c:	4628      	mov	r0, r5
   8265e:	47a0      	blx	r4
	printf("\n");
   82660:	483c      	ldr	r0, [pc, #240]	; (82754 <main+0x160>)
   82662:	47a0      	blx	r4
	itoa(k_deriv * 1000, str, 10);
   82664:	4b3d      	ldr	r3, [pc, #244]	; (8275c <main+0x168>)
   82666:	6818      	ldr	r0, [r3, #0]
   82668:	4936      	ldr	r1, [pc, #216]	; (82744 <main+0x150>)
   8266a:	47b0      	blx	r6
   8266c:	47c8      	blx	r9
   8266e:	4629      	mov	r1, r5
   82670:	220a      	movs	r2, #10
   82672:	47b8      	blx	r7
	printf(str);
   82674:	4628      	mov	r0, r5
   82676:	47a0      	blx	r4
	printf("\n");
   82678:	4836      	ldr	r0, [pc, #216]	; (82754 <main+0x160>)
   8267a:	47a0      	blx	r4
	itoa(shouldbeval * 1000, str, 10);
   8267c:	4b38      	ldr	r3, [pc, #224]	; (82760 <main+0x16c>)
   8267e:	8818      	ldrh	r0, [r3, #0]
   82680:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   82684:	fb06 f000 	mul.w	r0, r6, r0
   82688:	4629      	mov	r1, r5
   8268a:	220a      	movs	r2, #10
   8268c:	47b8      	blx	r7
	printf(str);
   8268e:	4628      	mov	r0, r5
   82690:	47a0      	blx	r4
	printf("\n");
   82692:	4830      	ldr	r0, [pc, #192]	; (82754 <main+0x160>)
   82694:	47a0      	blx	r4
	itoa(howoftenval * 1000, str, 10);
   82696:	4b33      	ldr	r3, [pc, #204]	; (82764 <main+0x170>)
   82698:	8818      	ldrh	r0, [r3, #0]
   8269a:	fb06 f000 	mul.w	r0, r6, r0
   8269e:	4629      	mov	r1, r5
   826a0:	220a      	movs	r2, #10
   826a2:	47b8      	blx	r7
	printf(str);
   826a4:	4628      	mov	r0, r5
   826a6:	47a0      	blx	r4
	printf("\n");
   826a8:	482a      	ldr	r0, [pc, #168]	; (82754 <main+0x160>)
   826aa:	47a0      	blx	r4
	itoa(conv_arr[47], str, 10);
   826ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 82780 <main+0x18c>
   826b0:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   826b4:	47c8      	blx	r9
   826b6:	4629      	mov	r1, r5
   826b8:	220a      	movs	r2, #10
   826ba:	47b8      	blx	r7
	printf(str);
   826bc:	4628      	mov	r0, r5
   826be:	47a0      	blx	r4
	printf("\n");
   826c0:	4824      	ldr	r0, [pc, #144]	; (82754 <main+0x160>)
   826c2:	47a0      	blx	r4
	
	//end of testttttt
	
	
	xTaskCreate(task_com, (const signed char * const) "Com", TASK_COM_STACKSIZE, NULL, 2, NULL);
   826c4:	f04f 0b02 	mov.w	fp, #2
   826c8:	f8cd b000 	str.w	fp, [sp]
   826cc:	2600      	movs	r6, #0
   826ce:	9601      	str	r6, [sp, #4]
   826d0:	9602      	str	r6, [sp, #8]
   826d2:	9603      	str	r6, [sp, #12]
   826d4:	4824      	ldr	r0, [pc, #144]	; (82768 <main+0x174>)
   826d6:	4925      	ldr	r1, [pc, #148]	; (8276c <main+0x178>)
   826d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   826dc:	4633      	mov	r3, r6
   826de:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 82784 <main+0x190>
   826e2:	47d0      	blx	sl
	xTaskCreate(task_reg, (const signed char * const) "Reg", TASK_COM_STACKSIZE, NULL, 2, NULL);
   826e4:	f8cd b000 	str.w	fp, [sp]
   826e8:	9601      	str	r6, [sp, #4]
   826ea:	9602      	str	r6, [sp, #8]
   826ec:	9603      	str	r6, [sp, #12]
   826ee:	4820      	ldr	r0, [pc, #128]	; (82770 <main+0x17c>)
   826f0:	4920      	ldr	r1, [pc, #128]	; (82774 <main+0x180>)
   826f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   826f6:	4633      	mov	r3, r6
   826f8:	47d0      	blx	sl
	vTaskStartScheduler();
   826fa:	4b1f      	ldr	r3, [pc, #124]	; (82778 <main+0x184>)
   826fc:	4798      	blx	r3
	
	itoa(conv_arr[47], str, 10);
   826fe:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   82702:	47c8      	blx	r9
   82704:	4629      	mov	r1, r5
   82706:	220a      	movs	r2, #10
   82708:	47b8      	blx	r7
	printf(str);
   8270a:	4628      	mov	r0, r5
   8270c:	47a0      	blx	r4
	printf("\n");
   8270e:	4811      	ldr	r0, [pc, #68]	; (82754 <main+0x160>)
   82710:	47a0      	blx	r4

	/* Insert application code here, after the board has been initialized. */
}
   82712:	4630      	mov	r0, r6
   82714:	b005      	add	sp, #20
   82716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8271a:	bf00      	nop
   8271c:	00081ef9 	.word	0x00081ef9
   82720:	00081f5d 	.word	0x00081f5d
   82724:	00082381 	.word	0x00082381
   82728:	00080581 	.word	0x00080581
   8272c:	00080251 	.word	0x00080251
   82730:	00080151 	.word	0x00080151
   82734:	00080281 	.word	0x00080281
   82738:	00080495 	.word	0x00080495
   8273c:	00082a45 	.word	0x00082a45
   82740:	2007afbc 	.word	0x2007afbc
   82744:	447a0000 	.word	0x447a0000
   82748:	2007acb0 	.word	0x2007acb0
   8274c:	00082e45 	.word	0x00082e45
   82750:	00082ded 	.word	0x00082ded
   82754:	00088ab0 	.word	0x00088ab0
   82758:	2007afb4 	.word	0x2007afb4
   8275c:	2007afb0 	.word	0x2007afb0
   82760:	2007afb8 	.word	0x2007afb8
   82764:	2007afac 	.word	0x2007afac
   82768:	00080315 	.word	0x00080315
   8276c:	00088af4 	.word	0x00088af4
   82770:	00080345 	.word	0x00080345
   82774:	00088af8 	.word	0x00088af8
   82778:	000810fd 	.word	0x000810fd
   8277c:	00082ce5 	.word	0x00082ce5
   82780:	2007ad14 	.word	0x2007ad14
   82784:	00080ef9 	.word	0x00080ef9

00082788 <__aeabi_d2f>:
   82788:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8278c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   82790:	bf24      	itt	cs
   82792:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   82796:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   8279a:	d90d      	bls.n	827b8 <__aeabi_d2f+0x30>
   8279c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   827a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   827a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   827a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   827ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   827b0:	bf08      	it	eq
   827b2:	f020 0001 	biceq.w	r0, r0, #1
   827b6:	4770      	bx	lr
   827b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   827bc:	d121      	bne.n	82802 <__aeabi_d2f+0x7a>
   827be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   827c2:	bfbc      	itt	lt
   827c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   827c8:	4770      	bxlt	lr
   827ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   827ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   827d2:	f1c2 0218 	rsb	r2, r2, #24
   827d6:	f1c2 0c20 	rsb	ip, r2, #32
   827da:	fa10 f30c 	lsls.w	r3, r0, ip
   827de:	fa20 f002 	lsr.w	r0, r0, r2
   827e2:	bf18      	it	ne
   827e4:	f040 0001 	orrne.w	r0, r0, #1
   827e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   827ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   827f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   827f4:	ea40 000c 	orr.w	r0, r0, ip
   827f8:	fa23 f302 	lsr.w	r3, r3, r2
   827fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   82800:	e7cc      	b.n	8279c <__aeabi_d2f+0x14>
   82802:	ea7f 5362 	mvns.w	r3, r2, asr #21
   82806:	d107      	bne.n	82818 <__aeabi_d2f+0x90>
   82808:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   8280c:	bf1e      	ittt	ne
   8280e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   82812:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   82816:	4770      	bxne	lr
   82818:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   8281c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82820:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82824:	4770      	bx	lr
   82826:	bf00      	nop

00082828 <__aeabi_frsub>:
   82828:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8282c:	e002      	b.n	82834 <__addsf3>
   8282e:	bf00      	nop

00082830 <__aeabi_fsub>:
   82830:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00082834 <__addsf3>:
   82834:	0042      	lsls	r2, r0, #1
   82836:	bf1f      	itttt	ne
   82838:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8283c:	ea92 0f03 	teqne	r2, r3
   82840:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   82844:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   82848:	d06a      	beq.n	82920 <__addsf3+0xec>
   8284a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8284e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   82852:	bfc1      	itttt	gt
   82854:	18d2      	addgt	r2, r2, r3
   82856:	4041      	eorgt	r1, r0
   82858:	4048      	eorgt	r0, r1
   8285a:	4041      	eorgt	r1, r0
   8285c:	bfb8      	it	lt
   8285e:	425b      	neglt	r3, r3
   82860:	2b19      	cmp	r3, #25
   82862:	bf88      	it	hi
   82864:	4770      	bxhi	lr
   82866:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8286a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8286e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   82872:	bf18      	it	ne
   82874:	4240      	negne	r0, r0
   82876:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8287a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8287e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   82882:	bf18      	it	ne
   82884:	4249      	negne	r1, r1
   82886:	ea92 0f03 	teq	r2, r3
   8288a:	d03f      	beq.n	8290c <__addsf3+0xd8>
   8288c:	f1a2 0201 	sub.w	r2, r2, #1
   82890:	fa41 fc03 	asr.w	ip, r1, r3
   82894:	eb10 000c 	adds.w	r0, r0, ip
   82898:	f1c3 0320 	rsb	r3, r3, #32
   8289c:	fa01 f103 	lsl.w	r1, r1, r3
   828a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   828a4:	d502      	bpl.n	828ac <__addsf3+0x78>
   828a6:	4249      	negs	r1, r1
   828a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   828ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   828b0:	d313      	bcc.n	828da <__addsf3+0xa6>
   828b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   828b6:	d306      	bcc.n	828c6 <__addsf3+0x92>
   828b8:	0840      	lsrs	r0, r0, #1
   828ba:	ea4f 0131 	mov.w	r1, r1, rrx
   828be:	f102 0201 	add.w	r2, r2, #1
   828c2:	2afe      	cmp	r2, #254	; 0xfe
   828c4:	d251      	bcs.n	8296a <__addsf3+0x136>
   828c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   828ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   828ce:	bf08      	it	eq
   828d0:	f020 0001 	biceq.w	r0, r0, #1
   828d4:	ea40 0003 	orr.w	r0, r0, r3
   828d8:	4770      	bx	lr
   828da:	0049      	lsls	r1, r1, #1
   828dc:	eb40 0000 	adc.w	r0, r0, r0
   828e0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   828e4:	f1a2 0201 	sub.w	r2, r2, #1
   828e8:	d1ed      	bne.n	828c6 <__addsf3+0x92>
   828ea:	fab0 fc80 	clz	ip, r0
   828ee:	f1ac 0c08 	sub.w	ip, ip, #8
   828f2:	ebb2 020c 	subs.w	r2, r2, ip
   828f6:	fa00 f00c 	lsl.w	r0, r0, ip
   828fa:	bfaa      	itet	ge
   828fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   82900:	4252      	neglt	r2, r2
   82902:	4318      	orrge	r0, r3
   82904:	bfbc      	itt	lt
   82906:	40d0      	lsrlt	r0, r2
   82908:	4318      	orrlt	r0, r3
   8290a:	4770      	bx	lr
   8290c:	f092 0f00 	teq	r2, #0
   82910:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   82914:	bf06      	itte	eq
   82916:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8291a:	3201      	addeq	r2, #1
   8291c:	3b01      	subne	r3, #1
   8291e:	e7b5      	b.n	8288c <__addsf3+0x58>
   82920:	ea4f 0341 	mov.w	r3, r1, lsl #1
   82924:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   82928:	bf18      	it	ne
   8292a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8292e:	d021      	beq.n	82974 <__addsf3+0x140>
   82930:	ea92 0f03 	teq	r2, r3
   82934:	d004      	beq.n	82940 <__addsf3+0x10c>
   82936:	f092 0f00 	teq	r2, #0
   8293a:	bf08      	it	eq
   8293c:	4608      	moveq	r0, r1
   8293e:	4770      	bx	lr
   82940:	ea90 0f01 	teq	r0, r1
   82944:	bf1c      	itt	ne
   82946:	2000      	movne	r0, #0
   82948:	4770      	bxne	lr
   8294a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8294e:	d104      	bne.n	8295a <__addsf3+0x126>
   82950:	0040      	lsls	r0, r0, #1
   82952:	bf28      	it	cs
   82954:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   82958:	4770      	bx	lr
   8295a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8295e:	bf3c      	itt	cc
   82960:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   82964:	4770      	bxcc	lr
   82966:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8296a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8296e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82972:	4770      	bx	lr
   82974:	ea7f 6222 	mvns.w	r2, r2, asr #24
   82978:	bf16      	itet	ne
   8297a:	4608      	movne	r0, r1
   8297c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   82980:	4601      	movne	r1, r0
   82982:	0242      	lsls	r2, r0, #9
   82984:	bf06      	itte	eq
   82986:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8298a:	ea90 0f01 	teqeq	r0, r1
   8298e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   82992:	4770      	bx	lr

00082994 <__aeabi_ui2f>:
   82994:	f04f 0300 	mov.w	r3, #0
   82998:	e004      	b.n	829a4 <__aeabi_i2f+0x8>
   8299a:	bf00      	nop

0008299c <__aeabi_i2f>:
   8299c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   829a0:	bf48      	it	mi
   829a2:	4240      	negmi	r0, r0
   829a4:	ea5f 0c00 	movs.w	ip, r0
   829a8:	bf08      	it	eq
   829aa:	4770      	bxeq	lr
   829ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   829b0:	4601      	mov	r1, r0
   829b2:	f04f 0000 	mov.w	r0, #0
   829b6:	e01c      	b.n	829f2 <__aeabi_l2f+0x2a>

000829b8 <__aeabi_ul2f>:
   829b8:	ea50 0201 	orrs.w	r2, r0, r1
   829bc:	bf08      	it	eq
   829be:	4770      	bxeq	lr
   829c0:	f04f 0300 	mov.w	r3, #0
   829c4:	e00a      	b.n	829dc <__aeabi_l2f+0x14>
   829c6:	bf00      	nop

000829c8 <__aeabi_l2f>:
   829c8:	ea50 0201 	orrs.w	r2, r0, r1
   829cc:	bf08      	it	eq
   829ce:	4770      	bxeq	lr
   829d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   829d4:	d502      	bpl.n	829dc <__aeabi_l2f+0x14>
   829d6:	4240      	negs	r0, r0
   829d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   829dc:	ea5f 0c01 	movs.w	ip, r1
   829e0:	bf02      	ittt	eq
   829e2:	4684      	moveq	ip, r0
   829e4:	4601      	moveq	r1, r0
   829e6:	2000      	moveq	r0, #0
   829e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   829ec:	bf08      	it	eq
   829ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   829f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   829f6:	fabc f28c 	clz	r2, ip
   829fa:	3a08      	subs	r2, #8
   829fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   82a00:	db10      	blt.n	82a24 <__aeabi_l2f+0x5c>
   82a02:	fa01 fc02 	lsl.w	ip, r1, r2
   82a06:	4463      	add	r3, ip
   82a08:	fa00 fc02 	lsl.w	ip, r0, r2
   82a0c:	f1c2 0220 	rsb	r2, r2, #32
   82a10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82a14:	fa20 f202 	lsr.w	r2, r0, r2
   82a18:	eb43 0002 	adc.w	r0, r3, r2
   82a1c:	bf08      	it	eq
   82a1e:	f020 0001 	biceq.w	r0, r0, #1
   82a22:	4770      	bx	lr
   82a24:	f102 0220 	add.w	r2, r2, #32
   82a28:	fa01 fc02 	lsl.w	ip, r1, r2
   82a2c:	f1c2 0220 	rsb	r2, r2, #32
   82a30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   82a34:	fa21 f202 	lsr.w	r2, r1, r2
   82a38:	eb43 0002 	adc.w	r0, r3, r2
   82a3c:	bf08      	it	eq
   82a3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   82a42:	4770      	bx	lr

00082a44 <__aeabi_fmul>:
   82a44:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82a48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82a4c:	bf1e      	ittt	ne
   82a4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   82a52:	ea92 0f0c 	teqne	r2, ip
   82a56:	ea93 0f0c 	teqne	r3, ip
   82a5a:	d06f      	beq.n	82b3c <__aeabi_fmul+0xf8>
   82a5c:	441a      	add	r2, r3
   82a5e:	ea80 0c01 	eor.w	ip, r0, r1
   82a62:	0240      	lsls	r0, r0, #9
   82a64:	bf18      	it	ne
   82a66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   82a6a:	d01e      	beq.n	82aaa <__aeabi_fmul+0x66>
   82a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   82a70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   82a74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   82a78:	fba0 3101 	umull	r3, r1, r0, r1
   82a7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   82a80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   82a84:	bf3e      	ittt	cc
   82a86:	0049      	lslcc	r1, r1, #1
   82a88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   82a8c:	005b      	lslcc	r3, r3, #1
   82a8e:	ea40 0001 	orr.w	r0, r0, r1
   82a92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   82a96:	2afd      	cmp	r2, #253	; 0xfd
   82a98:	d81d      	bhi.n	82ad6 <__aeabi_fmul+0x92>
   82a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   82a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82aa2:	bf08      	it	eq
   82aa4:	f020 0001 	biceq.w	r0, r0, #1
   82aa8:	4770      	bx	lr
   82aaa:	f090 0f00 	teq	r0, #0
   82aae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82ab2:	bf08      	it	eq
   82ab4:	0249      	lsleq	r1, r1, #9
   82ab6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82aba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   82abe:	3a7f      	subs	r2, #127	; 0x7f
   82ac0:	bfc2      	ittt	gt
   82ac2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82ac6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82aca:	4770      	bxgt	lr
   82acc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82ad0:	f04f 0300 	mov.w	r3, #0
   82ad4:	3a01      	subs	r2, #1
   82ad6:	dc5d      	bgt.n	82b94 <__aeabi_fmul+0x150>
   82ad8:	f112 0f19 	cmn.w	r2, #25
   82adc:	bfdc      	itt	le
   82ade:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   82ae2:	4770      	bxle	lr
   82ae4:	f1c2 0200 	rsb	r2, r2, #0
   82ae8:	0041      	lsls	r1, r0, #1
   82aea:	fa21 f102 	lsr.w	r1, r1, r2
   82aee:	f1c2 0220 	rsb	r2, r2, #32
   82af2:	fa00 fc02 	lsl.w	ip, r0, r2
   82af6:	ea5f 0031 	movs.w	r0, r1, rrx
   82afa:	f140 0000 	adc.w	r0, r0, #0
   82afe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   82b02:	bf08      	it	eq
   82b04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   82b08:	4770      	bx	lr
   82b0a:	f092 0f00 	teq	r2, #0
   82b0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   82b12:	bf02      	ittt	eq
   82b14:	0040      	lsleq	r0, r0, #1
   82b16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82b1a:	3a01      	subeq	r2, #1
   82b1c:	d0f9      	beq.n	82b12 <__aeabi_fmul+0xce>
   82b1e:	ea40 000c 	orr.w	r0, r0, ip
   82b22:	f093 0f00 	teq	r3, #0
   82b26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82b2a:	bf02      	ittt	eq
   82b2c:	0049      	lsleq	r1, r1, #1
   82b2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   82b32:	3b01      	subeq	r3, #1
   82b34:	d0f9      	beq.n	82b2a <__aeabi_fmul+0xe6>
   82b36:	ea41 010c 	orr.w	r1, r1, ip
   82b3a:	e78f      	b.n	82a5c <__aeabi_fmul+0x18>
   82b3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   82b40:	ea92 0f0c 	teq	r2, ip
   82b44:	bf18      	it	ne
   82b46:	ea93 0f0c 	teqne	r3, ip
   82b4a:	d00a      	beq.n	82b62 <__aeabi_fmul+0x11e>
   82b4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   82b50:	bf18      	it	ne
   82b52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82b56:	d1d8      	bne.n	82b0a <__aeabi_fmul+0xc6>
   82b58:	ea80 0001 	eor.w	r0, r0, r1
   82b5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   82b60:	4770      	bx	lr
   82b62:	f090 0f00 	teq	r0, #0
   82b66:	bf17      	itett	ne
   82b68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   82b6c:	4608      	moveq	r0, r1
   82b6e:	f091 0f00 	teqne	r1, #0
   82b72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   82b76:	d014      	beq.n	82ba2 <__aeabi_fmul+0x15e>
   82b78:	ea92 0f0c 	teq	r2, ip
   82b7c:	d101      	bne.n	82b82 <__aeabi_fmul+0x13e>
   82b7e:	0242      	lsls	r2, r0, #9
   82b80:	d10f      	bne.n	82ba2 <__aeabi_fmul+0x15e>
   82b82:	ea93 0f0c 	teq	r3, ip
   82b86:	d103      	bne.n	82b90 <__aeabi_fmul+0x14c>
   82b88:	024b      	lsls	r3, r1, #9
   82b8a:	bf18      	it	ne
   82b8c:	4608      	movne	r0, r1
   82b8e:	d108      	bne.n	82ba2 <__aeabi_fmul+0x15e>
   82b90:	ea80 0001 	eor.w	r0, r0, r1
   82b94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   82b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82ba0:	4770      	bx	lr
   82ba2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   82ba6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   82baa:	4770      	bx	lr

00082bac <__aeabi_fdiv>:
   82bac:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82bb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   82bb4:	bf1e      	ittt	ne
   82bb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   82bba:	ea92 0f0c 	teqne	r2, ip
   82bbe:	ea93 0f0c 	teqne	r3, ip
   82bc2:	d069      	beq.n	82c98 <__aeabi_fdiv+0xec>
   82bc4:	eba2 0203 	sub.w	r2, r2, r3
   82bc8:	ea80 0c01 	eor.w	ip, r0, r1
   82bcc:	0249      	lsls	r1, r1, #9
   82bce:	ea4f 2040 	mov.w	r0, r0, lsl #9
   82bd2:	d037      	beq.n	82c44 <__aeabi_fdiv+0x98>
   82bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   82bd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   82bdc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   82be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   82be4:	428b      	cmp	r3, r1
   82be6:	bf38      	it	cc
   82be8:	005b      	lslcc	r3, r3, #1
   82bea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   82bee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   82bf2:	428b      	cmp	r3, r1
   82bf4:	bf24      	itt	cs
   82bf6:	1a5b      	subcs	r3, r3, r1
   82bf8:	ea40 000c 	orrcs.w	r0, r0, ip
   82bfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   82c00:	bf24      	itt	cs
   82c02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   82c06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82c0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   82c0e:	bf24      	itt	cs
   82c10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   82c14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82c18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   82c1c:	bf24      	itt	cs
   82c1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   82c22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   82c26:	011b      	lsls	r3, r3, #4
   82c28:	bf18      	it	ne
   82c2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   82c2e:	d1e0      	bne.n	82bf2 <__aeabi_fdiv+0x46>
   82c30:	2afd      	cmp	r2, #253	; 0xfd
   82c32:	f63f af50 	bhi.w	82ad6 <__aeabi_fmul+0x92>
   82c36:	428b      	cmp	r3, r1
   82c38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   82c3c:	bf08      	it	eq
   82c3e:	f020 0001 	biceq.w	r0, r0, #1
   82c42:	4770      	bx	lr
   82c44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   82c48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   82c4c:	327f      	adds	r2, #127	; 0x7f
   82c4e:	bfc2      	ittt	gt
   82c50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   82c54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   82c58:	4770      	bxgt	lr
   82c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   82c5e:	f04f 0300 	mov.w	r3, #0
   82c62:	3a01      	subs	r2, #1
   82c64:	e737      	b.n	82ad6 <__aeabi_fmul+0x92>
   82c66:	f092 0f00 	teq	r2, #0
   82c6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   82c6e:	bf02      	ittt	eq
   82c70:	0040      	lsleq	r0, r0, #1
   82c72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   82c76:	3a01      	subeq	r2, #1
   82c78:	d0f9      	beq.n	82c6e <__aeabi_fdiv+0xc2>
   82c7a:	ea40 000c 	orr.w	r0, r0, ip
   82c7e:	f093 0f00 	teq	r3, #0
   82c82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   82c86:	bf02      	ittt	eq
   82c88:	0049      	lsleq	r1, r1, #1
   82c8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   82c8e:	3b01      	subeq	r3, #1
   82c90:	d0f9      	beq.n	82c86 <__aeabi_fdiv+0xda>
   82c92:	ea41 010c 	orr.w	r1, r1, ip
   82c96:	e795      	b.n	82bc4 <__aeabi_fdiv+0x18>
   82c98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   82c9c:	ea92 0f0c 	teq	r2, ip
   82ca0:	d108      	bne.n	82cb4 <__aeabi_fdiv+0x108>
   82ca2:	0242      	lsls	r2, r0, #9
   82ca4:	f47f af7d 	bne.w	82ba2 <__aeabi_fmul+0x15e>
   82ca8:	ea93 0f0c 	teq	r3, ip
   82cac:	f47f af70 	bne.w	82b90 <__aeabi_fmul+0x14c>
   82cb0:	4608      	mov	r0, r1
   82cb2:	e776      	b.n	82ba2 <__aeabi_fmul+0x15e>
   82cb4:	ea93 0f0c 	teq	r3, ip
   82cb8:	d104      	bne.n	82cc4 <__aeabi_fdiv+0x118>
   82cba:	024b      	lsls	r3, r1, #9
   82cbc:	f43f af4c 	beq.w	82b58 <__aeabi_fmul+0x114>
   82cc0:	4608      	mov	r0, r1
   82cc2:	e76e      	b.n	82ba2 <__aeabi_fmul+0x15e>
   82cc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   82cc8:	bf18      	it	ne
   82cca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   82cce:	d1ca      	bne.n	82c66 <__aeabi_fdiv+0xba>
   82cd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   82cd4:	f47f af5c 	bne.w	82b90 <__aeabi_fmul+0x14c>
   82cd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   82cdc:	f47f af3c 	bne.w	82b58 <__aeabi_fmul+0x114>
   82ce0:	e75f      	b.n	82ba2 <__aeabi_fmul+0x15e>
   82ce2:	bf00      	nop

00082ce4 <__aeabi_f2iz>:
   82ce4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   82ce8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   82cec:	d30f      	bcc.n	82d0e <__aeabi_f2iz+0x2a>
   82cee:	f04f 039e 	mov.w	r3, #158	; 0x9e
   82cf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   82cf6:	d90d      	bls.n	82d14 <__aeabi_f2iz+0x30>
   82cf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   82cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   82d00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   82d04:	fa23 f002 	lsr.w	r0, r3, r2
   82d08:	bf18      	it	ne
   82d0a:	4240      	negne	r0, r0
   82d0c:	4770      	bx	lr
   82d0e:	f04f 0000 	mov.w	r0, #0
   82d12:	4770      	bx	lr
   82d14:	f112 0f61 	cmn.w	r2, #97	; 0x61
   82d18:	d101      	bne.n	82d1e <__aeabi_f2iz+0x3a>
   82d1a:	0242      	lsls	r2, r0, #9
   82d1c:	d105      	bne.n	82d2a <__aeabi_f2iz+0x46>
   82d1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   82d22:	bf08      	it	eq
   82d24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   82d28:	4770      	bx	lr
   82d2a:	f04f 0000 	mov.w	r0, #0
   82d2e:	4770      	bx	lr

00082d30 <atof>:
   82d30:	2100      	movs	r1, #0
   82d32:	f001 ba51 	b.w	841d8 <strtod>
   82d36:	bf00      	nop

00082d38 <atoi>:
   82d38:	2100      	movs	r1, #0
   82d3a:	220a      	movs	r2, #10
   82d3c:	f001 bae2 	b.w	84304 <strtol>

00082d40 <_gets_r>:
   82d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d42:	460f      	mov	r7, r1
   82d44:	4605      	mov	r5, r0
   82d46:	460c      	mov	r4, r1
   82d48:	4e0f      	ldr	r6, [pc, #60]	; (82d88 <_gets_r+0x48>)
   82d4a:	e007      	b.n	82d5c <_gets_r+0x1c>
   82d4c:	680b      	ldr	r3, [r1, #0]
   82d4e:	1c5a      	adds	r2, r3, #1
   82d50:	600a      	str	r2, [r1, #0]
   82d52:	7818      	ldrb	r0, [r3, #0]
   82d54:	280a      	cmp	r0, #10
   82d56:	d011      	beq.n	82d7c <_gets_r+0x3c>
   82d58:	f804 0b01 	strb.w	r0, [r4], #1
   82d5c:	6833      	ldr	r3, [r6, #0]
   82d5e:	6859      	ldr	r1, [r3, #4]
   82d60:	684b      	ldr	r3, [r1, #4]
   82d62:	3b01      	subs	r3, #1
   82d64:	2b00      	cmp	r3, #0
   82d66:	604b      	str	r3, [r1, #4]
   82d68:	daf0      	bge.n	82d4c <_gets_r+0xc>
   82d6a:	4628      	mov	r0, r5
   82d6c:	f000 f930 	bl	82fd0 <__srget_r>
   82d70:	280a      	cmp	r0, #10
   82d72:	d003      	beq.n	82d7c <_gets_r+0x3c>
   82d74:	1c43      	adds	r3, r0, #1
   82d76:	d1ef      	bne.n	82d58 <_gets_r+0x18>
   82d78:	42a7      	cmp	r7, r4
   82d7a:	d003      	beq.n	82d84 <_gets_r+0x44>
   82d7c:	2300      	movs	r3, #0
   82d7e:	7023      	strb	r3, [r4, #0]
   82d80:	4638      	mov	r0, r7
   82d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d84:	2000      	movs	r0, #0
   82d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d88:	20070568 	.word	0x20070568

00082d8c <gets>:
   82d8c:	4b02      	ldr	r3, [pc, #8]	; (82d98 <gets+0xc>)
   82d8e:	4601      	mov	r1, r0
   82d90:	6818      	ldr	r0, [r3, #0]
   82d92:	f7ff bfd5 	b.w	82d40 <_gets_r>
   82d96:	bf00      	nop
   82d98:	20070568 	.word	0x20070568

00082d9c <__libc_init_array>:
   82d9c:	b570      	push	{r4, r5, r6, lr}
   82d9e:	4e0f      	ldr	r6, [pc, #60]	; (82ddc <__libc_init_array+0x40>)
   82da0:	4d0f      	ldr	r5, [pc, #60]	; (82de0 <__libc_init_array+0x44>)
   82da2:	1b76      	subs	r6, r6, r5
   82da4:	10b6      	asrs	r6, r6, #2
   82da6:	bf18      	it	ne
   82da8:	2400      	movne	r4, #0
   82daa:	d005      	beq.n	82db8 <__libc_init_array+0x1c>
   82dac:	3401      	adds	r4, #1
   82dae:	f855 3b04 	ldr.w	r3, [r5], #4
   82db2:	4798      	blx	r3
   82db4:	42a6      	cmp	r6, r4
   82db6:	d1f9      	bne.n	82dac <__libc_init_array+0x10>
   82db8:	4e0a      	ldr	r6, [pc, #40]	; (82de4 <__libc_init_array+0x48>)
   82dba:	4d0b      	ldr	r5, [pc, #44]	; (82de8 <__libc_init_array+0x4c>)
   82dbc:	f006 f898 	bl	88ef0 <_init>
   82dc0:	1b76      	subs	r6, r6, r5
   82dc2:	10b6      	asrs	r6, r6, #2
   82dc4:	bf18      	it	ne
   82dc6:	2400      	movne	r4, #0
   82dc8:	d006      	beq.n	82dd8 <__libc_init_array+0x3c>
   82dca:	3401      	adds	r4, #1
   82dcc:	f855 3b04 	ldr.w	r3, [r5], #4
   82dd0:	4798      	blx	r3
   82dd2:	42a6      	cmp	r6, r4
   82dd4:	d1f9      	bne.n	82dca <__libc_init_array+0x2e>
   82dd6:	bd70      	pop	{r4, r5, r6, pc}
   82dd8:	bd70      	pop	{r4, r5, r6, pc}
   82dda:	bf00      	nop
   82ddc:	00088efc 	.word	0x00088efc
   82de0:	00088efc 	.word	0x00088efc
   82de4:	00088f04 	.word	0x00088f04
   82de8:	00088efc 	.word	0x00088efc

00082dec <iprintf>:
   82dec:	b40f      	push	{r0, r1, r2, r3}
   82dee:	b510      	push	{r4, lr}
   82df0:	4b07      	ldr	r3, [pc, #28]	; (82e10 <iprintf+0x24>)
   82df2:	b082      	sub	sp, #8
   82df4:	ac04      	add	r4, sp, #16
   82df6:	f854 2b04 	ldr.w	r2, [r4], #4
   82dfa:	6818      	ldr	r0, [r3, #0]
   82dfc:	4623      	mov	r3, r4
   82dfe:	6881      	ldr	r1, [r0, #8]
   82e00:	9401      	str	r4, [sp, #4]
   82e02:	f001 fb07 	bl	84414 <_vfiprintf_r>
   82e06:	b002      	add	sp, #8
   82e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82e0c:	b004      	add	sp, #16
   82e0e:	4770      	bx	lr
   82e10:	20070568 	.word	0x20070568

00082e14 <__itoa>:
   82e14:	1e93      	subs	r3, r2, #2
   82e16:	2b22      	cmp	r3, #34	; 0x22
   82e18:	d810      	bhi.n	82e3c <__itoa+0x28>
   82e1a:	2a0a      	cmp	r2, #10
   82e1c:	b510      	push	{r4, lr}
   82e1e:	d006      	beq.n	82e2e <__itoa+0x1a>
   82e20:	2300      	movs	r3, #0
   82e22:	460c      	mov	r4, r1
   82e24:	4419      	add	r1, r3
   82e26:	f001 fa79 	bl	8431c <__utoa>
   82e2a:	4620      	mov	r0, r4
   82e2c:	bd10      	pop	{r4, pc}
   82e2e:	2800      	cmp	r0, #0
   82e30:	daf6      	bge.n	82e20 <__itoa+0xc>
   82e32:	232d      	movs	r3, #45	; 0x2d
   82e34:	700b      	strb	r3, [r1, #0]
   82e36:	4240      	negs	r0, r0
   82e38:	2301      	movs	r3, #1
   82e3a:	e7f2      	b.n	82e22 <__itoa+0xe>
   82e3c:	2000      	movs	r0, #0
   82e3e:	7008      	strb	r0, [r1, #0]
   82e40:	4770      	bx	lr
   82e42:	bf00      	nop

00082e44 <itoa>:
   82e44:	f7ff bfe6 	b.w	82e14 <__itoa>

00082e48 <memcpy>:
   82e48:	4684      	mov	ip, r0
   82e4a:	ea41 0300 	orr.w	r3, r1, r0
   82e4e:	f013 0303 	ands.w	r3, r3, #3
   82e52:	d149      	bne.n	82ee8 <memcpy+0xa0>
   82e54:	3a40      	subs	r2, #64	; 0x40
   82e56:	d323      	bcc.n	82ea0 <memcpy+0x58>
   82e58:	680b      	ldr	r3, [r1, #0]
   82e5a:	6003      	str	r3, [r0, #0]
   82e5c:	684b      	ldr	r3, [r1, #4]
   82e5e:	6043      	str	r3, [r0, #4]
   82e60:	688b      	ldr	r3, [r1, #8]
   82e62:	6083      	str	r3, [r0, #8]
   82e64:	68cb      	ldr	r3, [r1, #12]
   82e66:	60c3      	str	r3, [r0, #12]
   82e68:	690b      	ldr	r3, [r1, #16]
   82e6a:	6103      	str	r3, [r0, #16]
   82e6c:	694b      	ldr	r3, [r1, #20]
   82e6e:	6143      	str	r3, [r0, #20]
   82e70:	698b      	ldr	r3, [r1, #24]
   82e72:	6183      	str	r3, [r0, #24]
   82e74:	69cb      	ldr	r3, [r1, #28]
   82e76:	61c3      	str	r3, [r0, #28]
   82e78:	6a0b      	ldr	r3, [r1, #32]
   82e7a:	6203      	str	r3, [r0, #32]
   82e7c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82e7e:	6243      	str	r3, [r0, #36]	; 0x24
   82e80:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82e82:	6283      	str	r3, [r0, #40]	; 0x28
   82e84:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82e86:	62c3      	str	r3, [r0, #44]	; 0x2c
   82e88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82e8a:	6303      	str	r3, [r0, #48]	; 0x30
   82e8c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82e8e:	6343      	str	r3, [r0, #52]	; 0x34
   82e90:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82e92:	6383      	str	r3, [r0, #56]	; 0x38
   82e94:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82e96:	63c3      	str	r3, [r0, #60]	; 0x3c
   82e98:	3040      	adds	r0, #64	; 0x40
   82e9a:	3140      	adds	r1, #64	; 0x40
   82e9c:	3a40      	subs	r2, #64	; 0x40
   82e9e:	d2db      	bcs.n	82e58 <memcpy+0x10>
   82ea0:	3230      	adds	r2, #48	; 0x30
   82ea2:	d30b      	bcc.n	82ebc <memcpy+0x74>
   82ea4:	680b      	ldr	r3, [r1, #0]
   82ea6:	6003      	str	r3, [r0, #0]
   82ea8:	684b      	ldr	r3, [r1, #4]
   82eaa:	6043      	str	r3, [r0, #4]
   82eac:	688b      	ldr	r3, [r1, #8]
   82eae:	6083      	str	r3, [r0, #8]
   82eb0:	68cb      	ldr	r3, [r1, #12]
   82eb2:	60c3      	str	r3, [r0, #12]
   82eb4:	3010      	adds	r0, #16
   82eb6:	3110      	adds	r1, #16
   82eb8:	3a10      	subs	r2, #16
   82eba:	d2f3      	bcs.n	82ea4 <memcpy+0x5c>
   82ebc:	320c      	adds	r2, #12
   82ebe:	d305      	bcc.n	82ecc <memcpy+0x84>
   82ec0:	f851 3b04 	ldr.w	r3, [r1], #4
   82ec4:	f840 3b04 	str.w	r3, [r0], #4
   82ec8:	3a04      	subs	r2, #4
   82eca:	d2f9      	bcs.n	82ec0 <memcpy+0x78>
   82ecc:	3204      	adds	r2, #4
   82ece:	d008      	beq.n	82ee2 <memcpy+0x9a>
   82ed0:	07d2      	lsls	r2, r2, #31
   82ed2:	bf1c      	itt	ne
   82ed4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ed8:	f800 3b01 	strbne.w	r3, [r0], #1
   82edc:	d301      	bcc.n	82ee2 <memcpy+0x9a>
   82ede:	880b      	ldrh	r3, [r1, #0]
   82ee0:	8003      	strh	r3, [r0, #0]
   82ee2:	4660      	mov	r0, ip
   82ee4:	4770      	bx	lr
   82ee6:	bf00      	nop
   82ee8:	2a08      	cmp	r2, #8
   82eea:	d313      	bcc.n	82f14 <memcpy+0xcc>
   82eec:	078b      	lsls	r3, r1, #30
   82eee:	d0b1      	beq.n	82e54 <memcpy+0xc>
   82ef0:	f010 0303 	ands.w	r3, r0, #3
   82ef4:	d0ae      	beq.n	82e54 <memcpy+0xc>
   82ef6:	f1c3 0304 	rsb	r3, r3, #4
   82efa:	1ad2      	subs	r2, r2, r3
   82efc:	07db      	lsls	r3, r3, #31
   82efe:	bf1c      	itt	ne
   82f00:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82f04:	f800 3b01 	strbne.w	r3, [r0], #1
   82f08:	d3a4      	bcc.n	82e54 <memcpy+0xc>
   82f0a:	f831 3b02 	ldrh.w	r3, [r1], #2
   82f0e:	f820 3b02 	strh.w	r3, [r0], #2
   82f12:	e79f      	b.n	82e54 <memcpy+0xc>
   82f14:	3a04      	subs	r2, #4
   82f16:	d3d9      	bcc.n	82ecc <memcpy+0x84>
   82f18:	3a01      	subs	r2, #1
   82f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
   82f1e:	f800 3b01 	strb.w	r3, [r0], #1
   82f22:	d2f9      	bcs.n	82f18 <memcpy+0xd0>
   82f24:	780b      	ldrb	r3, [r1, #0]
   82f26:	7003      	strb	r3, [r0, #0]
   82f28:	784b      	ldrb	r3, [r1, #1]
   82f2a:	7043      	strb	r3, [r0, #1]
   82f2c:	788b      	ldrb	r3, [r1, #2]
   82f2e:	7083      	strb	r3, [r0, #2]
   82f30:	4660      	mov	r0, ip
   82f32:	4770      	bx	lr

00082f34 <memset>:
   82f34:	b470      	push	{r4, r5, r6}
   82f36:	0784      	lsls	r4, r0, #30
   82f38:	d046      	beq.n	82fc8 <memset+0x94>
   82f3a:	1e54      	subs	r4, r2, #1
   82f3c:	2a00      	cmp	r2, #0
   82f3e:	d041      	beq.n	82fc4 <memset+0x90>
   82f40:	b2cd      	uxtb	r5, r1
   82f42:	4603      	mov	r3, r0
   82f44:	e002      	b.n	82f4c <memset+0x18>
   82f46:	1e62      	subs	r2, r4, #1
   82f48:	b3e4      	cbz	r4, 82fc4 <memset+0x90>
   82f4a:	4614      	mov	r4, r2
   82f4c:	f803 5b01 	strb.w	r5, [r3], #1
   82f50:	079a      	lsls	r2, r3, #30
   82f52:	d1f8      	bne.n	82f46 <memset+0x12>
   82f54:	2c03      	cmp	r4, #3
   82f56:	d92e      	bls.n	82fb6 <memset+0x82>
   82f58:	b2cd      	uxtb	r5, r1
   82f5a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82f5e:	2c0f      	cmp	r4, #15
   82f60:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82f64:	d919      	bls.n	82f9a <memset+0x66>
   82f66:	4626      	mov	r6, r4
   82f68:	f103 0210 	add.w	r2, r3, #16
   82f6c:	3e10      	subs	r6, #16
   82f6e:	2e0f      	cmp	r6, #15
   82f70:	f842 5c10 	str.w	r5, [r2, #-16]
   82f74:	f842 5c0c 	str.w	r5, [r2, #-12]
   82f78:	f842 5c08 	str.w	r5, [r2, #-8]
   82f7c:	f842 5c04 	str.w	r5, [r2, #-4]
   82f80:	f102 0210 	add.w	r2, r2, #16
   82f84:	d8f2      	bhi.n	82f6c <memset+0x38>
   82f86:	f1a4 0210 	sub.w	r2, r4, #16
   82f8a:	f022 020f 	bic.w	r2, r2, #15
   82f8e:	f004 040f 	and.w	r4, r4, #15
   82f92:	3210      	adds	r2, #16
   82f94:	2c03      	cmp	r4, #3
   82f96:	4413      	add	r3, r2
   82f98:	d90d      	bls.n	82fb6 <memset+0x82>
   82f9a:	461e      	mov	r6, r3
   82f9c:	4622      	mov	r2, r4
   82f9e:	3a04      	subs	r2, #4
   82fa0:	2a03      	cmp	r2, #3
   82fa2:	f846 5b04 	str.w	r5, [r6], #4
   82fa6:	d8fa      	bhi.n	82f9e <memset+0x6a>
   82fa8:	1f22      	subs	r2, r4, #4
   82faa:	f022 0203 	bic.w	r2, r2, #3
   82fae:	3204      	adds	r2, #4
   82fb0:	4413      	add	r3, r2
   82fb2:	f004 0403 	and.w	r4, r4, #3
   82fb6:	b12c      	cbz	r4, 82fc4 <memset+0x90>
   82fb8:	b2c9      	uxtb	r1, r1
   82fba:	441c      	add	r4, r3
   82fbc:	f803 1b01 	strb.w	r1, [r3], #1
   82fc0:	42a3      	cmp	r3, r4
   82fc2:	d1fb      	bne.n	82fbc <memset+0x88>
   82fc4:	bc70      	pop	{r4, r5, r6}
   82fc6:	4770      	bx	lr
   82fc8:	4614      	mov	r4, r2
   82fca:	4603      	mov	r3, r0
   82fcc:	e7c2      	b.n	82f54 <memset+0x20>
   82fce:	bf00      	nop

00082fd0 <__srget_r>:
   82fd0:	b538      	push	{r3, r4, r5, lr}
   82fd2:	460c      	mov	r4, r1
   82fd4:	4605      	mov	r5, r0
   82fd6:	b108      	cbz	r0, 82fdc <__srget_r+0xc>
   82fd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82fda:	b163      	cbz	r3, 82ff6 <__srget_r+0x26>
   82fdc:	4628      	mov	r0, r5
   82fde:	4621      	mov	r1, r4
   82fe0:	f004 fb4c 	bl	8767c <__srefill_r>
   82fe4:	b950      	cbnz	r0, 82ffc <__srget_r+0x2c>
   82fe6:	e894 000c 	ldmia.w	r4, {r2, r3}
   82fea:	3b01      	subs	r3, #1
   82fec:	1c51      	adds	r1, r2, #1
   82fee:	e884 000a 	stmia.w	r4, {r1, r3}
   82ff2:	7810      	ldrb	r0, [r2, #0]
   82ff4:	bd38      	pop	{r3, r4, r5, pc}
   82ff6:	f002 fa0f 	bl	85418 <__sinit>
   82ffa:	e7ef      	b.n	82fdc <__srget_r+0xc>
   82ffc:	f04f 30ff 	mov.w	r0, #4294967295
   83000:	bd38      	pop	{r3, r4, r5, pc}
   83002:	bf00      	nop

00083004 <setbuf>:
   83004:	2900      	cmp	r1, #0
   83006:	bf0c      	ite	eq
   83008:	2202      	moveq	r2, #2
   8300a:	2200      	movne	r2, #0
   8300c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83010:	f000 b800 	b.w	83014 <setvbuf>

00083014 <setvbuf>:
   83014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83018:	4d3a      	ldr	r5, [pc, #232]	; (83104 <setvbuf+0xf0>)
   8301a:	4604      	mov	r4, r0
   8301c:	682e      	ldr	r6, [r5, #0]
   8301e:	4690      	mov	r8, r2
   83020:	460d      	mov	r5, r1
   83022:	461f      	mov	r7, r3
   83024:	b116      	cbz	r6, 8302c <setvbuf+0x18>
   83026:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   83028:	2b00      	cmp	r3, #0
   8302a:	d03c      	beq.n	830a6 <setvbuf+0x92>
   8302c:	f1b8 0f02 	cmp.w	r8, #2
   83030:	d82f      	bhi.n	83092 <setvbuf+0x7e>
   83032:	2f00      	cmp	r7, #0
   83034:	db2d      	blt.n	83092 <setvbuf+0x7e>
   83036:	4621      	mov	r1, r4
   83038:	4630      	mov	r0, r6
   8303a:	f002 f947 	bl	852cc <_fflush_r>
   8303e:	89a1      	ldrh	r1, [r4, #12]
   83040:	2300      	movs	r3, #0
   83042:	6063      	str	r3, [r4, #4]
   83044:	61a3      	str	r3, [r4, #24]
   83046:	060b      	lsls	r3, r1, #24
   83048:	d427      	bmi.n	8309a <setvbuf+0x86>
   8304a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   8304e:	b289      	uxth	r1, r1
   83050:	f1b8 0f02 	cmp.w	r8, #2
   83054:	81a1      	strh	r1, [r4, #12]
   83056:	d02a      	beq.n	830ae <setvbuf+0x9a>
   83058:	2d00      	cmp	r5, #0
   8305a:	d036      	beq.n	830ca <setvbuf+0xb6>
   8305c:	f1b8 0f01 	cmp.w	r8, #1
   83060:	d011      	beq.n	83086 <setvbuf+0x72>
   83062:	b289      	uxth	r1, r1
   83064:	f001 0008 	and.w	r0, r1, #8
   83068:	4b27      	ldr	r3, [pc, #156]	; (83108 <setvbuf+0xf4>)
   8306a:	b280      	uxth	r0, r0
   8306c:	63f3      	str	r3, [r6, #60]	; 0x3c
   8306e:	6025      	str	r5, [r4, #0]
   83070:	6125      	str	r5, [r4, #16]
   83072:	6167      	str	r7, [r4, #20]
   83074:	b178      	cbz	r0, 83096 <setvbuf+0x82>
   83076:	f011 0f03 	tst.w	r1, #3
   8307a:	bf18      	it	ne
   8307c:	2700      	movne	r7, #0
   8307e:	2000      	movs	r0, #0
   83080:	60a7      	str	r7, [r4, #8]
   83082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83086:	f041 0101 	orr.w	r1, r1, #1
   8308a:	427b      	negs	r3, r7
   8308c:	81a1      	strh	r1, [r4, #12]
   8308e:	61a3      	str	r3, [r4, #24]
   83090:	e7e7      	b.n	83062 <setvbuf+0x4e>
   83092:	f04f 30ff 	mov.w	r0, #4294967295
   83096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8309a:	6921      	ldr	r1, [r4, #16]
   8309c:	4630      	mov	r0, r6
   8309e:	f002 fa93 	bl	855c8 <_free_r>
   830a2:	89a1      	ldrh	r1, [r4, #12]
   830a4:	e7d1      	b.n	8304a <setvbuf+0x36>
   830a6:	4630      	mov	r0, r6
   830a8:	f002 f9b6 	bl	85418 <__sinit>
   830ac:	e7be      	b.n	8302c <setvbuf+0x18>
   830ae:	2000      	movs	r0, #0
   830b0:	f104 0343 	add.w	r3, r4, #67	; 0x43
   830b4:	f041 0102 	orr.w	r1, r1, #2
   830b8:	2500      	movs	r5, #0
   830ba:	2201      	movs	r2, #1
   830bc:	81a1      	strh	r1, [r4, #12]
   830be:	60a5      	str	r5, [r4, #8]
   830c0:	6023      	str	r3, [r4, #0]
   830c2:	6123      	str	r3, [r4, #16]
   830c4:	6162      	str	r2, [r4, #20]
   830c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   830ca:	2f00      	cmp	r7, #0
   830cc:	bf08      	it	eq
   830ce:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   830d2:	4638      	mov	r0, r7
   830d4:	f003 f946 	bl	86364 <malloc>
   830d8:	4605      	mov	r5, r0
   830da:	b128      	cbz	r0, 830e8 <setvbuf+0xd4>
   830dc:	89a1      	ldrh	r1, [r4, #12]
   830de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   830e2:	b289      	uxth	r1, r1
   830e4:	81a1      	strh	r1, [r4, #12]
   830e6:	e7b9      	b.n	8305c <setvbuf+0x48>
   830e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   830ec:	f003 f93a 	bl	86364 <malloc>
   830f0:	4605      	mov	r5, r0
   830f2:	b918      	cbnz	r0, 830fc <setvbuf+0xe8>
   830f4:	89a1      	ldrh	r1, [r4, #12]
   830f6:	f04f 30ff 	mov.w	r0, #4294967295
   830fa:	e7d9      	b.n	830b0 <setvbuf+0x9c>
   830fc:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83100:	e7ec      	b.n	830dc <setvbuf+0xc8>
   83102:	bf00      	nop
   83104:	20070568 	.word	0x20070568
   83108:	0008531d 	.word	0x0008531d

0008310c <strlen>:
   8310c:	f020 0103 	bic.w	r1, r0, #3
   83110:	f010 0003 	ands.w	r0, r0, #3
   83114:	f1c0 0000 	rsb	r0, r0, #0
   83118:	f851 3b04 	ldr.w	r3, [r1], #4
   8311c:	f100 0c04 	add.w	ip, r0, #4
   83120:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83124:	f06f 0200 	mvn.w	r2, #0
   83128:	bf1c      	itt	ne
   8312a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8312e:	4313      	orrne	r3, r2
   83130:	f04f 0c01 	mov.w	ip, #1
   83134:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83138:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8313c:	eba3 020c 	sub.w	r2, r3, ip
   83140:	ea22 0203 	bic.w	r2, r2, r3
   83144:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83148:	bf04      	itt	eq
   8314a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8314e:	3004      	addeq	r0, #4
   83150:	d0f4      	beq.n	8313c <strlen+0x30>
   83152:	f1c2 0100 	rsb	r1, r2, #0
   83156:	ea02 0201 	and.w	r2, r2, r1
   8315a:	fab2 f282 	clz	r2, r2
   8315e:	f1c2 021f 	rsb	r2, r2, #31
   83162:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83166:	4770      	bx	lr

00083168 <strncmp>:
   83168:	2a00      	cmp	r2, #0
   8316a:	d03c      	beq.n	831e6 <strncmp+0x7e>
   8316c:	ea40 0301 	orr.w	r3, r0, r1
   83170:	f013 0303 	ands.w	r3, r3, #3
   83174:	b4f0      	push	{r4, r5, r6, r7}
   83176:	d125      	bne.n	831c4 <strncmp+0x5c>
   83178:	2a03      	cmp	r2, #3
   8317a:	d923      	bls.n	831c4 <strncmp+0x5c>
   8317c:	6804      	ldr	r4, [r0, #0]
   8317e:	680d      	ldr	r5, [r1, #0]
   83180:	42ac      	cmp	r4, r5
   83182:	d11f      	bne.n	831c4 <strncmp+0x5c>
   83184:	3a04      	subs	r2, #4
   83186:	d030      	beq.n	831ea <strncmp+0x82>
   83188:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   8318c:	ea25 0404 	bic.w	r4, r5, r4
   83190:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   83194:	d12c      	bne.n	831f0 <strncmp+0x88>
   83196:	1d07      	adds	r7, r0, #4
   83198:	1d0d      	adds	r5, r1, #4
   8319a:	e00d      	b.n	831b8 <strncmp+0x50>
   8319c:	f857 3b04 	ldr.w	r3, [r7], #4
   831a0:	680e      	ldr	r6, [r1, #0]
   831a2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   831a6:	42b3      	cmp	r3, r6
   831a8:	ea24 0403 	bic.w	r4, r4, r3
   831ac:	d10a      	bne.n	831c4 <strncmp+0x5c>
   831ae:	3a04      	subs	r2, #4
   831b0:	d01b      	beq.n	831ea <strncmp+0x82>
   831b2:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   831b6:	d11e      	bne.n	831f6 <strncmp+0x8e>
   831b8:	2a03      	cmp	r2, #3
   831ba:	4629      	mov	r1, r5
   831bc:	4638      	mov	r0, r7
   831be:	f105 0504 	add.w	r5, r5, #4
   831c2:	d8eb      	bhi.n	8319c <strncmp+0x34>
   831c4:	7803      	ldrb	r3, [r0, #0]
   831c6:	780c      	ldrb	r4, [r1, #0]
   831c8:	3a01      	subs	r2, #1
   831ca:	42a3      	cmp	r3, r4
   831cc:	d108      	bne.n	831e0 <strncmp+0x78>
   831ce:	b162      	cbz	r2, 831ea <strncmp+0x82>
   831d0:	b173      	cbz	r3, 831f0 <strncmp+0x88>
   831d2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   831d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   831da:	3a01      	subs	r2, #1
   831dc:	42a3      	cmp	r3, r4
   831de:	d0f6      	beq.n	831ce <strncmp+0x66>
   831e0:	1b18      	subs	r0, r3, r4
   831e2:	bcf0      	pop	{r4, r5, r6, r7}
   831e4:	4770      	bx	lr
   831e6:	4610      	mov	r0, r2
   831e8:	4770      	bx	lr
   831ea:	4610      	mov	r0, r2
   831ec:	bcf0      	pop	{r4, r5, r6, r7}
   831ee:	4770      	bx	lr
   831f0:	4618      	mov	r0, r3
   831f2:	bcf0      	pop	{r4, r5, r6, r7}
   831f4:	4770      	bx	lr
   831f6:	2000      	movs	r0, #0
   831f8:	e7f3      	b.n	831e2 <strncmp+0x7a>
   831fa:	bf00      	nop

000831fc <strncpy>:
   831fc:	ea40 0301 	orr.w	r3, r0, r1
   83200:	079b      	lsls	r3, r3, #30
   83202:	b470      	push	{r4, r5, r6}
   83204:	d12b      	bne.n	8325e <strncpy+0x62>
   83206:	2a03      	cmp	r2, #3
   83208:	d929      	bls.n	8325e <strncpy+0x62>
   8320a:	460c      	mov	r4, r1
   8320c:	4603      	mov	r3, r0
   8320e:	4621      	mov	r1, r4
   83210:	f854 6b04 	ldr.w	r6, [r4], #4
   83214:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   83218:	ea25 0506 	bic.w	r5, r5, r6
   8321c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   83220:	d105      	bne.n	8322e <strncpy+0x32>
   83222:	3a04      	subs	r2, #4
   83224:	2a03      	cmp	r2, #3
   83226:	f843 6b04 	str.w	r6, [r3], #4
   8322a:	4621      	mov	r1, r4
   8322c:	d8ef      	bhi.n	8320e <strncpy+0x12>
   8322e:	b1a2      	cbz	r2, 8325a <strncpy+0x5e>
   83230:	780c      	ldrb	r4, [r1, #0]
   83232:	3a01      	subs	r2, #1
   83234:	701c      	strb	r4, [r3, #0]
   83236:	3101      	adds	r1, #1
   83238:	3301      	adds	r3, #1
   8323a:	b13c      	cbz	r4, 8324c <strncpy+0x50>
   8323c:	b16a      	cbz	r2, 8325a <strncpy+0x5e>
   8323e:	f811 4b01 	ldrb.w	r4, [r1], #1
   83242:	3a01      	subs	r2, #1
   83244:	f803 4b01 	strb.w	r4, [r3], #1
   83248:	2c00      	cmp	r4, #0
   8324a:	d1f7      	bne.n	8323c <strncpy+0x40>
   8324c:	b12a      	cbz	r2, 8325a <strncpy+0x5e>
   8324e:	441a      	add	r2, r3
   83250:	2100      	movs	r1, #0
   83252:	f803 1b01 	strb.w	r1, [r3], #1
   83256:	4293      	cmp	r3, r2
   83258:	d1fb      	bne.n	83252 <strncpy+0x56>
   8325a:	bc70      	pop	{r4, r5, r6}
   8325c:	4770      	bx	lr
   8325e:	4603      	mov	r3, r0
   83260:	e7e5      	b.n	8322e <strncpy+0x32>
   83262:	bf00      	nop

00083264 <sulp>:
   83264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83268:	460f      	mov	r7, r1
   8326a:	4690      	mov	r8, r2
   8326c:	f003 feb0 	bl	86fd0 <__ulp>
   83270:	4604      	mov	r4, r0
   83272:	460d      	mov	r5, r1
   83274:	f1b8 0f00 	cmp.w	r8, #0
   83278:	d011      	beq.n	8329e <sulp+0x3a>
   8327a:	f3c7 530a 	ubfx	r3, r7, #20, #11
   8327e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   83282:	2b00      	cmp	r3, #0
   83284:	dd0b      	ble.n	8329e <sulp+0x3a>
   83286:	051b      	lsls	r3, r3, #20
   83288:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   8328c:	2400      	movs	r4, #0
   8328e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   83292:	4622      	mov	r2, r4
   83294:	462b      	mov	r3, r5
   83296:	f004 fe49 	bl	87f2c <__aeabi_dmul>
   8329a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8329e:	4620      	mov	r0, r4
   832a0:	4629      	mov	r1, r5
   832a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832a6:	bf00      	nop

000832a8 <_strtod_r>:
   832a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   832ac:	460f      	mov	r7, r1
   832ae:	b09f      	sub	sp, #124	; 0x7c
   832b0:	4683      	mov	fp, r0
   832b2:	460b      	mov	r3, r1
   832b4:	2000      	movs	r0, #0
   832b6:	2100      	movs	r1, #0
   832b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   832bc:	9203      	str	r2, [sp, #12]
   832be:	2200      	movs	r2, #0
   832c0:	9719      	str	r7, [sp, #100]	; 0x64
   832c2:	921a      	str	r2, [sp, #104]	; 0x68
   832c4:	461c      	mov	r4, r3
   832c6:	f813 6b01 	ldrb.w	r6, [r3], #1
   832ca:	2e2d      	cmp	r6, #45	; 0x2d
   832cc:	f200 80f0 	bhi.w	834b0 <_strtod_r+0x208>
   832d0:	e8df f016 	tbh	[pc, r6, lsl #1]
   832d4:	00ee002e 	.word	0x00ee002e
   832d8:	00ee00ee 	.word	0x00ee00ee
   832dc:	00ee00ee 	.word	0x00ee00ee
   832e0:	00ee00ee 	.word	0x00ee00ee
   832e4:	00dd00ee 	.word	0x00dd00ee
   832e8:	00dd00dd 	.word	0x00dd00dd
   832ec:	00dd00dd 	.word	0x00dd00dd
   832f0:	00ee00ee 	.word	0x00ee00ee
   832f4:	00ee00ee 	.word	0x00ee00ee
   832f8:	00ee00ee 	.word	0x00ee00ee
   832fc:	00ee00ee 	.word	0x00ee00ee
   83300:	00ee00ee 	.word	0x00ee00ee
   83304:	00ee00ee 	.word	0x00ee00ee
   83308:	00ee00ee 	.word	0x00ee00ee
   8330c:	00ee00ee 	.word	0x00ee00ee
   83310:	00ee00ee 	.word	0x00ee00ee
   83314:	00ee00dd 	.word	0x00ee00dd
   83318:	00ee00ee 	.word	0x00ee00ee
   8331c:	00ee00ee 	.word	0x00ee00ee
   83320:	00ee00ee 	.word	0x00ee00ee
   83324:	00ee00ee 	.word	0x00ee00ee
   83328:	004400ee 	.word	0x004400ee
   8332c:	00da00ee 	.word	0x00da00ee
   83330:	9b03      	ldr	r3, [sp, #12]
   83332:	f04f 0800 	mov.w	r8, #0
   83336:	f04f 0900 	mov.w	r9, #0
   8333a:	b153      	cbz	r3, 83352 <_strtod_r+0xaa>
   8333c:	2300      	movs	r3, #0
   8333e:	9306      	str	r3, [sp, #24]
   83340:	9b03      	ldr	r3, [sp, #12]
   83342:	601f      	str	r7, [r3, #0]
   83344:	9b06      	ldr	r3, [sp, #24]
   83346:	b123      	cbz	r3, 83352 <_strtod_r+0xaa>
   83348:	4641      	mov	r1, r8
   8334a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8334e:	4688      	mov	r8, r1
   83350:	4699      	mov	r9, r3
   83352:	4640      	mov	r0, r8
   83354:	4649      	mov	r1, r9
   83356:	b01f      	add	sp, #124	; 0x7c
   83358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8335c:	2300      	movs	r3, #0
   8335e:	9306      	str	r3, [sp, #24]
   83360:	1c63      	adds	r3, r4, #1
   83362:	9319      	str	r3, [sp, #100]	; 0x64
   83364:	7866      	ldrb	r6, [r4, #1]
   83366:	2e00      	cmp	r6, #0
   83368:	d0e2      	beq.n	83330 <_strtod_r+0x88>
   8336a:	2e30      	cmp	r6, #48	; 0x30
   8336c:	461c      	mov	r4, r3
   8336e:	f000 80a4 	beq.w	834ba <_strtod_r+0x212>
   83372:	2300      	movs	r3, #0
   83374:	9408      	str	r4, [sp, #32]
   83376:	930a      	str	r3, [sp, #40]	; 0x28
   83378:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8337c:	f04f 0a00 	mov.w	sl, #0
   83380:	2b09      	cmp	r3, #9
   83382:	4655      	mov	r5, sl
   83384:	4623      	mov	r3, r4
   83386:	4654      	mov	r4, sl
   83388:	d819      	bhi.n	833be <_strtod_r+0x116>
   8338a:	2c08      	cmp	r4, #8
   8338c:	bfc8      	it	gt
   8338e:	eb0a 0a8a 	addgt.w	sl, sl, sl, lsl #2
   83392:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   83396:	f103 0301 	add.w	r3, r3, #1
   8339a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
   8339e:	9319      	str	r3, [sp, #100]	; 0x64
   833a0:	bfc4      	itt	gt
   833a2:	eb06 064a 	addgt.w	r6, r6, sl, lsl #1
   833a6:	f1a6 0a30 	subgt.w	sl, r6, #48	; 0x30
   833aa:	781e      	ldrb	r6, [r3, #0]
   833ac:	bfd8      	it	le
   833ae:	f1a2 0530 	suble.w	r5, r2, #48	; 0x30
   833b2:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
   833b6:	2a09      	cmp	r2, #9
   833b8:	f104 0401 	add.w	r4, r4, #1
   833bc:	d9e5      	bls.n	8338a <_strtod_r+0xe2>
   833be:	4658      	mov	r0, fp
   833c0:	9307      	str	r3, [sp, #28]
   833c2:	f002 ff5b 	bl	8627c <_localeconv_r>
   833c6:	f8d0 8000 	ldr.w	r8, [r0]
   833ca:	4658      	mov	r0, fp
   833cc:	f002 ff56 	bl	8627c <_localeconv_r>
   833d0:	6800      	ldr	r0, [r0, #0]
   833d2:	f7ff fe9b 	bl	8310c <strlen>
   833d6:	9b07      	ldr	r3, [sp, #28]
   833d8:	4602      	mov	r2, r0
   833da:	4641      	mov	r1, r8
   833dc:	4618      	mov	r0, r3
   833de:	f7ff fec3 	bl	83168 <strncmp>
   833e2:	4680      	mov	r8, r0
   833e4:	2800      	cmp	r0, #0
   833e6:	f000 80e4 	beq.w	835b2 <_strtod_r+0x30a>
   833ea:	2000      	movs	r0, #0
   833ec:	4684      	mov	ip, r0
   833ee:	4686      	mov	lr, r0
   833f0:	46a1      	mov	r9, r4
   833f2:	2e65      	cmp	r6, #101	; 0x65
   833f4:	d073      	beq.n	834de <_strtod_r+0x236>
   833f6:	2e45      	cmp	r6, #69	; 0x45
   833f8:	d071      	beq.n	834de <_strtod_r+0x236>
   833fa:	2300      	movs	r3, #0
   833fc:	f1b9 0f00 	cmp.w	r9, #0
   83400:	d047      	beq.n	83492 <_strtod_r+0x1ea>
   83402:	f1b9 0f10 	cmp.w	r9, #16
   83406:	46c8      	mov	r8, r9
   83408:	ebcc 0303 	rsb	r3, ip, r3
   8340c:	4628      	mov	r0, r5
   8340e:	bfa8      	it	ge
   83410:	f04f 0810 	movge.w	r8, #16
   83414:	9307      	str	r3, [sp, #28]
   83416:	f004 fd13 	bl	87e40 <__aeabi_ui2d>
   8341a:	2c00      	cmp	r4, #0
   8341c:	bf08      	it	eq
   8341e:	464c      	moveq	r4, r9
   83420:	f1b8 0f09 	cmp.w	r8, #9
   83424:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83428:	dd13      	ble.n	83452 <_strtod_r+0x1aa>
   8342a:	4b76      	ldr	r3, [pc, #472]	; (83604 <_strtod_r+0x35c>)
   8342c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   83430:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   83434:	f004 fd7a 	bl	87f2c <__aeabi_dmul>
   83438:	4606      	mov	r6, r0
   8343a:	4650      	mov	r0, sl
   8343c:	460f      	mov	r7, r1
   8343e:	f004 fcff 	bl	87e40 <__aeabi_ui2d>
   83442:	4602      	mov	r2, r0
   83444:	460b      	mov	r3, r1
   83446:	4630      	mov	r0, r6
   83448:	4639      	mov	r1, r7
   8344a:	f004 fbbd 	bl	87bc8 <__adddf3>
   8344e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83452:	f1b9 0f0f 	cmp.w	r9, #15
   83456:	f300 80d7 	bgt.w	83608 <_strtod_r+0x360>
   8345a:	9b07      	ldr	r3, [sp, #28]
   8345c:	2b00      	cmp	r3, #0
   8345e:	f000 80a5 	beq.w	835ac <_strtod_r+0x304>
   83462:	9b07      	ldr	r3, [sp, #28]
   83464:	f340 8567 	ble.w	83f36 <_strtod_r+0xc8e>
   83468:	2b16      	cmp	r3, #22
   8346a:	f300 84d2 	bgt.w	83e12 <_strtod_r+0xb6a>
   8346e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   83472:	9807      	ldr	r0, [sp, #28]
   83474:	4963      	ldr	r1, [pc, #396]	; (83604 <_strtod_r+0x35c>)
   83476:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8347a:	e9d1 0100 	ldrd	r0, r1, [r1]
   8347e:	f004 fd55 	bl	87f2c <__aeabi_dmul>
   83482:	4680      	mov	r8, r0
   83484:	4689      	mov	r9, r1
   83486:	e00d      	b.n	834a4 <_strtod_r+0x1fc>
   83488:	2301      	movs	r3, #1
   8348a:	9306      	str	r3, [sp, #24]
   8348c:	e768      	b.n	83360 <_strtod_r+0xb8>
   8348e:	9319      	str	r3, [sp, #100]	; 0x64
   83490:	e718      	b.n	832c4 <_strtod_r+0x1c>
   83492:	b918      	cbnz	r0, 8349c <_strtod_r+0x1f4>
   83494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83496:	2b00      	cmp	r3, #0
   83498:	f000 82a1 	beq.w	839de <_strtod_r+0x736>
   8349c:	f04f 0800 	mov.w	r8, #0
   834a0:	f04f 0900 	mov.w	r9, #0
   834a4:	9b03      	ldr	r3, [sp, #12]
   834a6:	2b00      	cmp	r3, #0
   834a8:	f43f af4c 	beq.w	83344 <_strtod_r+0x9c>
   834ac:	9f19      	ldr	r7, [sp, #100]	; 0x64
   834ae:	e747      	b.n	83340 <_strtod_r+0x98>
   834b0:	2300      	movs	r3, #0
   834b2:	2e30      	cmp	r6, #48	; 0x30
   834b4:	9306      	str	r3, [sp, #24]
   834b6:	f47f af5c 	bne.w	83372 <_strtod_r+0xca>
   834ba:	7863      	ldrb	r3, [r4, #1]
   834bc:	2b58      	cmp	r3, #88	; 0x58
   834be:	f000 83a4 	beq.w	83c0a <_strtod_r+0x962>
   834c2:	2b78      	cmp	r3, #120	; 0x78
   834c4:	f000 83a1 	beq.w	83c0a <_strtod_r+0x962>
   834c8:	3401      	adds	r4, #1
   834ca:	9419      	str	r4, [sp, #100]	; 0x64
   834cc:	7826      	ldrb	r6, [r4, #0]
   834ce:	2e30      	cmp	r6, #48	; 0x30
   834d0:	d0fa      	beq.n	834c8 <_strtod_r+0x220>
   834d2:	2e00      	cmp	r6, #0
   834d4:	d0e2      	beq.n	8349c <_strtod_r+0x1f4>
   834d6:	2301      	movs	r3, #1
   834d8:	9408      	str	r4, [sp, #32]
   834da:	930a      	str	r3, [sp, #40]	; 0x28
   834dc:	e74c      	b.n	83378 <_strtod_r+0xd0>
   834de:	f1b9 0f00 	cmp.w	r9, #0
   834e2:	d04e      	beq.n	83582 <_strtod_r+0x2da>
   834e4:	9f19      	ldr	r7, [sp, #100]	; 0x64
   834e6:	1c7b      	adds	r3, r7, #1
   834e8:	9319      	str	r3, [sp, #100]	; 0x64
   834ea:	787e      	ldrb	r6, [r7, #1]
   834ec:	2e2b      	cmp	r6, #43	; 0x2b
   834ee:	f000 826d 	beq.w	839cc <_strtod_r+0x724>
   834f2:	2e2d      	cmp	r6, #45	; 0x2d
   834f4:	f000 8264 	beq.w	839c0 <_strtod_r+0x718>
   834f8:	f04f 0800 	mov.w	r8, #0
   834fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   83500:	2b09      	cmp	r3, #9
   83502:	4632      	mov	r2, r6
   83504:	f200 8202 	bhi.w	8390c <_strtod_r+0x664>
   83508:	2e30      	cmp	r6, #48	; 0x30
   8350a:	d106      	bne.n	8351a <_strtod_r+0x272>
   8350c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8350e:	3301      	adds	r3, #1
   83510:	9319      	str	r3, [sp, #100]	; 0x64
   83512:	781e      	ldrb	r6, [r3, #0]
   83514:	2e30      	cmp	r6, #48	; 0x30
   83516:	d0fa      	beq.n	8350e <_strtod_r+0x266>
   83518:	4632      	mov	r2, r6
   8351a:	3a31      	subs	r2, #49	; 0x31
   8351c:	2a08      	cmp	r2, #8
   8351e:	f63f af6c 	bhi.w	833fa <_strtod_r+0x152>
   83522:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83524:	4619      	mov	r1, r3
   83526:	460a      	mov	r2, r1
   83528:	3201      	adds	r2, #1
   8352a:	9219      	str	r2, [sp, #100]	; 0x64
   8352c:	9307      	str	r3, [sp, #28]
   8352e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   83532:	784e      	ldrb	r6, [r1, #1]
   83534:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
   83538:	2909      	cmp	r1, #9
   8353a:	d80b      	bhi.n	83554 <_strtod_r+0x2ac>
   8353c:	3201      	adds	r2, #1
   8353e:	9219      	str	r2, [sp, #100]	; 0x64
   83540:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   83544:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   83548:	7816      	ldrb	r6, [r2, #0]
   8354a:	3b30      	subs	r3, #48	; 0x30
   8354c:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
   83550:	2909      	cmp	r1, #9
   83552:	d9f3      	bls.n	8353c <_strtod_r+0x294>
   83554:	9907      	ldr	r1, [sp, #28]
   83556:	1a52      	subs	r2, r2, r1
   83558:	2a08      	cmp	r2, #8
   8355a:	f300 8451 	bgt.w	83e00 <_strtod_r+0xb58>
   8355e:	f644 621f 	movw	r2, #19999	; 0x4e1f
   83562:	4293      	cmp	r3, r2
   83564:	bfa8      	it	ge
   83566:	4613      	movge	r3, r2
   83568:	f1c8 0200 	rsb	r2, r8, #0
   8356c:	4053      	eors	r3, r2
   8356e:	4443      	add	r3, r8
   83570:	f1b9 0f00 	cmp.w	r9, #0
   83574:	f47f af45 	bne.w	83402 <_strtod_r+0x15a>
   83578:	e78b      	b.n	83492 <_strtod_r+0x1ea>
   8357a:	f04f 0c00 	mov.w	ip, #0
   8357e:	f04f 0e01 	mov.w	lr, #1
   83582:	2800      	cmp	r0, #0
   83584:	f040 8228 	bne.w	839d8 <_strtod_r+0x730>
   83588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8358a:	2b00      	cmp	r3, #0
   8358c:	f43f aed0 	beq.w	83330 <_strtod_r+0x88>
   83590:	4681      	mov	r9, r0
   83592:	e7a7      	b.n	834e4 <_strtod_r+0x23c>
   83594:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   83598:	9305      	str	r3, [sp, #20]
   8359a:	f04f 33ff 	mov.w	r3, #4294967295
   8359e:	9304      	str	r3, [sp, #16]
   835a0:	072b      	lsls	r3, r5, #28
   835a2:	bf42      	ittt	mi
   835a4:	9b05      	ldrmi	r3, [sp, #20]
   835a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   835aa:	9305      	strmi	r3, [sp, #20]
   835ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   835b0:	e778      	b.n	834a4 <_strtod_r+0x1fc>
   835b2:	4658      	mov	r0, fp
   835b4:	f002 fe62 	bl	8627c <_localeconv_r>
   835b8:	6800      	ldr	r0, [r0, #0]
   835ba:	f7ff fda7 	bl	8310c <strlen>
   835be:	9b19      	ldr	r3, [sp, #100]	; 0x64
   835c0:	181a      	adds	r2, r3, r0
   835c2:	9219      	str	r2, [sp, #100]	; 0x64
   835c4:	5c1e      	ldrb	r6, [r3, r0]
   835c6:	2c00      	cmp	r4, #0
   835c8:	f040 81e8 	bne.w	8399c <_strtod_r+0x6f4>
   835cc:	2e30      	cmp	r6, #48	; 0x30
   835ce:	4620      	mov	r0, r4
   835d0:	d105      	bne.n	835de <_strtod_r+0x336>
   835d2:	3201      	adds	r2, #1
   835d4:	9219      	str	r2, [sp, #100]	; 0x64
   835d6:	7816      	ldrb	r6, [r2, #0]
   835d8:	3001      	adds	r0, #1
   835da:	2e30      	cmp	r6, #48	; 0x30
   835dc:	d0f9      	beq.n	835d2 <_strtod_r+0x32a>
   835de:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
   835e2:	2b08      	cmp	r3, #8
   835e4:	f200 82a0 	bhi.w	83b28 <_strtod_r+0x880>
   835e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   835ea:	3e30      	subs	r6, #48	; 0x30
   835ec:	9308      	str	r3, [sp, #32]
   835ee:	f100 0c01 	add.w	ip, r0, #1
   835f2:	f04f 0901 	mov.w	r9, #1
   835f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   835fa:	eb06 0545 	add.w	r5, r6, r5, lsl #1
   835fe:	2000      	movs	r0, #0
   83600:	e1da      	b.n	839b8 <_strtod_r+0x710>
   83602:	bf00      	nop
   83604:	00088df0 	.word	0x00088df0
   83608:	9b07      	ldr	r3, [sp, #28]
   8360a:	ebc8 0809 	rsb	r8, r8, r9
   8360e:	4498      	add	r8, r3
   83610:	f1b8 0f00 	cmp.w	r8, #0
   83614:	f340 839a 	ble.w	83d4c <_strtod_r+0xaa4>
   83618:	f018 000f 	ands.w	r0, r8, #15
   8361c:	d00a      	beq.n	83634 <_strtod_r+0x38c>
   8361e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   83622:	49c1      	ldr	r1, [pc, #772]	; (83928 <_strtod_r+0x680>)
   83624:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   83628:	e9d1 0100 	ldrd	r0, r1, [r1]
   8362c:	f004 fc7e 	bl	87f2c <__aeabi_dmul>
   83630:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83634:	f038 060f 	bics.w	r6, r8, #15
   83638:	f040 8228 	bne.w	83a8c <_strtod_r+0x7e4>
   8363c:	2300      	movs	r3, #0
   8363e:	930a      	str	r3, [sp, #40]	; 0x28
   83640:	9500      	str	r5, [sp, #0]
   83642:	9908      	ldr	r1, [sp, #32]
   83644:	4622      	mov	r2, r4
   83646:	464b      	mov	r3, r9
   83648:	4658      	mov	r0, fp
   8364a:	f003 fa3f 	bl	86acc <__s2b>
   8364e:	9010      	str	r0, [sp, #64]	; 0x40
   83650:	2800      	cmp	r0, #0
   83652:	f000 833b 	beq.w	83ccc <_strtod_r+0xa24>
   83656:	9a07      	ldr	r2, [sp, #28]
   83658:	2100      	movs	r1, #0
   8365a:	2a00      	cmp	r2, #0
   8365c:	f1c2 0300 	rsb	r3, r2, #0
   83660:	bfa8      	it	ge
   83662:	460b      	movge	r3, r1
   83664:	460f      	mov	r7, r1
   83666:	930c      	str	r3, [sp, #48]	; 0x30
   83668:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8366c:	9107      	str	r1, [sp, #28]
   8366e:	930b      	str	r3, [sp, #44]	; 0x2c
   83670:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83672:	4658      	mov	r0, fp
   83674:	6861      	ldr	r1, [r4, #4]
   83676:	f003 f9b5 	bl	869e4 <_Balloc>
   8367a:	4682      	mov	sl, r0
   8367c:	2800      	cmp	r0, #0
   8367e:	f000 82a5 	beq.w	83bcc <_strtod_r+0x924>
   83682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   83686:	4621      	mov	r1, r4
   83688:	4690      	mov	r8, r2
   8368a:	4699      	mov	r9, r3
   8368c:	6922      	ldr	r2, [r4, #16]
   8368e:	310c      	adds	r1, #12
   83690:	3202      	adds	r2, #2
   83692:	0092      	lsls	r2, r2, #2
   83694:	300c      	adds	r0, #12
   83696:	e9cd 8908 	strd	r8, r9, [sp, #32]
   8369a:	f7ff fbd5 	bl	82e48 <memcpy>
   8369e:	a81b      	add	r0, sp, #108	; 0x6c
   836a0:	a91c      	add	r1, sp, #112	; 0x70
   836a2:	e88d 0003 	stmia.w	sp, {r0, r1}
   836a6:	4642      	mov	r2, r8
   836a8:	464b      	mov	r3, r9
   836aa:	4658      	mov	r0, fp
   836ac:	f003 fd1a 	bl	870e4 <__d2b>
   836b0:	901a      	str	r0, [sp, #104]	; 0x68
   836b2:	2800      	cmp	r0, #0
   836b4:	f000 828b 	beq.w	83bce <_strtod_r+0x926>
   836b8:	4658      	mov	r0, fp
   836ba:	2101      	movs	r1, #1
   836bc:	f003 faa0 	bl	86c00 <__i2b>
   836c0:	4607      	mov	r7, r0
   836c2:	2800      	cmp	r0, #0
   836c4:	f000 8282 	beq.w	83bcc <_strtod_r+0x924>
   836c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   836ca:	2a00      	cmp	r2, #0
   836cc:	f2c0 8112 	blt.w	838f4 <_strtod_r+0x64c>
   836d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   836d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   836d4:	eb03 0802 	add.w	r8, r3, r2
   836d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   836da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   836dc:	1a12      	subs	r2, r2, r0
   836de:	441a      	add	r2, r3
   836e0:	f46f 707f 	mvn.w	r0, #1020	; 0x3fc
   836e4:	4282      	cmp	r2, r0
   836e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   836ea:	f280 80ec 	bge.w	838c6 <_strtod_r+0x61e>
   836ee:	1a80      	subs	r0, r0, r2
   836f0:	281f      	cmp	r0, #31
   836f2:	eba3 0300 	sub.w	r3, r3, r0
   836f6:	f300 8102 	bgt.w	838fe <_strtod_r+0x656>
   836fa:	2501      	movs	r5, #1
   836fc:	2200      	movs	r2, #0
   836fe:	4085      	lsls	r5, r0
   83700:	9211      	str	r2, [sp, #68]	; 0x44
   83702:	eb08 0903 	add.w	r9, r8, r3
   83706:	45c1      	cmp	r9, r8
   83708:	464a      	mov	r2, r9
   8370a:	bfa8      	it	ge
   8370c:	4642      	movge	r2, r8
   8370e:	18ce      	adds	r6, r1, r3
   83710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83712:	441e      	add	r6, r3
   83714:	42b2      	cmp	r2, r6
   83716:	4613      	mov	r3, r2
   83718:	bfa8      	it	ge
   8371a:	4633      	movge	r3, r6
   8371c:	2b00      	cmp	r3, #0
   8371e:	dd04      	ble.n	8372a <_strtod_r+0x482>
   83720:	ebc3 0909 	rsb	r9, r3, r9
   83724:	1af6      	subs	r6, r6, r3
   83726:	ebc3 0808 	rsb	r8, r3, r8
   8372a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8372c:	b1b3      	cbz	r3, 8375c <_strtod_r+0x4b4>
   8372e:	4639      	mov	r1, r7
   83730:	4658      	mov	r0, fp
   83732:	461a      	mov	r2, r3
   83734:	f003 fb0e 	bl	86d54 <__pow5mult>
   83738:	4607      	mov	r7, r0
   8373a:	2800      	cmp	r0, #0
   8373c:	f000 8246 	beq.w	83bcc <_strtod_r+0x924>
   83740:	4658      	mov	r0, fp
   83742:	4639      	mov	r1, r7
   83744:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   83746:	f003 fa65 	bl	86c14 <__multiply>
   8374a:	4604      	mov	r4, r0
   8374c:	2800      	cmp	r0, #0
   8374e:	f000 823d 	beq.w	83bcc <_strtod_r+0x924>
   83752:	4658      	mov	r0, fp
   83754:	991a      	ldr	r1, [sp, #104]	; 0x68
   83756:	f003 f96d 	bl	86a34 <_Bfree>
   8375a:	941a      	str	r4, [sp, #104]	; 0x68
   8375c:	f1b9 0f00 	cmp.w	r9, #0
   83760:	dd08      	ble.n	83774 <_strtod_r+0x4cc>
   83762:	464a      	mov	r2, r9
   83764:	4658      	mov	r0, fp
   83766:	991a      	ldr	r1, [sp, #104]	; 0x68
   83768:	f003 fb44 	bl	86df4 <__lshift>
   8376c:	901a      	str	r0, [sp, #104]	; 0x68
   8376e:	2800      	cmp	r0, #0
   83770:	f000 822d 	beq.w	83bce <_strtod_r+0x926>
   83774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83776:	b143      	cbz	r3, 8378a <_strtod_r+0x4e2>
   83778:	4651      	mov	r1, sl
   8377a:	4658      	mov	r0, fp
   8377c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8377e:	f003 fae9 	bl	86d54 <__pow5mult>
   83782:	4682      	mov	sl, r0
   83784:	2800      	cmp	r0, #0
   83786:	f000 8221 	beq.w	83bcc <_strtod_r+0x924>
   8378a:	2e00      	cmp	r6, #0
   8378c:	dd08      	ble.n	837a0 <_strtod_r+0x4f8>
   8378e:	4651      	mov	r1, sl
   83790:	4632      	mov	r2, r6
   83792:	4658      	mov	r0, fp
   83794:	f003 fb2e 	bl	86df4 <__lshift>
   83798:	4682      	mov	sl, r0
   8379a:	2800      	cmp	r0, #0
   8379c:	f000 8216 	beq.w	83bcc <_strtod_r+0x924>
   837a0:	f1b8 0f00 	cmp.w	r8, #0
   837a4:	dd08      	ble.n	837b8 <_strtod_r+0x510>
   837a6:	4639      	mov	r1, r7
   837a8:	4642      	mov	r2, r8
   837aa:	4658      	mov	r0, fp
   837ac:	f003 fb22 	bl	86df4 <__lshift>
   837b0:	4607      	mov	r7, r0
   837b2:	2800      	cmp	r0, #0
   837b4:	f000 820a 	beq.w	83bcc <_strtod_r+0x924>
   837b8:	4658      	mov	r0, fp
   837ba:	991a      	ldr	r1, [sp, #104]	; 0x68
   837bc:	4652      	mov	r2, sl
   837be:	f003 fb95 	bl	86eec <__mdiff>
   837c2:	9007      	str	r0, [sp, #28]
   837c4:	2800      	cmp	r0, #0
   837c6:	f000 8201 	beq.w	83bcc <_strtod_r+0x924>
   837ca:	9a07      	ldr	r2, [sp, #28]
   837cc:	2600      	movs	r6, #0
   837ce:	68d3      	ldr	r3, [r2, #12]
   837d0:	4639      	mov	r1, r7
   837d2:	60d6      	str	r6, [r2, #12]
   837d4:	930d      	str	r3, [sp, #52]	; 0x34
   837d6:	f003 fb65 	bl	86ea4 <__mcmp>
   837da:	42b0      	cmp	r0, r6
   837dc:	f2c0 8420 	blt.w	84020 <_strtod_r+0xd78>
   837e0:	f000 83dd 	beq.w	83f9e <_strtod_r+0xcf6>
   837e4:	9807      	ldr	r0, [sp, #28]
   837e6:	4639      	mov	r1, r7
   837e8:	f003 fcd0 	bl	8718c <__ratio>
   837ec:	2200      	movs	r2, #0
   837ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   837f2:	4604      	mov	r4, r0
   837f4:	460d      	mov	r5, r1
   837f6:	f004 fe15 	bl	88424 <__aeabi_dcmple>
   837fa:	2800      	cmp	r0, #0
   837fc:	d067      	beq.n	838ce <_strtod_r+0x626>
   837fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83800:	2b00      	cmp	r3, #0
   83802:	f000 80a2 	beq.w	8394a <_strtod_r+0x6a2>
   83806:	46b1      	mov	r9, r6
   83808:	4d48      	ldr	r5, [pc, #288]	; (8392c <_strtod_r+0x684>)
   8380a:	f8dd c014 	ldr.w	ip, [sp, #20]
   8380e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8392c <_strtod_r+0x684>
   83812:	2400      	movs	r4, #0
   83814:	4e46      	ldr	r6, [pc, #280]	; (83930 <_strtod_r+0x688>)
   83816:	4b47      	ldr	r3, [pc, #284]	; (83934 <_strtod_r+0x68c>)
   83818:	ea0c 0606 	and.w	r6, ip, r6
   8381c:	429e      	cmp	r6, r3
   8381e:	f000 8227 	beq.w	83c70 <_strtod_r+0x9c8>
   83822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83824:	b323      	cbz	r3, 83870 <_strtod_r+0x5c8>
   83826:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
   8382a:	d821      	bhi.n	83870 <_strtod_r+0x5c8>
   8382c:	a33c      	add	r3, pc, #240	; (adr r3, 83920 <_strtod_r+0x678>)
   8382e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83832:	4648      	mov	r0, r9
   83834:	4641      	mov	r1, r8
   83836:	f004 fdf5 	bl	88424 <__aeabi_dcmple>
   8383a:	b1b0      	cbz	r0, 8386a <_strtod_r+0x5c2>
   8383c:	4648      	mov	r0, r9
   8383e:	4641      	mov	r1, r8
   83840:	f004 fe36 	bl	884b0 <__aeabi_d2uiz>
   83844:	4681      	mov	r9, r0
   83846:	2800      	cmp	r0, #0
   83848:	f000 8326 	beq.w	83e98 <_strtod_r+0xbf0>
   8384c:	f004 faf8 	bl	87e40 <__aeabi_ui2d>
   83850:	4681      	mov	r9, r0
   83852:	4688      	mov	r8, r1
   83854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83856:	2b00      	cmp	r3, #0
   83858:	f040 8319 	bne.w	83e8e <_strtod_r+0xbe6>
   8385c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
   83860:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   83864:	9315      	str	r3, [sp, #84]	; 0x54
   83866:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   8386a:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
   8386e:	1b9d      	subs	r5, r3, r6
   83870:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83874:	f003 fbac 	bl	86fd0 <__ulp>
   83878:	4602      	mov	r2, r0
   8387a:	460b      	mov	r3, r1
   8387c:	4620      	mov	r0, r4
   8387e:	4629      	mov	r1, r5
   83880:	f004 fb54 	bl	87f2c <__aeabi_dmul>
   83884:	4602      	mov	r2, r0
   83886:	460b      	mov	r3, r1
   83888:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8388c:	f004 f99c 	bl	87bc8 <__adddf3>
   83890:	460c      	mov	r4, r1
   83892:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83898:	b923      	cbnz	r3, 838a4 <_strtod_r+0x5fc>
   8389a:	4b25      	ldr	r3, [pc, #148]	; (83930 <_strtod_r+0x688>)
   8389c:	4023      	ands	r3, r4
   8389e:	429e      	cmp	r6, r3
   838a0:	f000 821f 	beq.w	83ce2 <_strtod_r+0xa3a>
   838a4:	4658      	mov	r0, fp
   838a6:	991a      	ldr	r1, [sp, #104]	; 0x68
   838a8:	f003 f8c4 	bl	86a34 <_Bfree>
   838ac:	4658      	mov	r0, fp
   838ae:	4651      	mov	r1, sl
   838b0:	f003 f8c0 	bl	86a34 <_Bfree>
   838b4:	4658      	mov	r0, fp
   838b6:	4639      	mov	r1, r7
   838b8:	f003 f8bc 	bl	86a34 <_Bfree>
   838bc:	4658      	mov	r0, fp
   838be:	9907      	ldr	r1, [sp, #28]
   838c0:	f003 f8b8 	bl	86a34 <_Bfree>
   838c4:	e6d4      	b.n	83670 <_strtod_r+0x3c8>
   838c6:	2200      	movs	r2, #0
   838c8:	9211      	str	r2, [sp, #68]	; 0x44
   838ca:	2501      	movs	r5, #1
   838cc:	e719      	b.n	83702 <_strtod_r+0x45a>
   838ce:	4b1a      	ldr	r3, [pc, #104]	; (83938 <_strtod_r+0x690>)
   838d0:	4620      	mov	r0, r4
   838d2:	4629      	mov	r1, r5
   838d4:	2200      	movs	r2, #0
   838d6:	f004 fb29 	bl	87f2c <__aeabi_dmul>
   838da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   838dc:	4681      	mov	r9, r0
   838de:	4688      	mov	r8, r1
   838e0:	bb73      	cbnz	r3, 83940 <_strtod_r+0x698>
   838e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   838e6:	900e      	str	r0, [sp, #56]	; 0x38
   838e8:	930f      	str	r3, [sp, #60]	; 0x3c
   838ea:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   838ee:	f8dd c014 	ldr.w	ip, [sp, #20]
   838f2:	e78f      	b.n	83814 <_strtod_r+0x56c>
   838f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   838f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   838fa:	1a99      	subs	r1, r3, r2
   838fc:	e6ec      	b.n	836d8 <_strtod_r+0x430>
   838fe:	480f      	ldr	r0, [pc, #60]	; (8393c <_strtod_r+0x694>)
   83900:	2501      	movs	r5, #1
   83902:	1a80      	subs	r0, r0, r2
   83904:	fa05 f200 	lsl.w	r2, r5, r0
   83908:	9211      	str	r2, [sp, #68]	; 0x44
   8390a:	e6fa      	b.n	83702 <_strtod_r+0x45a>
   8390c:	9719      	str	r7, [sp, #100]	; 0x64
   8390e:	2300      	movs	r3, #0
   83910:	f1b9 0f00 	cmp.w	r9, #0
   83914:	f47f ad75 	bne.w	83402 <_strtod_r+0x15a>
   83918:	e5bb      	b.n	83492 <_strtod_r+0x1ea>
   8391a:	bf00      	nop
   8391c:	f3af 8000 	nop.w
   83920:	ffc00000 	.word	0xffc00000
   83924:	41dfffff 	.word	0x41dfffff
   83928:	00088df0 	.word	0x00088df0
   8392c:	3ff00000 	.word	0x3ff00000
   83930:	7ff00000 	.word	0x7ff00000
   83934:	7fe00000 	.word	0x7fe00000
   83938:	3fe00000 	.word	0x3fe00000
   8393c:	fffffbe3 	.word	0xfffffbe3
   83940:	4602      	mov	r2, r0
   83942:	460b      	mov	r3, r1
   83944:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   83948:	e7cf      	b.n	838ea <_strtod_r+0x642>
   8394a:	9b04      	ldr	r3, [sp, #16]
   8394c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83950:	2b00      	cmp	r3, #0
   83952:	f040 80de 	bne.w	83b12 <_strtod_r+0x86a>
   83956:	f3c1 0313 	ubfx	r3, r1, #0, #20
   8395a:	468c      	mov	ip, r1
   8395c:	2b00      	cmp	r3, #0
   8395e:	f040 80dc 	bne.w	83b1a <_strtod_r+0x872>
   83962:	9111      	str	r1, [sp, #68]	; 0x44
   83964:	4620      	mov	r0, r4
   83966:	4629      	mov	r1, r5
   83968:	2200      	movs	r2, #0
   8396a:	4bb5      	ldr	r3, [pc, #724]	; (83c40 <_strtod_r+0x998>)
   8396c:	f004 fd50 	bl	88410 <__aeabi_dcmplt>
   83970:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   83974:	2800      	cmp	r0, #0
   83976:	f040 8398 	bne.w	840aa <_strtod_r+0xe02>
   8397a:	4bb2      	ldr	r3, [pc, #712]	; (83c44 <_strtod_r+0x99c>)
   8397c:	4620      	mov	r0, r4
   8397e:	4629      	mov	r1, r5
   83980:	2200      	movs	r2, #0
   83982:	f004 fad3 	bl	87f2c <__aeabi_dmul>
   83986:	4681      	mov	r9, r0
   83988:	4688      	mov	r8, r1
   8398a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   8398e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   83992:	9016      	str	r0, [sp, #88]	; 0x58
   83994:	9317      	str	r3, [sp, #92]	; 0x5c
   83996:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   8399a:	e73b      	b.n	83814 <_strtod_r+0x56c>
   8399c:	4640      	mov	r0, r8
   8399e:	46a1      	mov	r9, r4
   839a0:	46c4      	mov	ip, r8
   839a2:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
   839a6:	2a09      	cmp	r2, #9
   839a8:	d813      	bhi.n	839d2 <_strtod_r+0x72a>
   839aa:	1c43      	adds	r3, r0, #1
   839ac:	4616      	mov	r6, r2
   839ae:	2a00      	cmp	r2, #0
   839b0:	f040 824d 	bne.w	83e4e <_strtod_r+0xba6>
   839b4:	4618      	mov	r0, r3
   839b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   839b8:	1c5a      	adds	r2, r3, #1
   839ba:	9219      	str	r2, [sp, #100]	; 0x64
   839bc:	785e      	ldrb	r6, [r3, #1]
   839be:	e7f0      	b.n	839a2 <_strtod_r+0x6fa>
   839c0:	f04f 0801 	mov.w	r8, #1
   839c4:	1cbb      	adds	r3, r7, #2
   839c6:	9319      	str	r3, [sp, #100]	; 0x64
   839c8:	78be      	ldrb	r6, [r7, #2]
   839ca:	e597      	b.n	834fc <_strtod_r+0x254>
   839cc:	f04f 0800 	mov.w	r8, #0
   839d0:	e7f8      	b.n	839c4 <_strtod_r+0x71c>
   839d2:	f04f 0e01 	mov.w	lr, #1
   839d6:	e50c      	b.n	833f2 <_strtod_r+0x14a>
   839d8:	f04f 0900 	mov.w	r9, #0
   839dc:	e582      	b.n	834e4 <_strtod_r+0x23c>
   839de:	f1be 0f00 	cmp.w	lr, #0
   839e2:	f47f aca5 	bne.w	83330 <_strtod_r+0x88>
   839e6:	3e49      	subs	r6, #73	; 0x49
   839e8:	2e25      	cmp	r6, #37	; 0x25
   839ea:	f63f aca1 	bhi.w	83330 <_strtod_r+0x88>
   839ee:	a301      	add	r3, pc, #4	; (adr r3, 839f4 <_strtod_r+0x74c>)
   839f0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   839f4:	00083b73 	.word	0x00083b73
   839f8:	00083331 	.word	0x00083331
   839fc:	00083331 	.word	0x00083331
   83a00:	00083331 	.word	0x00083331
   83a04:	00083331 	.word	0x00083331
   83a08:	00083b3b 	.word	0x00083b3b
   83a0c:	00083331 	.word	0x00083331
   83a10:	00083331 	.word	0x00083331
   83a14:	00083331 	.word	0x00083331
   83a18:	00083331 	.word	0x00083331
   83a1c:	00083331 	.word	0x00083331
   83a20:	00083331 	.word	0x00083331
   83a24:	00083331 	.word	0x00083331
   83a28:	00083331 	.word	0x00083331
   83a2c:	00083331 	.word	0x00083331
   83a30:	00083331 	.word	0x00083331
   83a34:	00083331 	.word	0x00083331
   83a38:	00083331 	.word	0x00083331
   83a3c:	00083331 	.word	0x00083331
   83a40:	00083331 	.word	0x00083331
   83a44:	00083331 	.word	0x00083331
   83a48:	00083331 	.word	0x00083331
   83a4c:	00083331 	.word	0x00083331
   83a50:	00083331 	.word	0x00083331
   83a54:	00083331 	.word	0x00083331
   83a58:	00083331 	.word	0x00083331
   83a5c:	00083331 	.word	0x00083331
   83a60:	00083331 	.word	0x00083331
   83a64:	00083331 	.word	0x00083331
   83a68:	00083331 	.word	0x00083331
   83a6c:	00083331 	.word	0x00083331
   83a70:	00083331 	.word	0x00083331
   83a74:	00083b73 	.word	0x00083b73
   83a78:	00083331 	.word	0x00083331
   83a7c:	00083331 	.word	0x00083331
   83a80:	00083331 	.word	0x00083331
   83a84:	00083331 	.word	0x00083331
   83a88:	00083b3b 	.word	0x00083b3b
   83a8c:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
   83a90:	f300 811c 	bgt.w	83ccc <_strtod_r+0xa24>
   83a94:	1136      	asrs	r6, r6, #4
   83a96:	2e01      	cmp	r6, #1
   83a98:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 83c6c <_strtod_r+0x9c4>
   83a9c:	f340 8323 	ble.w	840e6 <_strtod_r+0xe3e>
   83aa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83aa4:	4647      	mov	r7, r8
   83aa6:	f04f 0a00 	mov.w	sl, #0
   83aaa:	f016 0f01 	tst.w	r6, #1
   83aae:	f10a 0a01 	add.w	sl, sl, #1
   83ab2:	ea4f 0666 	mov.w	r6, r6, asr #1
   83ab6:	d003      	beq.n	83ac0 <_strtod_r+0x818>
   83ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
   83abc:	f004 fa36 	bl	87f2c <__aeabi_dmul>
   83ac0:	2e01      	cmp	r6, #1
   83ac2:	f107 0708 	add.w	r7, r7, #8
   83ac6:	d1f0      	bne.n	83aaa <_strtod_r+0x802>
   83ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83acc:	9b05      	ldr	r3, [sp, #20]
   83ace:	eb08 08ca 	add.w	r8, r8, sl, lsl #3
   83ad2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   83ad6:	9305      	str	r3, [sp, #20]
   83ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   83adc:	e9d8 0100 	ldrd	r0, r1, [r8]
   83ae0:	f004 fa24 	bl	87f2c <__aeabi_dmul>
   83ae4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   83ae8:	0d1b      	lsrs	r3, r3, #20
   83aea:	4a57      	ldr	r2, [pc, #348]	; (83c48 <_strtod_r+0x9a0>)
   83aec:	051b      	lsls	r3, r3, #20
   83aee:	4293      	cmp	r3, r2
   83af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83af4:	f200 80ea 	bhi.w	83ccc <_strtod_r+0xa24>
   83af8:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
   83afc:	4293      	cmp	r3, r2
   83afe:	f240 82cf 	bls.w	840a0 <_strtod_r+0xdf8>
   83b02:	4b52      	ldr	r3, [pc, #328]	; (83c4c <_strtod_r+0x9a4>)
   83b04:	9305      	str	r3, [sp, #20]
   83b06:	2300      	movs	r3, #0
   83b08:	930a      	str	r3, [sp, #40]	; 0x28
   83b0a:	f04f 33ff 	mov.w	r3, #4294967295
   83b0e:	9304      	str	r3, [sp, #16]
   83b10:	e596      	b.n	83640 <_strtod_r+0x398>
   83b12:	2801      	cmp	r0, #1
   83b14:	f000 81c3 	beq.w	83e9e <_strtod_r+0xbf6>
   83b18:	468c      	mov	ip, r1
   83b1a:	2400      	movs	r4, #0
   83b1c:	4d4c      	ldr	r5, [pc, #304]	; (83c50 <_strtod_r+0x9a8>)
   83b1e:	f04f 0900 	mov.w	r9, #0
   83b22:	f8df 811c 	ldr.w	r8, [pc, #284]	; 83c40 <_strtod_r+0x998>
   83b26:	e675      	b.n	83814 <_strtod_r+0x56c>
   83b28:	2e65      	cmp	r6, #101	; 0x65
   83b2a:	f43f ad26 	beq.w	8357a <_strtod_r+0x2d2>
   83b2e:	f04f 0900 	mov.w	r9, #0
   83b32:	46cc      	mov	ip, r9
   83b34:	f04f 0e01 	mov.w	lr, #1
   83b38:	e45d      	b.n	833f6 <_strtod_r+0x14e>
   83b3a:	9919      	ldr	r1, [sp, #100]	; 0x64
   83b3c:	4845      	ldr	r0, [pc, #276]	; (83c54 <_strtod_r+0x9ac>)
   83b3e:	e009      	b.n	83b54 <_strtod_r+0x8ac>
   83b40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   83b44:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
   83b48:	2c19      	cmp	r4, #25
   83b4a:	bf98      	it	ls
   83b4c:	3320      	addls	r3, #32
   83b4e:	4293      	cmp	r3, r2
   83b50:	f47f abee 	bne.w	83330 <_strtod_r+0x88>
   83b54:	f810 2b01 	ldrb.w	r2, [r0], #1
   83b58:	2a00      	cmp	r2, #0
   83b5a:	d1f1      	bne.n	83b40 <_strtod_r+0x898>
   83b5c:	1c4b      	adds	r3, r1, #1
   83b5e:	9319      	str	r3, [sp, #100]	; 0x64
   83b60:	784b      	ldrb	r3, [r1, #1]
   83b62:	2b28      	cmp	r3, #40	; 0x28
   83b64:	f000 82fd 	beq.w	84162 <_strtod_r+0xeba>
   83b68:	4b3b      	ldr	r3, [pc, #236]	; (83c58 <_strtod_r+0x9b0>)
   83b6a:	9305      	str	r3, [sp, #20]
   83b6c:	2300      	movs	r3, #0
   83b6e:	9304      	str	r3, [sp, #16]
   83b70:	e51c      	b.n	835ac <_strtod_r+0x304>
   83b72:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83b74:	4839      	ldr	r0, [pc, #228]	; (83c5c <_strtod_r+0x9b4>)
   83b76:	e009      	b.n	83b8c <_strtod_r+0x8e4>
   83b78:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83b7c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
   83b80:	2c19      	cmp	r4, #25
   83b82:	bf98      	it	ls
   83b84:	3320      	addls	r3, #32
   83b86:	428b      	cmp	r3, r1
   83b88:	f47f abd2 	bne.w	83330 <_strtod_r+0x88>
   83b8c:	f810 1b01 	ldrb.w	r1, [r0], #1
   83b90:	2900      	cmp	r1, #0
   83b92:	d1f1      	bne.n	83b78 <_strtod_r+0x8d0>
   83b94:	9219      	str	r2, [sp, #100]	; 0x64
   83b96:	4615      	mov	r5, r2
   83b98:	4831      	ldr	r0, [pc, #196]	; (83c60 <_strtod_r+0x9b8>)
   83b9a:	e009      	b.n	83bb0 <_strtod_r+0x908>
   83b9c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83ba0:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
   83ba4:	2c19      	cmp	r4, #25
   83ba6:	bf98      	it	ls
   83ba8:	3320      	addls	r3, #32
   83baa:	428b      	cmp	r3, r1
   83bac:	f040 8298 	bne.w	840e0 <_strtod_r+0xe38>
   83bb0:	f810 1b01 	ldrb.w	r1, [r0], #1
   83bb4:	2900      	cmp	r1, #0
   83bb6:	d1f1      	bne.n	83b9c <_strtod_r+0x8f4>
   83bb8:	3201      	adds	r2, #1
   83bba:	9219      	str	r2, [sp, #100]	; 0x64
   83bbc:	4b29      	ldr	r3, [pc, #164]	; (83c64 <_strtod_r+0x9bc>)
   83bbe:	9305      	str	r3, [sp, #20]
   83bc0:	2300      	movs	r3, #0
   83bc2:	9304      	str	r3, [sp, #16]
   83bc4:	e4f2      	b.n	835ac <_strtod_r+0x304>
   83bc6:	3101      	adds	r1, #1
   83bc8:	f040 82b8 	bne.w	8413c <_strtod_r+0xe94>
   83bcc:	981a      	ldr	r0, [sp, #104]	; 0x68
   83bce:	4b25      	ldr	r3, [pc, #148]	; (83c64 <_strtod_r+0x9bc>)
   83bd0:	2200      	movs	r2, #0
   83bd2:	9305      	str	r3, [sp, #20]
   83bd4:	2322      	movs	r3, #34	; 0x22
   83bd6:	9204      	str	r2, [sp, #16]
   83bd8:	f8cb 3000 	str.w	r3, [fp]
   83bdc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   83be0:	4601      	mov	r1, r0
   83be2:	4658      	mov	r0, fp
   83be4:	f002 ff26 	bl	86a34 <_Bfree>
   83be8:	4658      	mov	r0, fp
   83bea:	4651      	mov	r1, sl
   83bec:	f002 ff22 	bl	86a34 <_Bfree>
   83bf0:	4658      	mov	r0, fp
   83bf2:	4639      	mov	r1, r7
   83bf4:	f002 ff1e 	bl	86a34 <_Bfree>
   83bf8:	4658      	mov	r0, fp
   83bfa:	9910      	ldr	r1, [sp, #64]	; 0x40
   83bfc:	f002 ff1a 	bl	86a34 <_Bfree>
   83c00:	4658      	mov	r0, fp
   83c02:	9907      	ldr	r1, [sp, #28]
   83c04:	f002 ff16 	bl	86a34 <_Bfree>
   83c08:	e44c      	b.n	834a4 <_strtod_r+0x1fc>
   83c0a:	9a06      	ldr	r2, [sp, #24]
   83c0c:	ab1a      	add	r3, sp, #104	; 0x68
   83c0e:	9201      	str	r2, [sp, #4]
   83c10:	9300      	str	r3, [sp, #0]
   83c12:	4658      	mov	r0, fp
   83c14:	a919      	add	r1, sp, #100	; 0x64
   83c16:	4a14      	ldr	r2, [pc, #80]	; (83c68 <_strtod_r+0x9c0>)
   83c18:	ab1b      	add	r3, sp, #108	; 0x6c
   83c1a:	f001 ffd9 	bl	85bd0 <__gethex>
   83c1e:	f010 0607 	ands.w	r6, r0, #7
   83c22:	4605      	mov	r5, r0
   83c24:	f43f ac3a 	beq.w	8349c <_strtod_r+0x1f4>
   83c28:	2e06      	cmp	r6, #6
   83c2a:	f040 8147 	bne.w	83ebc <_strtod_r+0xc14>
   83c2e:	3401      	adds	r4, #1
   83c30:	2300      	movs	r3, #0
   83c32:	9419      	str	r4, [sp, #100]	; 0x64
   83c34:	f04f 0800 	mov.w	r8, #0
   83c38:	f04f 0900 	mov.w	r9, #0
   83c3c:	9306      	str	r3, [sp, #24]
   83c3e:	e431      	b.n	834a4 <_strtod_r+0x1fc>
   83c40:	3ff00000 	.word	0x3ff00000
   83c44:	3fe00000 	.word	0x3fe00000
   83c48:	7ca00000 	.word	0x7ca00000
   83c4c:	7fefffff 	.word	0x7fefffff
   83c50:	bff00000 	.word	0xbff00000
   83c54:	00088b50 	.word	0x00088b50
   83c58:	fff80000 	.word	0xfff80000
   83c5c:	00088b44 	.word	0x00088b44
   83c60:	00088b48 	.word	0x00088b48
   83c64:	7ff00000 	.word	0x7ff00000
   83c68:	00088b54 	.word	0x00088b54
   83c6c:	00088ec8 	.word	0x00088ec8
   83c70:	f1ac 7354 	sub.w	r3, ip, #55574528	; 0x3500000
   83c74:	9305      	str	r3, [sp, #20]
   83c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   83c7a:	4610      	mov	r0, r2
   83c7c:	4619      	mov	r1, r3
   83c7e:	f003 f9a7 	bl	86fd0 <__ulp>
   83c82:	4602      	mov	r2, r0
   83c84:	460b      	mov	r3, r1
   83c86:	4620      	mov	r0, r4
   83c88:	4629      	mov	r1, r5
   83c8a:	f004 f94f 	bl	87f2c <__aeabi_dmul>
   83c8e:	4602      	mov	r2, r0
   83c90:	460b      	mov	r3, r1
   83c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83c96:	f003 ff97 	bl	87bc8 <__adddf3>
   83c9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   83c9e:	0d1b      	lsrs	r3, r3, #20
   83ca0:	4ab3      	ldr	r2, [pc, #716]	; (83f70 <_strtod_r+0xcc8>)
   83ca2:	051b      	lsls	r3, r3, #20
   83ca4:	4293      	cmp	r3, r2
   83ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83caa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83cae:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   83cb2:	f240 80a9 	bls.w	83e08 <_strtod_r+0xb60>
   83cb6:	4baf      	ldr	r3, [pc, #700]	; (83f74 <_strtod_r+0xccc>)
   83cb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   83cba:	429a      	cmp	r2, r3
   83cbc:	f000 81eb 	beq.w	84096 <_strtod_r+0xdee>
   83cc0:	4bac      	ldr	r3, [pc, #688]	; (83f74 <_strtod_r+0xccc>)
   83cc2:	9305      	str	r3, [sp, #20]
   83cc4:	f04f 33ff 	mov.w	r3, #4294967295
   83cc8:	9304      	str	r3, [sp, #16]
   83cca:	e5eb      	b.n	838a4 <_strtod_r+0x5fc>
   83ccc:	4baa      	ldr	r3, [pc, #680]	; (83f78 <_strtod_r+0xcd0>)
   83cce:	2200      	movs	r2, #0
   83cd0:	9305      	str	r3, [sp, #20]
   83cd2:	9204      	str	r2, [sp, #16]
   83cd4:	2322      	movs	r3, #34	; 0x22
   83cd6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   83cda:	f8cb 3000 	str.w	r3, [fp]
   83cde:	f7ff bbe1 	b.w	834a4 <_strtod_r+0x1fc>
   83ce2:	4641      	mov	r1, r8
   83ce4:	4648      	mov	r0, r9
   83ce6:	f004 fbbb 	bl	88460 <__aeabi_d2iz>
   83cea:	f004 f8b9 	bl	87e60 <__aeabi_i2d>
   83cee:	460b      	mov	r3, r1
   83cf0:	4602      	mov	r2, r0
   83cf2:	4641      	mov	r1, r8
   83cf4:	4648      	mov	r0, r9
   83cf6:	f003 ff65 	bl	87bc4 <__aeabi_dsub>
   83cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83cfc:	4680      	mov	r8, r0
   83cfe:	4689      	mov	r9, r1
   83d00:	b983      	cbnz	r3, 83d24 <_strtod_r+0xa7c>
   83d02:	9b04      	ldr	r3, [sp, #16]
   83d04:	b973      	cbnz	r3, 83d24 <_strtod_r+0xa7c>
   83d06:	f3c4 0413 	ubfx	r4, r4, #0, #20
   83d0a:	b95c      	cbnz	r4, 83d24 <_strtod_r+0xa7c>
   83d0c:	a392      	add	r3, pc, #584	; (adr r3, 83f58 <_strtod_r+0xcb0>)
   83d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83d12:	f004 fb7d 	bl	88410 <__aeabi_dcmplt>
   83d16:	2800      	cmp	r0, #0
   83d18:	f43f adc4 	beq.w	838a4 <_strtod_r+0x5fc>
   83d1c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   83d20:	981a      	ldr	r0, [sp, #104]	; 0x68
   83d22:	e75d      	b.n	83be0 <_strtod_r+0x938>
   83d24:	a38e      	add	r3, pc, #568	; (adr r3, 83f60 <_strtod_r+0xcb8>)
   83d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   83d2a:	4640      	mov	r0, r8
   83d2c:	4649      	mov	r1, r9
   83d2e:	f004 fb6f 	bl	88410 <__aeabi_dcmplt>
   83d32:	2800      	cmp	r0, #0
   83d34:	d1f2      	bne.n	83d1c <_strtod_r+0xa74>
   83d36:	a38c      	add	r3, pc, #560	; (adr r3, 83f68 <_strtod_r+0xcc0>)
   83d38:	e9d3 2300 	ldrd	r2, r3, [r3]
   83d3c:	4640      	mov	r0, r8
   83d3e:	4649      	mov	r1, r9
   83d40:	f004 fb84 	bl	8844c <__aeabi_dcmpgt>
   83d44:	2800      	cmp	r0, #0
   83d46:	f43f adad 	beq.w	838a4 <_strtod_r+0x5fc>
   83d4a:	e7e7      	b.n	83d1c <_strtod_r+0xa74>
   83d4c:	f43f ac76 	beq.w	8363c <_strtod_r+0x394>
   83d50:	f1c8 0700 	rsb	r7, r8, #0
   83d54:	f017 020f 	ands.w	r2, r7, #15
   83d58:	d00a      	beq.n	83d70 <_strtod_r+0xac8>
   83d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83d5e:	4b87      	ldr	r3, [pc, #540]	; (83f7c <_strtod_r+0xcd4>)
   83d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83d64:	e9d3 2300 	ldrd	r2, r3, [r3]
   83d68:	f004 fa0a 	bl	88180 <__aeabi_ddiv>
   83d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83d70:	113f      	asrs	r7, r7, #4
   83d72:	f43f ac63 	beq.w	8363c <_strtod_r+0x394>
   83d76:	2f1f      	cmp	r7, #31
   83d78:	dc39      	bgt.n	83dee <_strtod_r+0xb46>
   83d7a:	f017 0310 	ands.w	r3, r7, #16
   83d7e:	f000 81e7 	beq.w	84150 <_strtod_r+0xea8>
   83d82:	236a      	movs	r3, #106	; 0x6a
   83d84:	2f00      	cmp	r7, #0
   83d86:	bfd8      	it	le
   83d88:	930a      	strle	r3, [sp, #40]	; 0x28
   83d8a:	dd14      	ble.n	83db6 <_strtod_r+0xb0e>
   83d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83d90:	4e7b      	ldr	r6, [pc, #492]	; (83f80 <_strtod_r+0xcd8>)
   83d92:	930a      	str	r3, [sp, #40]	; 0x28
   83d94:	f017 0f01 	tst.w	r7, #1
   83d98:	ea4f 0767 	mov.w	r7, r7, asr #1
   83d9c:	d003      	beq.n	83da6 <_strtod_r+0xafe>
   83d9e:	e9d6 2300 	ldrd	r2, r3, [r6]
   83da2:	f004 f8c3 	bl	87f2c <__aeabi_dmul>
   83da6:	2f00      	cmp	r7, #0
   83da8:	f106 0608 	add.w	r6, r6, #8
   83dac:	dcf2      	bgt.n	83d94 <_strtod_r+0xaec>
   83dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83db4:	b193      	cbz	r3, 83ddc <_strtod_r+0xb34>
   83db6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83dba:	f3c1 530a 	ubfx	r3, r1, #20, #11
   83dbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   83dc2:	2b00      	cmp	r3, #0
   83dc4:	dd0a      	ble.n	83ddc <_strtod_r+0xb34>
   83dc6:	2b1f      	cmp	r3, #31
   83dc8:	f340 81e8 	ble.w	8419c <_strtod_r+0xef4>
   83dcc:	2200      	movs	r2, #0
   83dce:	2b34      	cmp	r3, #52	; 0x34
   83dd0:	9204      	str	r2, [sp, #16]
   83dd2:	f340 81eb 	ble.w	841ac <_strtod_r+0xf04>
   83dd6:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   83dda:	9305      	str	r3, [sp, #20]
   83ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83de0:	2200      	movs	r2, #0
   83de2:	2300      	movs	r3, #0
   83de4:	f004 fb0a 	bl	883fc <__aeabi_dcmpeq>
   83de8:	2800      	cmp	r0, #0
   83dea:	f43f ac29 	beq.w	83640 <_strtod_r+0x398>
   83dee:	2322      	movs	r3, #34	; 0x22
   83df0:	f8cb 3000 	str.w	r3, [fp]
   83df4:	f04f 0800 	mov.w	r8, #0
   83df8:	f04f 0900 	mov.w	r9, #0
   83dfc:	f7ff bb52 	b.w	834a4 <_strtod_r+0x1fc>
   83e00:	f644 631f 	movw	r3, #19999	; 0x4e1f
   83e04:	f7ff bbb0 	b.w	83568 <_strtod_r+0x2c0>
   83e08:	9b05      	ldr	r3, [sp, #20]
   83e0a:	f103 7454 	add.w	r4, r3, #55574528	; 0x3500000
   83e0e:	9405      	str	r4, [sp, #20]
   83e10:	e541      	b.n	83896 <_strtod_r+0x5ee>
   83e12:	9a07      	ldr	r2, [sp, #28]
   83e14:	f1c9 0325 	rsb	r3, r9, #37	; 0x25
   83e18:	429a      	cmp	r2, r3
   83e1a:	f73f abf5 	bgt.w	83608 <_strtod_r+0x360>
   83e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   83e22:	4c56      	ldr	r4, [pc, #344]	; (83f7c <_strtod_r+0xcd4>)
   83e24:	f1c9 090f 	rsb	r9, r9, #15
   83e28:	eb04 01c9 	add.w	r1, r4, r9, lsl #3
   83e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
   83e30:	f004 f87c 	bl	87f2c <__aeabi_dmul>
   83e34:	9b07      	ldr	r3, [sp, #28]
   83e36:	ebc9 0903 	rsb	r9, r9, r3
   83e3a:	eb04 04c9 	add.w	r4, r4, r9, lsl #3
   83e3e:	e9d4 2300 	ldrd	r2, r3, [r4]
   83e42:	f004 f873 	bl	87f2c <__aeabi_dmul>
   83e46:	4680      	mov	r8, r0
   83e48:	4689      	mov	r9, r1
   83e4a:	f7ff bb2b 	b.w	834a4 <_strtod_r+0x1fc>
   83e4e:	2b01      	cmp	r3, #1
   83e50:	449c      	add	ip, r3
   83e52:	d014      	beq.n	83e7e <_strtod_r+0xbd6>
   83e54:	4448      	add	r0, r9
   83e56:	e002      	b.n	83e5e <_strtod_r+0xbb6>
   83e58:	005d      	lsls	r5, r3, #1
   83e5a:	4581      	cmp	r9, r0
   83e5c:	d010      	beq.n	83e80 <_strtod_r+0xbd8>
   83e5e:	f109 0901 	add.w	r9, r9, #1
   83e62:	f109 33ff 	add.w	r3, r9, #4294967295
   83e66:	2b08      	cmp	r3, #8
   83e68:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   83e6c:	ddf4      	ble.n	83e58 <_strtod_r+0xbb0>
   83e6e:	f1b9 0f10 	cmp.w	r9, #16
   83e72:	bfdc      	itt	le
   83e74:	eb0a 0a8a 	addle.w	sl, sl, sl, lsl #2
   83e78:	ea4f 0a4a 	movle.w	sl, sl, lsl #1
   83e7c:	e7ed      	b.n	83e5a <_strtod_r+0xbb2>
   83e7e:	4648      	mov	r0, r9
   83e80:	2808      	cmp	r0, #8
   83e82:	f100 0901 	add.w	r9, r0, #1
   83e86:	dc7f      	bgt.n	83f88 <_strtod_r+0xce0>
   83e88:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83e8a:	f7ff bbb4 	b.w	835f6 <_strtod_r+0x34e>
   83e8e:	464a      	mov	r2, r9
   83e90:	4643      	mov	r3, r8
   83e92:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   83e96:	e4e6      	b.n	83866 <_strtod_r+0x5be>
   83e98:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 83f84 <_strtod_r+0xcdc>
   83e9c:	e4da      	b.n	83854 <_strtod_r+0x5ac>
   83e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   83ea2:	469c      	mov	ip, r3
   83ea4:	2b00      	cmp	r3, #0
   83ea6:	f47f ae38 	bne.w	83b1a <_strtod_r+0x872>
   83eaa:	2322      	movs	r3, #34	; 0x22
   83eac:	f8cb 3000 	str.w	r3, [fp]
   83eb0:	981a      	ldr	r0, [sp, #104]	; 0x68
   83eb2:	f04f 0800 	mov.w	r8, #0
   83eb6:	f04f 0900 	mov.w	r9, #0
   83eba:	e691      	b.n	83be0 <_strtod_r+0x938>
   83ebc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   83ebe:	b13a      	cbz	r2, 83ed0 <_strtod_r+0xc28>
   83ec0:	a81c      	add	r0, sp, #112	; 0x70
   83ec2:	2135      	movs	r1, #53	; 0x35
   83ec4:	f003 f98e 	bl	871e4 <__copybits>
   83ec8:	4658      	mov	r0, fp
   83eca:	991a      	ldr	r1, [sp, #104]	; 0x68
   83ecc:	f002 fdb2 	bl	86a34 <_Bfree>
   83ed0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   83ed2:	2e06      	cmp	r6, #6
   83ed4:	f63f ab64 	bhi.w	835a0 <_strtod_r+0x2f8>
   83ed8:	a201      	add	r2, pc, #4	; (adr r2, 83ee0 <_strtod_r+0xc38>)
   83eda:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
   83ede:	bf00      	nop
   83ee0:	00083f2d 	.word	0x00083f2d
   83ee4:	00083f15 	.word	0x00083f15
   83ee8:	00083f09 	.word	0x00083f09
   83eec:	00083efd 	.word	0x00083efd
   83ef0:	00083595 	.word	0x00083595
   83ef4:	00083f15 	.word	0x00083f15
   83ef8:	00083f2d 	.word	0x00083f2d
   83efc:	4b1e      	ldr	r3, [pc, #120]	; (83f78 <_strtod_r+0xcd0>)
   83efe:	9305      	str	r3, [sp, #20]
   83f00:	2300      	movs	r3, #0
   83f02:	9304      	str	r3, [sp, #16]
   83f04:	f7ff bb4c 	b.w	835a0 <_strtod_r+0x2f8>
   83f08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   83f0a:	9304      	str	r3, [sp, #16]
   83f0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   83f0e:	9305      	str	r3, [sp, #20]
   83f10:	f7ff bb46 	b.w	835a0 <_strtod_r+0x2f8>
   83f14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   83f16:	991c      	ldr	r1, [sp, #112]	; 0x70
   83f18:	f203 4333 	addw	r3, r3, #1075	; 0x433
   83f1c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   83f20:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
   83f24:	9104      	str	r1, [sp, #16]
   83f26:	9305      	str	r3, [sp, #20]
   83f28:	f7ff bb3a 	b.w	835a0 <_strtod_r+0x2f8>
   83f2c:	2300      	movs	r3, #0
   83f2e:	9305      	str	r3, [sp, #20]
   83f30:	9304      	str	r3, [sp, #16]
   83f32:	f7ff bb35 	b.w	835a0 <_strtod_r+0x2f8>
   83f36:	3316      	adds	r3, #22
   83f38:	f6ff ab66 	blt.w	83608 <_strtod_r+0x360>
   83f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83f40:	9a07      	ldr	r2, [sp, #28]
   83f42:	4b0e      	ldr	r3, [pc, #56]	; (83f7c <_strtod_r+0xcd4>)
   83f44:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
   83f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   83f4c:	f004 f918 	bl	88180 <__aeabi_ddiv>
   83f50:	4680      	mov	r8, r0
   83f52:	4689      	mov	r9, r1
   83f54:	f7ff baa6 	b.w	834a4 <_strtod_r+0x1fc>
   83f58:	94a03595 	.word	0x94a03595
   83f5c:	3fcfffff 	.word	0x3fcfffff
   83f60:	94a03595 	.word	0x94a03595
   83f64:	3fdfffff 	.word	0x3fdfffff
   83f68:	35afe535 	.word	0x35afe535
   83f6c:	3fe00000 	.word	0x3fe00000
   83f70:	7c9fffff 	.word	0x7c9fffff
   83f74:	7fefffff 	.word	0x7fefffff
   83f78:	7ff00000 	.word	0x7ff00000
   83f7c:	00088df0 	.word	0x00088df0
   83f80:	00088b08 	.word	0x00088b08
   83f84:	3ff00000 	.word	0x3ff00000
   83f88:	f1b9 0f10 	cmp.w	r9, #16
   83f8c:	bfd7      	itett	le
   83f8e:	eb0a 0a8a 	addle.w	sl, sl, sl, lsl #2
   83f92:	9b19      	ldrgt	r3, [sp, #100]	; 0x64
   83f94:	9b19      	ldrle	r3, [sp, #100]	; 0x64
   83f96:	eb02 0a4a 	addle.w	sl, r2, sl, lsl #1
   83f9a:	2000      	movs	r0, #0
   83f9c:	e50c      	b.n	839b8 <_strtod_r+0x710>
   83f9e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   83fa0:	46ae      	mov	lr, r5
   83fa2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   83fa6:	2e00      	cmp	r6, #0
   83fa8:	f000 8088 	beq.w	840bc <_strtod_r+0xe14>
   83fac:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   83fb0:	4b82      	ldr	r3, [pc, #520]	; (841bc <_strtod_r+0xf14>)
   83fb2:	f3c5 0113 	ubfx	r1, r5, #0, #20
   83fb6:	4299      	cmp	r1, r3
   83fb8:	462a      	mov	r2, r5
   83fba:	f000 80a9 	beq.w	84110 <_strtod_r+0xe68>
   83fbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83fc0:	2b00      	cmp	r3, #0
   83fc2:	f000 8088 	beq.w	840d6 <_strtod_r+0xe2e>
   83fc6:	9a05      	ldr	r2, [sp, #20]
   83fc8:	4213      	tst	r3, r2
   83fca:	d00d      	beq.n	83fe8 <_strtod_r+0xd40>
   83fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83fd2:	2e00      	cmp	r6, #0
   83fd4:	f000 808a 	beq.w	840ec <_strtod_r+0xe44>
   83fd8:	f7ff f944 	bl	83264 <sulp>
   83fdc:	4642      	mov	r2, r8
   83fde:	464b      	mov	r3, r9
   83fe0:	f003 fdf2 	bl	87bc8 <__adddf3>
   83fe4:	4680      	mov	r8, r0
   83fe6:	4689      	mov	r9, r1
   83fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83fea:	b1bb      	cbz	r3, 8401c <_strtod_r+0xd74>
   83fec:	4b74      	ldr	r3, [pc, #464]	; (841c0 <_strtod_r+0xf18>)
   83fee:	4640      	mov	r0, r8
   83ff0:	9313      	str	r3, [sp, #76]	; 0x4c
   83ff2:	2300      	movs	r3, #0
   83ff4:	9312      	str	r3, [sp, #72]	; 0x48
   83ff6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   83ffa:	4649      	mov	r1, r9
   83ffc:	f003 ff96 	bl	87f2c <__aeabi_dmul>
   84000:	4602      	mov	r2, r0
   84002:	460b      	mov	r3, r1
   84004:	4680      	mov	r8, r0
   84006:	4689      	mov	r9, r1
   84008:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8400c:	b931      	cbnz	r1, 8401c <_strtod_r+0xd74>
   8400e:	9b04      	ldr	r3, [sp, #16]
   84010:	b923      	cbnz	r3, 8401c <_strtod_r+0xd74>
   84012:	2322      	movs	r3, #34	; 0x22
   84014:	981a      	ldr	r0, [sp, #104]	; 0x68
   84016:	f8cb 3000 	str.w	r3, [fp]
   8401a:	e5e1      	b.n	83be0 <_strtod_r+0x938>
   8401c:	981a      	ldr	r0, [sp, #104]	; 0x68
   8401e:	e5df      	b.n	83be0 <_strtod_r+0x938>
   84020:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   84022:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   84026:	2e00      	cmp	r6, #0
   84028:	d1de      	bne.n	83fe8 <_strtod_r+0xd40>
   8402a:	9b04      	ldr	r3, [sp, #16]
   8402c:	2b00      	cmp	r3, #0
   8402e:	d1db      	bne.n	83fe8 <_strtod_r+0xd40>
   84030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84034:	f3c1 0313 	ubfx	r3, r1, #0, #20
   84038:	460c      	mov	r4, r1
   8403a:	2b00      	cmp	r3, #0
   8403c:	d1d4      	bne.n	83fe8 <_strtod_r+0xd40>
   8403e:	9b05      	ldr	r3, [sp, #20]
   84040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   84044:	0d1b      	lsrs	r3, r3, #20
   84046:	051b      	lsls	r3, r3, #20
   84048:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   8404c:	d9cc      	bls.n	83fe8 <_strtod_r+0xd40>
   8404e:	9a07      	ldr	r2, [sp, #28]
   84050:	6953      	ldr	r3, [r2, #20]
   84052:	b913      	cbnz	r3, 8405a <_strtod_r+0xdb2>
   84054:	6913      	ldr	r3, [r2, #16]
   84056:	2b01      	cmp	r3, #1
   84058:	ddc6      	ble.n	83fe8 <_strtod_r+0xd40>
   8405a:	9907      	ldr	r1, [sp, #28]
   8405c:	2201      	movs	r2, #1
   8405e:	4658      	mov	r0, fp
   84060:	f002 fec8 	bl	86df4 <__lshift>
   84064:	4639      	mov	r1, r7
   84066:	9007      	str	r0, [sp, #28]
   84068:	f002 ff1c 	bl	86ea4 <__mcmp>
   8406c:	2800      	cmp	r0, #0
   8406e:	ddbb      	ble.n	83fe8 <_strtod_r+0xd40>
   84070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84072:	2b00      	cmp	r3, #0
   84074:	f040 8087 	bne.w	84186 <_strtod_r+0xede>
   84078:	4b52      	ldr	r3, [pc, #328]	; (841c4 <_strtod_r+0xf1c>)
   8407a:	4023      	ands	r3, r4
   8407c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   84080:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   84084:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   84088:	9305      	str	r3, [sp, #20]
   8408a:	f04f 33ff 	mov.w	r3, #4294967295
   8408e:	9304      	str	r3, [sp, #16]
   84090:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   84094:	e7a8      	b.n	83fe8 <_strtod_r+0xd40>
   84096:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84098:	3301      	adds	r3, #1
   8409a:	f47f ae11 	bne.w	83cc0 <_strtod_r+0xa18>
   8409e:	e595      	b.n	83bcc <_strtod_r+0x924>
   840a0:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
   840a4:	9305      	str	r3, [sp, #20]
   840a6:	f7ff bac9 	b.w	8363c <_strtod_r+0x394>
   840aa:	4b47      	ldr	r3, [pc, #284]	; (841c8 <_strtod_r+0xf20>)
   840ac:	2200      	movs	r2, #0
   840ae:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   840b2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   840b6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 841d4 <_strtod_r+0xf2c>
   840ba:	e46c      	b.n	83996 <_strtod_r+0x6ee>
   840bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   840c0:	f3c1 0313 	ubfx	r3, r1, #0, #20
   840c4:	460c      	mov	r4, r1
   840c6:	2b00      	cmp	r3, #0
   840c8:	f47f af79 	bne.w	83fbe <_strtod_r+0xd16>
   840cc:	9b04      	ldr	r3, [sp, #16]
   840ce:	2b00      	cmp	r3, #0
   840d0:	f47f af75 	bne.w	83fbe <_strtod_r+0xd16>
   840d4:	e7cc      	b.n	84070 <_strtod_r+0xdc8>
   840d6:	9a04      	ldr	r2, [sp, #16]
   840d8:	ea1e 0f02 	tst.w	lr, r2
   840dc:	d084      	beq.n	83fe8 <_strtod_r+0xd40>
   840de:	e775      	b.n	83fcc <_strtod_r+0xd24>
   840e0:	1c6b      	adds	r3, r5, #1
   840e2:	9319      	str	r3, [sp, #100]	; 0x64
   840e4:	e56a      	b.n	83bbc <_strtod_r+0x914>
   840e6:	f04f 0a00 	mov.w	sl, #0
   840ea:	e4ef      	b.n	83acc <_strtod_r+0x824>
   840ec:	f7ff f8ba 	bl	83264 <sulp>
   840f0:	4602      	mov	r2, r0
   840f2:	460b      	mov	r3, r1
   840f4:	4640      	mov	r0, r8
   840f6:	4649      	mov	r1, r9
   840f8:	f003 fd64 	bl	87bc4 <__aeabi_dsub>
   840fc:	2200      	movs	r2, #0
   840fe:	2300      	movs	r3, #0
   84100:	4680      	mov	r8, r0
   84102:	4689      	mov	r9, r1
   84104:	f004 f97a 	bl	883fc <__aeabi_dcmpeq>
   84108:	2800      	cmp	r0, #0
   8410a:	f47f aece 	bne.w	83eaa <_strtod_r+0xc02>
   8410e:	e76b      	b.n	83fe8 <_strtod_r+0xd40>
   84110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84112:	9904      	ldr	r1, [sp, #16]
   84114:	b313      	cbz	r3, 8415c <_strtod_r+0xeb4>
   84116:	4b2b      	ldr	r3, [pc, #172]	; (841c4 <_strtod_r+0xf1c>)
   84118:	402b      	ands	r3, r5
   8411a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   8411e:	d81d      	bhi.n	8415c <_strtod_r+0xeb4>
   84120:	0d1b      	lsrs	r3, r3, #20
   84122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   84126:	f04f 30ff 	mov.w	r0, #4294967295
   8412a:	fa00 f303 	lsl.w	r3, r0, r3
   8412e:	4299      	cmp	r1, r3
   84130:	f47f af45 	bne.w	83fbe <_strtod_r+0xd16>
   84134:	4b25      	ldr	r3, [pc, #148]	; (841cc <_strtod_r+0xf24>)
   84136:	429a      	cmp	r2, r3
   84138:	f43f ad45 	beq.w	83bc6 <_strtod_r+0x91e>
   8413c:	4b21      	ldr	r3, [pc, #132]	; (841c4 <_strtod_r+0xf1c>)
   8413e:	4013      	ands	r3, r2
   84140:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   84144:	9305      	str	r3, [sp, #20]
   84146:	2300      	movs	r3, #0
   84148:	9304      	str	r3, [sp, #16]
   8414a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   8414e:	e74b      	b.n	83fe8 <_strtod_r+0xd40>
   84150:	2f00      	cmp	r7, #0
   84152:	bfd8      	it	le
   84154:	930a      	strle	r3, [sp, #40]	; 0x28
   84156:	f73f ae19 	bgt.w	83d8c <_strtod_r+0xae4>
   8415a:	e63f      	b.n	83ddc <_strtod_r+0xb34>
   8415c:	f04f 33ff 	mov.w	r3, #4294967295
   84160:	e7e5      	b.n	8412e <_strtod_r+0xe86>
   84162:	a819      	add	r0, sp, #100	; 0x64
   84164:	491a      	ldr	r1, [pc, #104]	; (841d0 <_strtod_r+0xf28>)
   84166:	aa1c      	add	r2, sp, #112	; 0x70
   84168:	f001 ffbc 	bl	860e4 <__hexnan>
   8416c:	2805      	cmp	r0, #5
   8416e:	f47f acfb 	bne.w	83b68 <_strtod_r+0x8c0>
   84172:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   84174:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   84178:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   8417c:	9305      	str	r3, [sp, #20]
   8417e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   84180:	9304      	str	r3, [sp, #16]
   84182:	f7ff ba13 	b.w	835ac <_strtod_r+0x304>
   84186:	4b0f      	ldr	r3, [pc, #60]	; (841c4 <_strtod_r+0xf1c>)
   84188:	4023      	ands	r3, r4
   8418a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   8418e:	f73f af75 	bgt.w	8407c <_strtod_r+0xdd4>
   84192:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   84196:	f73f af29 	bgt.w	83fec <_strtod_r+0xd44>
   8419a:	e686      	b.n	83eaa <_strtod_r+0xc02>
   8419c:	f04f 32ff 	mov.w	r2, #4294967295
   841a0:	fa02 f303 	lsl.w	r3, r2, r3
   841a4:	9a04      	ldr	r2, [sp, #16]
   841a6:	401a      	ands	r2, r3
   841a8:	9204      	str	r2, [sp, #16]
   841aa:	e617      	b.n	83ddc <_strtod_r+0xb34>
   841ac:	3b20      	subs	r3, #32
   841ae:	f04f 32ff 	mov.w	r2, #4294967295
   841b2:	fa02 f303 	lsl.w	r3, r2, r3
   841b6:	400b      	ands	r3, r1
   841b8:	9305      	str	r3, [sp, #20]
   841ba:	e60f      	b.n	83ddc <_strtod_r+0xb34>
   841bc:	000fffff 	.word	0x000fffff
   841c0:	39500000 	.word	0x39500000
   841c4:	7ff00000 	.word	0x7ff00000
   841c8:	bfe00000 	.word	0xbfe00000
   841cc:	7fefffff 	.word	0x7fefffff
   841d0:	00088b30 	.word	0x00088b30
   841d4:	3fe00000 	.word	0x3fe00000

000841d8 <strtod>:
   841d8:	4b02      	ldr	r3, [pc, #8]	; (841e4 <strtod+0xc>)
   841da:	460a      	mov	r2, r1
   841dc:	4601      	mov	r1, r0
   841de:	6818      	ldr	r0, [r3, #0]
   841e0:	f7ff b862 	b.w	832a8 <_strtod_r>
   841e4:	20070568 	.word	0x20070568

000841e8 <_strtol_r>:
   841e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   841ec:	4c44      	ldr	r4, [pc, #272]	; (84300 <_strtol_r+0x118>)
   841ee:	4683      	mov	fp, r0
   841f0:	460e      	mov	r6, r1
   841f2:	f8d4 e000 	ldr.w	lr, [r4]
   841f6:	e000      	b.n	841fa <_strtol_r+0x12>
   841f8:	4626      	mov	r6, r4
   841fa:	4634      	mov	r4, r6
   841fc:	f814 5b01 	ldrb.w	r5, [r4], #1
   84200:	eb0e 0005 	add.w	r0, lr, r5
   84204:	7840      	ldrb	r0, [r0, #1]
   84206:	f000 0008 	and.w	r0, r0, #8
   8420a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
   8420e:	2800      	cmp	r0, #0
   84210:	d1f2      	bne.n	841f8 <_strtol_r+0x10>
   84212:	2d2d      	cmp	r5, #45	; 0x2d
   84214:	d04b      	beq.n	842ae <_strtol_r+0xc6>
   84216:	2d2b      	cmp	r5, #43	; 0x2b
   84218:	bf04      	itt	eq
   8421a:	7875      	ldrbeq	r5, [r6, #1]
   8421c:	1cb4      	addeq	r4, r6, #2
   8421e:	b11b      	cbz	r3, 84228 <_strtol_r+0x40>
   84220:	2b10      	cmp	r3, #16
   84222:	d060      	beq.n	842e6 <_strtol_r+0xfe>
   84224:	469a      	mov	sl, r3
   84226:	e003      	b.n	84230 <_strtol_r+0x48>
   84228:	2d30      	cmp	r5, #48	; 0x30
   8422a:	d054      	beq.n	842d6 <_strtol_r+0xee>
   8422c:	230a      	movs	r3, #10
   8422e:	469a      	mov	sl, r3
   84230:	f1b8 0f00 	cmp.w	r8, #0
   84234:	bf14      	ite	ne
   84236:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   8423a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8423e:	fbb0 f9fa 	udiv	r9, r0, sl
   84242:	2700      	movs	r7, #0
   84244:	46bc      	mov	ip, r7
   84246:	fb0a 0019 	mls	r0, sl, r9, r0
   8424a:	e00c      	b.n	84266 <_strtol_r+0x7e>
   8424c:	3d30      	subs	r5, #48	; 0x30
   8424e:	42ab      	cmp	r3, r5
   84250:	dd19      	ble.n	84286 <_strtol_r+0x9e>
   84252:	1c7e      	adds	r6, r7, #1
   84254:	d005      	beq.n	84262 <_strtol_r+0x7a>
   84256:	45cc      	cmp	ip, r9
   84258:	d824      	bhi.n	842a4 <_strtol_r+0xbc>
   8425a:	d021      	beq.n	842a0 <_strtol_r+0xb8>
   8425c:	fb0a 5c0c 	mla	ip, sl, ip, r5
   84260:	2701      	movs	r7, #1
   84262:	f814 5b01 	ldrb.w	r5, [r4], #1
   84266:	eb0e 0605 	add.w	r6, lr, r5
   8426a:	7876      	ldrb	r6, [r6, #1]
   8426c:	f016 0f04 	tst.w	r6, #4
   84270:	d1ec      	bne.n	8424c <_strtol_r+0x64>
   84272:	f016 0603 	ands.w	r6, r6, #3
   84276:	d006      	beq.n	84286 <_strtol_r+0x9e>
   84278:	2e01      	cmp	r6, #1
   8427a:	bf0c      	ite	eq
   8427c:	2637      	moveq	r6, #55	; 0x37
   8427e:	2657      	movne	r6, #87	; 0x57
   84280:	1bad      	subs	r5, r5, r6
   84282:	42ab      	cmp	r3, r5
   84284:	dce5      	bgt.n	84252 <_strtol_r+0x6a>
   84286:	1c7b      	adds	r3, r7, #1
   84288:	d016      	beq.n	842b8 <_strtol_r+0xd0>
   8428a:	f1c8 0000 	rsb	r0, r8, #0
   8428e:	ea8c 0000 	eor.w	r0, ip, r0
   84292:	4440      	add	r0, r8
   84294:	b14a      	cbz	r2, 842aa <_strtol_r+0xc2>
   84296:	b107      	cbz	r7, 8429a <_strtol_r+0xb2>
   84298:	1e61      	subs	r1, r4, #1
   8429a:	6011      	str	r1, [r2, #0]
   8429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842a0:	4285      	cmp	r5, r0
   842a2:	dddb      	ble.n	8425c <_strtol_r+0x74>
   842a4:	f04f 37ff 	mov.w	r7, #4294967295
   842a8:	e7db      	b.n	84262 <_strtol_r+0x7a>
   842aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842ae:	1cb4      	adds	r4, r6, #2
   842b0:	7875      	ldrb	r5, [r6, #1]
   842b2:	f04f 0801 	mov.w	r8, #1
   842b6:	e7b2      	b.n	8421e <_strtol_r+0x36>
   842b8:	f1b8 0f00 	cmp.w	r8, #0
   842bc:	f04f 0322 	mov.w	r3, #34	; 0x22
   842c0:	bf14      	ite	ne
   842c2:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   842c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   842ca:	f8cb 3000 	str.w	r3, [fp]
   842ce:	2a00      	cmp	r2, #0
   842d0:	d1e2      	bne.n	84298 <_strtol_r+0xb0>
   842d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842d6:	7823      	ldrb	r3, [r4, #0]
   842d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   842dc:	2b58      	cmp	r3, #88	; 0x58
   842de:	d009      	beq.n	842f4 <_strtol_r+0x10c>
   842e0:	2308      	movs	r3, #8
   842e2:	469a      	mov	sl, r3
   842e4:	e7a4      	b.n	84230 <_strtol_r+0x48>
   842e6:	2d30      	cmp	r5, #48	; 0x30
   842e8:	d19c      	bne.n	84224 <_strtol_r+0x3c>
   842ea:	7820      	ldrb	r0, [r4, #0]
   842ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   842f0:	2858      	cmp	r0, #88	; 0x58
   842f2:	d197      	bne.n	84224 <_strtol_r+0x3c>
   842f4:	f04f 0a10 	mov.w	sl, #16
   842f8:	7865      	ldrb	r5, [r4, #1]
   842fa:	4653      	mov	r3, sl
   842fc:	3402      	adds	r4, #2
   842fe:	e797      	b.n	84230 <_strtol_r+0x48>
   84300:	2007056c 	.word	0x2007056c

00084304 <strtol>:
   84304:	b430      	push	{r4, r5}
   84306:	460d      	mov	r5, r1
   84308:	4c03      	ldr	r4, [pc, #12]	; (84318 <strtol+0x14>)
   8430a:	4613      	mov	r3, r2
   8430c:	4601      	mov	r1, r0
   8430e:	462a      	mov	r2, r5
   84310:	6820      	ldr	r0, [r4, #0]
   84312:	bc30      	pop	{r4, r5}
   84314:	f7ff bf68 	b.w	841e8 <_strtol_r>
   84318:	20070568 	.word	0x20070568

0008431c <__utoa>:
   8431c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8431e:	b08b      	sub	sp, #44	; 0x2c
   84320:	466f      	mov	r7, sp
   84322:	4615      	mov	r5, r2
   84324:	f8df e070 	ldr.w	lr, [pc, #112]	; 84398 <__utoa+0x7c>
   84328:	4604      	mov	r4, r0
   8432a:	460e      	mov	r6, r1
   8432c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   84330:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   84332:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   84336:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   84338:	e89e 0003 	ldmia.w	lr, {r0, r1}
   8433c:	1eab      	subs	r3, r5, #2
   8433e:	f847 0b04 	str.w	r0, [r7], #4
   84342:	2b22      	cmp	r3, #34	; 0x22
   84344:	7039      	strb	r1, [r7, #0]
   84346:	d822      	bhi.n	8438e <__utoa+0x72>
   84348:	1e71      	subs	r1, r6, #1
   8434a:	4608      	mov	r0, r1
   8434c:	2300      	movs	r3, #0
   8434e:	e000      	b.n	84352 <__utoa+0x36>
   84350:	4613      	mov	r3, r2
   84352:	fbb4 f2f5 	udiv	r2, r4, r5
   84356:	fb05 4412 	mls	r4, r5, r2, r4
   8435a:	af0a      	add	r7, sp, #40	; 0x28
   8435c:	443c      	add	r4, r7
   8435e:	f814 7c28 	ldrb.w	r7, [r4, #-40]
   84362:	4614      	mov	r4, r2
   84364:	f800 7f01 	strb.w	r7, [r0, #1]!
   84368:	1c5a      	adds	r2, r3, #1
   8436a:	2c00      	cmp	r4, #0
   8436c:	d1f0      	bne.n	84350 <__utoa+0x34>
   8436e:	54b4      	strb	r4, [r6, r2]
   84370:	18f2      	adds	r2, r6, r3
   84372:	b14b      	cbz	r3, 84388 <__utoa+0x6c>
   84374:	3401      	adds	r4, #1
   84376:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   8437a:	7817      	ldrb	r7, [r2, #0]
   8437c:	1b18      	subs	r0, r3, r4
   8437e:	4284      	cmp	r4, r0
   84380:	700f      	strb	r7, [r1, #0]
   84382:	f802 5901 	strb.w	r5, [r2], #-1
   84386:	dbf5      	blt.n	84374 <__utoa+0x58>
   84388:	4630      	mov	r0, r6
   8438a:	b00b      	add	sp, #44	; 0x2c
   8438c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8438e:	2000      	movs	r0, #0
   84390:	7030      	strb	r0, [r6, #0]
   84392:	b00b      	add	sp, #44	; 0x2c
   84394:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84396:	bf00      	nop
   84398:	00088b68 	.word	0x00088b68

0008439c <__sprint_r.part.0>:
   8439c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8439e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   843a2:	049c      	lsls	r4, r3, #18
   843a4:	460f      	mov	r7, r1
   843a6:	4692      	mov	sl, r2
   843a8:	d52b      	bpl.n	84402 <__sprint_r.part.0+0x66>
   843aa:	6893      	ldr	r3, [r2, #8]
   843ac:	6812      	ldr	r2, [r2, #0]
   843ae:	b333      	cbz	r3, 843fe <__sprint_r.part.0+0x62>
   843b0:	4680      	mov	r8, r0
   843b2:	f102 0908 	add.w	r9, r2, #8
   843b6:	e919 0060 	ldmdb	r9, {r5, r6}
   843ba:	08b6      	lsrs	r6, r6, #2
   843bc:	d017      	beq.n	843ee <__sprint_r.part.0+0x52>
   843be:	3d04      	subs	r5, #4
   843c0:	2400      	movs	r4, #0
   843c2:	e001      	b.n	843c8 <__sprint_r.part.0+0x2c>
   843c4:	42a6      	cmp	r6, r4
   843c6:	d010      	beq.n	843ea <__sprint_r.part.0+0x4e>
   843c8:	4640      	mov	r0, r8
   843ca:	f855 1f04 	ldr.w	r1, [r5, #4]!
   843ce:	463a      	mov	r2, r7
   843d0:	f001 f89a 	bl	85508 <_fputwc_r>
   843d4:	1c43      	adds	r3, r0, #1
   843d6:	f104 0401 	add.w	r4, r4, #1
   843da:	d1f3      	bne.n	843c4 <__sprint_r.part.0+0x28>
   843dc:	2300      	movs	r3, #0
   843de:	f8ca 3008 	str.w	r3, [sl, #8]
   843e2:	f8ca 3004 	str.w	r3, [sl, #4]
   843e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   843ea:	f8da 3008 	ldr.w	r3, [sl, #8]
   843ee:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   843f2:	f8ca 3008 	str.w	r3, [sl, #8]
   843f6:	f109 0908 	add.w	r9, r9, #8
   843fa:	2b00      	cmp	r3, #0
   843fc:	d1db      	bne.n	843b6 <__sprint_r.part.0+0x1a>
   843fe:	2000      	movs	r0, #0
   84400:	e7ec      	b.n	843dc <__sprint_r.part.0+0x40>
   84402:	f001 f9b9 	bl	85778 <__sfvwrite_r>
   84406:	2300      	movs	r3, #0
   84408:	f8ca 3008 	str.w	r3, [sl, #8]
   8440c:	f8ca 3004 	str.w	r3, [sl, #4]
   84410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084414 <_vfiprintf_r>:
   84414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84418:	b0ab      	sub	sp, #172	; 0xac
   8441a:	461c      	mov	r4, r3
   8441c:	9100      	str	r1, [sp, #0]
   8441e:	4693      	mov	fp, r2
   84420:	9304      	str	r3, [sp, #16]
   84422:	9001      	str	r0, [sp, #4]
   84424:	b118      	cbz	r0, 8442e <_vfiprintf_r+0x1a>
   84426:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84428:	2b00      	cmp	r3, #0
   8442a:	f000 80e3 	beq.w	845f4 <_vfiprintf_r+0x1e0>
   8442e:	9b00      	ldr	r3, [sp, #0]
   84430:	8999      	ldrh	r1, [r3, #12]
   84432:	b28a      	uxth	r2, r1
   84434:	0490      	lsls	r0, r2, #18
   84436:	d408      	bmi.n	8444a <_vfiprintf_r+0x36>
   84438:	4618      	mov	r0, r3
   8443a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   8443c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   84440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84444:	8182      	strh	r2, [r0, #12]
   84446:	6643      	str	r3, [r0, #100]	; 0x64
   84448:	b292      	uxth	r2, r2
   8444a:	0711      	lsls	r1, r2, #28
   8444c:	f140 80b2 	bpl.w	845b4 <_vfiprintf_r+0x1a0>
   84450:	9b00      	ldr	r3, [sp, #0]
   84452:	691b      	ldr	r3, [r3, #16]
   84454:	2b00      	cmp	r3, #0
   84456:	f000 80ad 	beq.w	845b4 <_vfiprintf_r+0x1a0>
   8445a:	f002 021a 	and.w	r2, r2, #26
   8445e:	2a0a      	cmp	r2, #10
   84460:	f000 80b4 	beq.w	845cc <_vfiprintf_r+0x1b8>
   84464:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   84468:	4654      	mov	r4, sl
   8446a:	2300      	movs	r3, #0
   8446c:	9309      	str	r3, [sp, #36]	; 0x24
   8446e:	9302      	str	r3, [sp, #8]
   84470:	930f      	str	r3, [sp, #60]	; 0x3c
   84472:	930e      	str	r3, [sp, #56]	; 0x38
   84474:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   84478:	f89b 3000 	ldrb.w	r3, [fp]
   8447c:	2b00      	cmp	r3, #0
   8447e:	f000 84a3 	beq.w	84dc8 <_vfiprintf_r+0x9b4>
   84482:	2b25      	cmp	r3, #37	; 0x25
   84484:	f000 84a0 	beq.w	84dc8 <_vfiprintf_r+0x9b4>
   84488:	465a      	mov	r2, fp
   8448a:	e001      	b.n	84490 <_vfiprintf_r+0x7c>
   8448c:	2b25      	cmp	r3, #37	; 0x25
   8448e:	d003      	beq.n	84498 <_vfiprintf_r+0x84>
   84490:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   84494:	2b00      	cmp	r3, #0
   84496:	d1f9      	bne.n	8448c <_vfiprintf_r+0x78>
   84498:	ebcb 0602 	rsb	r6, fp, r2
   8449c:	4615      	mov	r5, r2
   8449e:	b196      	cbz	r6, 844c6 <_vfiprintf_r+0xb2>
   844a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   844a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   844a4:	3301      	adds	r3, #1
   844a6:	4432      	add	r2, r6
   844a8:	2b07      	cmp	r3, #7
   844aa:	f8c4 b000 	str.w	fp, [r4]
   844ae:	6066      	str	r6, [r4, #4]
   844b0:	920f      	str	r2, [sp, #60]	; 0x3c
   844b2:	930e      	str	r3, [sp, #56]	; 0x38
   844b4:	dd79      	ble.n	845aa <_vfiprintf_r+0x196>
   844b6:	2a00      	cmp	r2, #0
   844b8:	f040 84ad 	bne.w	84e16 <_vfiprintf_r+0xa02>
   844bc:	4654      	mov	r4, sl
   844be:	9b02      	ldr	r3, [sp, #8]
   844c0:	920e      	str	r2, [sp, #56]	; 0x38
   844c2:	4433      	add	r3, r6
   844c4:	9302      	str	r3, [sp, #8]
   844c6:	782b      	ldrb	r3, [r5, #0]
   844c8:	2b00      	cmp	r3, #0
   844ca:	f000 835f 	beq.w	84b8c <_vfiprintf_r+0x778>
   844ce:	f04f 0300 	mov.w	r3, #0
   844d2:	2100      	movs	r1, #0
   844d4:	f04f 3cff 	mov.w	ip, #4294967295
   844d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   844dc:	1c68      	adds	r0, r5, #1
   844de:	786b      	ldrb	r3, [r5, #1]
   844e0:	4688      	mov	r8, r1
   844e2:	460d      	mov	r5, r1
   844e4:	4666      	mov	r6, ip
   844e6:	f100 0b01 	add.w	fp, r0, #1
   844ea:	f1a3 0220 	sub.w	r2, r3, #32
   844ee:	2a58      	cmp	r2, #88	; 0x58
   844f0:	f200 82aa 	bhi.w	84a48 <_vfiprintf_r+0x634>
   844f4:	e8df f012 	tbh	[pc, r2, lsl #1]
   844f8:	02a8029a 	.word	0x02a8029a
   844fc:	02a202a8 	.word	0x02a202a8
   84500:	02a802a8 	.word	0x02a802a8
   84504:	02a802a8 	.word	0x02a802a8
   84508:	02a802a8 	.word	0x02a802a8
   8450c:	02600254 	.word	0x02600254
   84510:	010d02a8 	.word	0x010d02a8
   84514:	02a8026c 	.word	0x02a8026c
   84518:	012f0129 	.word	0x012f0129
   8451c:	012f012f 	.word	0x012f012f
   84520:	012f012f 	.word	0x012f012f
   84524:	012f012f 	.word	0x012f012f
   84528:	012f012f 	.word	0x012f012f
   8452c:	02a802a8 	.word	0x02a802a8
   84530:	02a802a8 	.word	0x02a802a8
   84534:	02a802a8 	.word	0x02a802a8
   84538:	02a802a8 	.word	0x02a802a8
   8453c:	02a802a8 	.word	0x02a802a8
   84540:	02a8013d 	.word	0x02a8013d
   84544:	02a802a8 	.word	0x02a802a8
   84548:	02a802a8 	.word	0x02a802a8
   8454c:	02a802a8 	.word	0x02a802a8
   84550:	02a802a8 	.word	0x02a802a8
   84554:	017402a8 	.word	0x017402a8
   84558:	02a802a8 	.word	0x02a802a8
   8455c:	02a802a8 	.word	0x02a802a8
   84560:	018b02a8 	.word	0x018b02a8
   84564:	02a802a8 	.word	0x02a802a8
   84568:	02a801a3 	.word	0x02a801a3
   8456c:	02a802a8 	.word	0x02a802a8
   84570:	02a802a8 	.word	0x02a802a8
   84574:	02a802a8 	.word	0x02a802a8
   84578:	02a802a8 	.word	0x02a802a8
   8457c:	01c702a8 	.word	0x01c702a8
   84580:	02a801da 	.word	0x02a801da
   84584:	02a802a8 	.word	0x02a802a8
   84588:	01da0123 	.word	0x01da0123
   8458c:	02a802a8 	.word	0x02a802a8
   84590:	02a8024b 	.word	0x02a8024b
   84594:	01130288 	.word	0x01130288
   84598:	020701f4 	.word	0x020701f4
   8459c:	020d02a8 	.word	0x020d02a8
   845a0:	008102a8 	.word	0x008102a8
   845a4:	02a802a8 	.word	0x02a802a8
   845a8:	0232      	.short	0x0232
   845aa:	3408      	adds	r4, #8
   845ac:	9b02      	ldr	r3, [sp, #8]
   845ae:	4433      	add	r3, r6
   845b0:	9302      	str	r3, [sp, #8]
   845b2:	e788      	b.n	844c6 <_vfiprintf_r+0xb2>
   845b4:	9801      	ldr	r0, [sp, #4]
   845b6:	9900      	ldr	r1, [sp, #0]
   845b8:	f000 fd72 	bl	850a0 <__swsetup_r>
   845bc:	b9a8      	cbnz	r0, 845ea <_vfiprintf_r+0x1d6>
   845be:	9b00      	ldr	r3, [sp, #0]
   845c0:	899a      	ldrh	r2, [r3, #12]
   845c2:	f002 021a 	and.w	r2, r2, #26
   845c6:	2a0a      	cmp	r2, #10
   845c8:	f47f af4c 	bne.w	84464 <_vfiprintf_r+0x50>
   845cc:	9b00      	ldr	r3, [sp, #0]
   845ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   845d2:	2b00      	cmp	r3, #0
   845d4:	f6ff af46 	blt.w	84464 <_vfiprintf_r+0x50>
   845d8:	9801      	ldr	r0, [sp, #4]
   845da:	9900      	ldr	r1, [sp, #0]
   845dc:	465a      	mov	r2, fp
   845de:	4623      	mov	r3, r4
   845e0:	f000 fd20 	bl	85024 <__sbprintf>
   845e4:	b02b      	add	sp, #172	; 0xac
   845e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   845ea:	f04f 30ff 	mov.w	r0, #4294967295
   845ee:	b02b      	add	sp, #172	; 0xac
   845f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   845f4:	f000 ff10 	bl	85418 <__sinit>
   845f8:	e719      	b.n	8442e <_vfiprintf_r+0x1a>
   845fa:	f018 0f20 	tst.w	r8, #32
   845fe:	9503      	str	r5, [sp, #12]
   84600:	46b4      	mov	ip, r6
   84602:	f000 810c 	beq.w	8481e <_vfiprintf_r+0x40a>
   84606:	9b04      	ldr	r3, [sp, #16]
   84608:	3307      	adds	r3, #7
   8460a:	f023 0307 	bic.w	r3, r3, #7
   8460e:	f103 0208 	add.w	r2, r3, #8
   84612:	e9d3 6700 	ldrd	r6, r7, [r3]
   84616:	9204      	str	r2, [sp, #16]
   84618:	2301      	movs	r3, #1
   8461a:	f04f 0200 	mov.w	r2, #0
   8461e:	46e1      	mov	r9, ip
   84620:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84624:	2500      	movs	r5, #0
   84626:	f1bc 0f00 	cmp.w	ip, #0
   8462a:	bfa8      	it	ge
   8462c:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   84630:	ea56 0207 	orrs.w	r2, r6, r7
   84634:	f040 80c4 	bne.w	847c0 <_vfiprintf_r+0x3ac>
   84638:	f1bc 0f00 	cmp.w	ip, #0
   8463c:	f000 8380 	beq.w	84d40 <_vfiprintf_r+0x92c>
   84640:	2b01      	cmp	r3, #1
   84642:	f000 80c5 	beq.w	847d0 <_vfiprintf_r+0x3bc>
   84646:	2b02      	cmp	r3, #2
   84648:	f000 8386 	beq.w	84d58 <_vfiprintf_r+0x944>
   8464c:	4651      	mov	r1, sl
   8464e:	08f2      	lsrs	r2, r6, #3
   84650:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   84654:	08f8      	lsrs	r0, r7, #3
   84656:	f006 0307 	and.w	r3, r6, #7
   8465a:	4607      	mov	r7, r0
   8465c:	4616      	mov	r6, r2
   8465e:	3330      	adds	r3, #48	; 0x30
   84660:	ea56 0207 	orrs.w	r2, r6, r7
   84664:	f801 3d01 	strb.w	r3, [r1, #-1]!
   84668:	d1f1      	bne.n	8464e <_vfiprintf_r+0x23a>
   8466a:	f018 0f01 	tst.w	r8, #1
   8466e:	9107      	str	r1, [sp, #28]
   84670:	f040 83fa 	bne.w	84e68 <_vfiprintf_r+0xa54>
   84674:	ebc1 090a 	rsb	r9, r1, sl
   84678:	45e1      	cmp	r9, ip
   8467a:	464e      	mov	r6, r9
   8467c:	bfb8      	it	lt
   8467e:	4666      	movlt	r6, ip
   84680:	b105      	cbz	r5, 84684 <_vfiprintf_r+0x270>
   84682:	3601      	adds	r6, #1
   84684:	f018 0302 	ands.w	r3, r8, #2
   84688:	9305      	str	r3, [sp, #20]
   8468a:	bf18      	it	ne
   8468c:	3602      	addne	r6, #2
   8468e:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   84692:	9306      	str	r3, [sp, #24]
   84694:	f040 81f9 	bne.w	84a8a <_vfiprintf_r+0x676>
   84698:	9b03      	ldr	r3, [sp, #12]
   8469a:	1b9d      	subs	r5, r3, r6
   8469c:	2d00      	cmp	r5, #0
   8469e:	f340 81f4 	ble.w	84a8a <_vfiprintf_r+0x676>
   846a2:	2d10      	cmp	r5, #16
   846a4:	f340 848a 	ble.w	84fbc <_vfiprintf_r+0xba8>
   846a8:	4620      	mov	r0, r4
   846aa:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   846ae:	4664      	mov	r4, ip
   846b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846b2:	4fc4      	ldr	r7, [pc, #784]	; (849c4 <_vfiprintf_r+0x5b0>)
   846b4:	2310      	movs	r3, #16
   846b6:	4671      	mov	r1, lr
   846b8:	4684      	mov	ip, r0
   846ba:	e007      	b.n	846cc <_vfiprintf_r+0x2b8>
   846bc:	f101 0e02 	add.w	lr, r1, #2
   846c0:	4601      	mov	r1, r0
   846c2:	f10c 0c08 	add.w	ip, ip, #8
   846c6:	3d10      	subs	r5, #16
   846c8:	2d10      	cmp	r5, #16
   846ca:	dd13      	ble.n	846f4 <_vfiprintf_r+0x2e0>
   846cc:	1c48      	adds	r0, r1, #1
   846ce:	3210      	adds	r2, #16
   846d0:	2807      	cmp	r0, #7
   846d2:	920f      	str	r2, [sp, #60]	; 0x3c
   846d4:	f8cc 7000 	str.w	r7, [ip]
   846d8:	f8cc 3004 	str.w	r3, [ip, #4]
   846dc:	900e      	str	r0, [sp, #56]	; 0x38
   846de:	dded      	ble.n	846bc <_vfiprintf_r+0x2a8>
   846e0:	2a00      	cmp	r2, #0
   846e2:	f040 81c2 	bne.w	84a6a <_vfiprintf_r+0x656>
   846e6:	3d10      	subs	r5, #16
   846e8:	2d10      	cmp	r5, #16
   846ea:	4611      	mov	r1, r2
   846ec:	f04f 0e01 	mov.w	lr, #1
   846f0:	46d4      	mov	ip, sl
   846f2:	dceb      	bgt.n	846cc <_vfiprintf_r+0x2b8>
   846f4:	4663      	mov	r3, ip
   846f6:	4671      	mov	r1, lr
   846f8:	46a4      	mov	ip, r4
   846fa:	461c      	mov	r4, r3
   846fc:	442a      	add	r2, r5
   846fe:	2907      	cmp	r1, #7
   84700:	920f      	str	r2, [sp, #60]	; 0x3c
   84702:	6027      	str	r7, [r4, #0]
   84704:	6065      	str	r5, [r4, #4]
   84706:	910e      	str	r1, [sp, #56]	; 0x38
   84708:	f300 8346 	bgt.w	84d98 <_vfiprintf_r+0x984>
   8470c:	3408      	adds	r4, #8
   8470e:	1c48      	adds	r0, r1, #1
   84710:	e1be      	b.n	84a90 <_vfiprintf_r+0x67c>
   84712:	4658      	mov	r0, fp
   84714:	f048 0804 	orr.w	r8, r8, #4
   84718:	f89b 3000 	ldrb.w	r3, [fp]
   8471c:	e6e3      	b.n	844e6 <_vfiprintf_r+0xd2>
   8471e:	f018 0320 	ands.w	r3, r8, #32
   84722:	9503      	str	r5, [sp, #12]
   84724:	46b4      	mov	ip, r6
   84726:	d062      	beq.n	847ee <_vfiprintf_r+0x3da>
   84728:	9b04      	ldr	r3, [sp, #16]
   8472a:	3307      	adds	r3, #7
   8472c:	f023 0307 	bic.w	r3, r3, #7
   84730:	f103 0208 	add.w	r2, r3, #8
   84734:	e9d3 6700 	ldrd	r6, r7, [r3]
   84738:	9204      	str	r2, [sp, #16]
   8473a:	2300      	movs	r3, #0
   8473c:	e76d      	b.n	8461a <_vfiprintf_r+0x206>
   8473e:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   84742:	f89b 3000 	ldrb.w	r3, [fp]
   84746:	4658      	mov	r0, fp
   84748:	e6cd      	b.n	844e6 <_vfiprintf_r+0xd2>
   8474a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   8474e:	f89b 3000 	ldrb.w	r3, [fp]
   84752:	4658      	mov	r0, fp
   84754:	e6c7      	b.n	844e6 <_vfiprintf_r+0xd2>
   84756:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8475a:	2500      	movs	r5, #0
   8475c:	f81b 3b01 	ldrb.w	r3, [fp], #1
   84760:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84764:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   84768:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8476c:	2a09      	cmp	r2, #9
   8476e:	d9f5      	bls.n	8475c <_vfiprintf_r+0x348>
   84770:	e6bb      	b.n	844ea <_vfiprintf_r+0xd6>
   84772:	f048 0810 	orr.w	r8, r8, #16
   84776:	f018 0f20 	tst.w	r8, #32
   8477a:	9503      	str	r5, [sp, #12]
   8477c:	46b4      	mov	ip, r6
   8477e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84782:	f000 809b 	beq.w	848bc <_vfiprintf_r+0x4a8>
   84786:	9904      	ldr	r1, [sp, #16]
   84788:	3107      	adds	r1, #7
   8478a:	f021 0107 	bic.w	r1, r1, #7
   8478e:	e9d1 2300 	ldrd	r2, r3, [r1]
   84792:	4616      	mov	r6, r2
   84794:	461f      	mov	r7, r3
   84796:	3108      	adds	r1, #8
   84798:	9104      	str	r1, [sp, #16]
   8479a:	2a00      	cmp	r2, #0
   8479c:	f173 0300 	sbcs.w	r3, r3, #0
   847a0:	f2c0 83a4 	blt.w	84eec <_vfiprintf_r+0xad8>
   847a4:	f1bc 0f00 	cmp.w	ip, #0
   847a8:	bfa8      	it	ge
   847aa:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   847ae:	ea56 0207 	orrs.w	r2, r6, r7
   847b2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   847b6:	46e1      	mov	r9, ip
   847b8:	f04f 0301 	mov.w	r3, #1
   847bc:	f43f af3c 	beq.w	84638 <_vfiprintf_r+0x224>
   847c0:	2b01      	cmp	r3, #1
   847c2:	f47f af40 	bne.w	84646 <_vfiprintf_r+0x232>
   847c6:	2f00      	cmp	r7, #0
   847c8:	bf08      	it	eq
   847ca:	2e0a      	cmpeq	r6, #10
   847cc:	f080 8332 	bcs.w	84e34 <_vfiprintf_r+0xa20>
   847d0:	ab2a      	add	r3, sp, #168	; 0xa8
   847d2:	3630      	adds	r6, #48	; 0x30
   847d4:	f803 6d41 	strb.w	r6, [r3, #-65]!
   847d8:	ebc3 090a 	rsb	r9, r3, sl
   847dc:	9307      	str	r3, [sp, #28]
   847de:	e74b      	b.n	84678 <_vfiprintf_r+0x264>
   847e0:	f048 0810 	orr.w	r8, r8, #16
   847e4:	f018 0320 	ands.w	r3, r8, #32
   847e8:	9503      	str	r5, [sp, #12]
   847ea:	46b4      	mov	ip, r6
   847ec:	d19c      	bne.n	84728 <_vfiprintf_r+0x314>
   847ee:	f018 0210 	ands.w	r2, r8, #16
   847f2:	f040 82f7 	bne.w	84de4 <_vfiprintf_r+0x9d0>
   847f6:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   847fa:	f000 82f3 	beq.w	84de4 <_vfiprintf_r+0x9d0>
   847fe:	9904      	ldr	r1, [sp, #16]
   84800:	4613      	mov	r3, r2
   84802:	460a      	mov	r2, r1
   84804:	3204      	adds	r2, #4
   84806:	880e      	ldrh	r6, [r1, #0]
   84808:	2700      	movs	r7, #0
   8480a:	9204      	str	r2, [sp, #16]
   8480c:	e705      	b.n	8461a <_vfiprintf_r+0x206>
   8480e:	f048 0810 	orr.w	r8, r8, #16
   84812:	f018 0f20 	tst.w	r8, #32
   84816:	9503      	str	r5, [sp, #12]
   84818:	46b4      	mov	ip, r6
   8481a:	f47f aef4 	bne.w	84606 <_vfiprintf_r+0x1f2>
   8481e:	9a04      	ldr	r2, [sp, #16]
   84820:	f018 0f10 	tst.w	r8, #16
   84824:	4613      	mov	r3, r2
   84826:	f040 82e4 	bne.w	84df2 <_vfiprintf_r+0x9de>
   8482a:	f018 0f40 	tst.w	r8, #64	; 0x40
   8482e:	f000 82e0 	beq.w	84df2 <_vfiprintf_r+0x9de>
   84832:	8816      	ldrh	r6, [r2, #0]
   84834:	3204      	adds	r2, #4
   84836:	2700      	movs	r7, #0
   84838:	2301      	movs	r3, #1
   8483a:	9204      	str	r2, [sp, #16]
   8483c:	e6ed      	b.n	8461a <_vfiprintf_r+0x206>
   8483e:	4a62      	ldr	r2, [pc, #392]	; (849c8 <_vfiprintf_r+0x5b4>)
   84840:	f018 0f20 	tst.w	r8, #32
   84844:	9503      	str	r5, [sp, #12]
   84846:	46b4      	mov	ip, r6
   84848:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8484c:	9209      	str	r2, [sp, #36]	; 0x24
   8484e:	f000 808f 	beq.w	84970 <_vfiprintf_r+0x55c>
   84852:	9a04      	ldr	r2, [sp, #16]
   84854:	3207      	adds	r2, #7
   84856:	f022 0207 	bic.w	r2, r2, #7
   8485a:	f102 0108 	add.w	r1, r2, #8
   8485e:	9104      	str	r1, [sp, #16]
   84860:	e9d2 6700 	ldrd	r6, r7, [r2]
   84864:	f018 0f01 	tst.w	r8, #1
   84868:	f000 828f 	beq.w	84d8a <_vfiprintf_r+0x976>
   8486c:	ea56 0207 	orrs.w	r2, r6, r7
   84870:	f000 828b 	beq.w	84d8a <_vfiprintf_r+0x976>
   84874:	2230      	movs	r2, #48	; 0x30
   84876:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8487a:	f048 0802 	orr.w	r8, r8, #2
   8487e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84882:	2302      	movs	r3, #2
   84884:	e6c9      	b.n	8461a <_vfiprintf_r+0x206>
   84886:	9a04      	ldr	r2, [sp, #16]
   84888:	2601      	movs	r6, #1
   8488a:	6813      	ldr	r3, [r2, #0]
   8488c:	f04f 0100 	mov.w	r1, #0
   84890:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84894:	4613      	mov	r3, r2
   84896:	46b1      	mov	r9, r6
   84898:	3304      	adds	r3, #4
   8489a:	9304      	str	r3, [sp, #16]
   8489c:	ab10      	add	r3, sp, #64	; 0x40
   8489e:	9503      	str	r5, [sp, #12]
   848a0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   848a4:	9307      	str	r3, [sp, #28]
   848a6:	f04f 0c00 	mov.w	ip, #0
   848aa:	e6eb      	b.n	84684 <_vfiprintf_r+0x270>
   848ac:	f018 0f20 	tst.w	r8, #32
   848b0:	9503      	str	r5, [sp, #12]
   848b2:	46b4      	mov	ip, r6
   848b4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   848b8:	f47f af65 	bne.w	84786 <_vfiprintf_r+0x372>
   848bc:	9a04      	ldr	r2, [sp, #16]
   848be:	f018 0f10 	tst.w	r8, #16
   848c2:	4613      	mov	r3, r2
   848c4:	f040 82a0 	bne.w	84e08 <_vfiprintf_r+0x9f4>
   848c8:	f018 0f40 	tst.w	r8, #64	; 0x40
   848cc:	f000 829c 	beq.w	84e08 <_vfiprintf_r+0x9f4>
   848d0:	f9b2 6000 	ldrsh.w	r6, [r2]
   848d4:	3304      	adds	r3, #4
   848d6:	17f7      	asrs	r7, r6, #31
   848d8:	9304      	str	r3, [sp, #16]
   848da:	4632      	mov	r2, r6
   848dc:	463b      	mov	r3, r7
   848de:	e75c      	b.n	8479a <_vfiprintf_r+0x386>
   848e0:	9904      	ldr	r1, [sp, #16]
   848e2:	2378      	movs	r3, #120	; 0x78
   848e4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   848e8:	4b38      	ldr	r3, [pc, #224]	; (849cc <_vfiprintf_r+0x5b8>)
   848ea:	46b4      	mov	ip, r6
   848ec:	2230      	movs	r2, #48	; 0x30
   848ee:	680e      	ldr	r6, [r1, #0]
   848f0:	3104      	adds	r1, #4
   848f2:	9309      	str	r3, [sp, #36]	; 0x24
   848f4:	9503      	str	r5, [sp, #12]
   848f6:	f048 0802 	orr.w	r8, r8, #2
   848fa:	9104      	str	r1, [sp, #16]
   848fc:	2700      	movs	r7, #0
   848fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84902:	2302      	movs	r3, #2
   84904:	e689      	b.n	8461a <_vfiprintf_r+0x206>
   84906:	f048 0820 	orr.w	r8, r8, #32
   8490a:	f89b 3000 	ldrb.w	r3, [fp]
   8490e:	4658      	mov	r0, fp
   84910:	e5e9      	b.n	844e6 <_vfiprintf_r+0xd2>
   84912:	f04f 0100 	mov.w	r1, #0
   84916:	9a04      	ldr	r2, [sp, #16]
   84918:	9503      	str	r5, [sp, #12]
   8491a:	6813      	ldr	r3, [r2, #0]
   8491c:	46b4      	mov	ip, r6
   8491e:	9307      	str	r3, [sp, #28]
   84920:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84924:	1d15      	adds	r5, r2, #4
   84926:	2b00      	cmp	r3, #0
   84928:	f000 834e 	beq.w	84fc8 <_vfiprintf_r+0xbb4>
   8492c:	2e00      	cmp	r6, #0
   8492e:	f2c0 8329 	blt.w	84f84 <_vfiprintf_r+0xb70>
   84932:	9e07      	ldr	r6, [sp, #28]
   84934:	4662      	mov	r2, ip
   84936:	4630      	mov	r0, r6
   84938:	2100      	movs	r1, #0
   8493a:	f8cd c010 	str.w	ip, [sp, #16]
   8493e:	f001 ff9f 	bl	86880 <memchr>
   84942:	f8dd c010 	ldr.w	ip, [sp, #16]
   84946:	2800      	cmp	r0, #0
   84948:	f000 834e 	beq.w	84fe8 <_vfiprintf_r+0xbd4>
   8494c:	9504      	str	r5, [sp, #16]
   8494e:	ebc6 0900 	rsb	r9, r6, r0
   84952:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84956:	f04f 0c00 	mov.w	ip, #0
   8495a:	e68d      	b.n	84678 <_vfiprintf_r+0x264>
   8495c:	4a1b      	ldr	r2, [pc, #108]	; (849cc <_vfiprintf_r+0x5b8>)
   8495e:	f018 0f20 	tst.w	r8, #32
   84962:	9503      	str	r5, [sp, #12]
   84964:	46b4      	mov	ip, r6
   84966:	9209      	str	r2, [sp, #36]	; 0x24
   84968:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8496c:	f47f af71 	bne.w	84852 <_vfiprintf_r+0x43e>
   84970:	9904      	ldr	r1, [sp, #16]
   84972:	f018 0f10 	tst.w	r8, #16
   84976:	460a      	mov	r2, r1
   84978:	f040 8241 	bne.w	84dfe <_vfiprintf_r+0x9ea>
   8497c:	f018 0f40 	tst.w	r8, #64	; 0x40
   84980:	f000 823d 	beq.w	84dfe <_vfiprintf_r+0x9ea>
   84984:	3204      	adds	r2, #4
   84986:	880e      	ldrh	r6, [r1, #0]
   84988:	2700      	movs	r7, #0
   8498a:	9204      	str	r2, [sp, #16]
   8498c:	e76a      	b.n	84864 <_vfiprintf_r+0x450>
   8498e:	f89b 3000 	ldrb.w	r3, [fp]
   84992:	2b6c      	cmp	r3, #108	; 0x6c
   84994:	f000 82e9 	beq.w	84f6a <_vfiprintf_r+0xb56>
   84998:	f048 0810 	orr.w	r8, r8, #16
   8499c:	4658      	mov	r0, fp
   8499e:	e5a2      	b.n	844e6 <_vfiprintf_r+0xd2>
   849a0:	9a04      	ldr	r2, [sp, #16]
   849a2:	4613      	mov	r3, r2
   849a4:	6815      	ldr	r5, [r2, #0]
   849a6:	3304      	adds	r3, #4
   849a8:	2d00      	cmp	r5, #0
   849aa:	f2c0 82e6 	blt.w	84f7a <_vfiprintf_r+0xb66>
   849ae:	9304      	str	r3, [sp, #16]
   849b0:	f89b 3000 	ldrb.w	r3, [fp]
   849b4:	4658      	mov	r0, fp
   849b6:	e596      	b.n	844e6 <_vfiprintf_r+0xd2>
   849b8:	f89b 3000 	ldrb.w	r3, [fp]
   849bc:	4658      	mov	r0, fp
   849be:	212b      	movs	r1, #43	; 0x2b
   849c0:	e591      	b.n	844e6 <_vfiprintf_r+0xd2>
   849c2:	bf00      	nop
   849c4:	00088bd0 	.word	0x00088bd0
   849c8:	00088ba0 	.word	0x00088ba0
   849cc:	00088bb4 	.word	0x00088bb4
   849d0:	f89b 3000 	ldrb.w	r3, [fp]
   849d4:	f10b 0001 	add.w	r0, fp, #1
   849d8:	2b2a      	cmp	r3, #42	; 0x2a
   849da:	f000 830f 	beq.w	84ffc <_vfiprintf_r+0xbe8>
   849de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   849e2:	2a09      	cmp	r2, #9
   849e4:	4683      	mov	fp, r0
   849e6:	f04f 0600 	mov.w	r6, #0
   849ea:	f63f ad7e 	bhi.w	844ea <_vfiprintf_r+0xd6>
   849ee:	f81b 3b01 	ldrb.w	r3, [fp], #1
   849f2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   849f6:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   849fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   849fe:	2a09      	cmp	r2, #9
   84a00:	d9f5      	bls.n	849ee <_vfiprintf_r+0x5da>
   84a02:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   84a06:	e570      	b.n	844ea <_vfiprintf_r+0xd6>
   84a08:	f018 0f20 	tst.w	r8, #32
   84a0c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84a10:	f000 8283 	beq.w	84f1a <_vfiprintf_r+0xb06>
   84a14:	9a04      	ldr	r2, [sp, #16]
   84a16:	4613      	mov	r3, r2
   84a18:	3304      	adds	r3, #4
   84a1a:	9304      	str	r3, [sp, #16]
   84a1c:	9b02      	ldr	r3, [sp, #8]
   84a1e:	6811      	ldr	r1, [r2, #0]
   84a20:	17df      	asrs	r7, r3, #31
   84a22:	461a      	mov	r2, r3
   84a24:	463b      	mov	r3, r7
   84a26:	e9c1 2300 	strd	r2, r3, [r1]
   84a2a:	e525      	b.n	84478 <_vfiprintf_r+0x64>
   84a2c:	4658      	mov	r0, fp
   84a2e:	f89b 3000 	ldrb.w	r3, [fp]
   84a32:	2900      	cmp	r1, #0
   84a34:	f47f ad57 	bne.w	844e6 <_vfiprintf_r+0xd2>
   84a38:	2120      	movs	r1, #32
   84a3a:	e554      	b.n	844e6 <_vfiprintf_r+0xd2>
   84a3c:	f048 0801 	orr.w	r8, r8, #1
   84a40:	4658      	mov	r0, fp
   84a42:	f89b 3000 	ldrb.w	r3, [fp]
   84a46:	e54e      	b.n	844e6 <_vfiprintf_r+0xd2>
   84a48:	9503      	str	r5, [sp, #12]
   84a4a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84a4e:	2b00      	cmp	r3, #0
   84a50:	f000 809c 	beq.w	84b8c <_vfiprintf_r+0x778>
   84a54:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84a58:	f04f 0300 	mov.w	r3, #0
   84a5c:	2601      	movs	r6, #1
   84a5e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84a62:	ab10      	add	r3, sp, #64	; 0x40
   84a64:	46b1      	mov	r9, r6
   84a66:	9307      	str	r3, [sp, #28]
   84a68:	e71d      	b.n	848a6 <_vfiprintf_r+0x492>
   84a6a:	9801      	ldr	r0, [sp, #4]
   84a6c:	9900      	ldr	r1, [sp, #0]
   84a6e:	aa0d      	add	r2, sp, #52	; 0x34
   84a70:	9308      	str	r3, [sp, #32]
   84a72:	f7ff fc93 	bl	8439c <__sprint_r.part.0>
   84a76:	2800      	cmp	r0, #0
   84a78:	f040 808f 	bne.w	84b9a <_vfiprintf_r+0x786>
   84a7c:	990e      	ldr	r1, [sp, #56]	; 0x38
   84a7e:	46d4      	mov	ip, sl
   84a80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84a82:	f101 0e01 	add.w	lr, r1, #1
   84a86:	9b08      	ldr	r3, [sp, #32]
   84a88:	e61d      	b.n	846c6 <_vfiprintf_r+0x2b2>
   84a8a:	990e      	ldr	r1, [sp, #56]	; 0x38
   84a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84a8e:	1c48      	adds	r0, r1, #1
   84a90:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84a94:	b16b      	cbz	r3, 84ab2 <_vfiprintf_r+0x69e>
   84a96:	3201      	adds	r2, #1
   84a98:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   84a9c:	2101      	movs	r1, #1
   84a9e:	2807      	cmp	r0, #7
   84aa0:	920f      	str	r2, [sp, #60]	; 0x3c
   84aa2:	900e      	str	r0, [sp, #56]	; 0x38
   84aa4:	6023      	str	r3, [r4, #0]
   84aa6:	6061      	str	r1, [r4, #4]
   84aa8:	f300 8134 	bgt.w	84d14 <_vfiprintf_r+0x900>
   84aac:	4601      	mov	r1, r0
   84aae:	3408      	adds	r4, #8
   84ab0:	3001      	adds	r0, #1
   84ab2:	9b05      	ldr	r3, [sp, #20]
   84ab4:	b163      	cbz	r3, 84ad0 <_vfiprintf_r+0x6bc>
   84ab6:	3202      	adds	r2, #2
   84ab8:	a90c      	add	r1, sp, #48	; 0x30
   84aba:	2302      	movs	r3, #2
   84abc:	2807      	cmp	r0, #7
   84abe:	920f      	str	r2, [sp, #60]	; 0x3c
   84ac0:	900e      	str	r0, [sp, #56]	; 0x38
   84ac2:	e884 000a 	stmia.w	r4, {r1, r3}
   84ac6:	f300 8134 	bgt.w	84d32 <_vfiprintf_r+0x91e>
   84aca:	4601      	mov	r1, r0
   84acc:	3408      	adds	r4, #8
   84ace:	3001      	adds	r0, #1
   84ad0:	9b06      	ldr	r3, [sp, #24]
   84ad2:	2b80      	cmp	r3, #128	; 0x80
   84ad4:	f000 80d4 	beq.w	84c80 <_vfiprintf_r+0x86c>
   84ad8:	ebc9 070c 	rsb	r7, r9, ip
   84adc:	2f00      	cmp	r7, #0
   84ade:	dd2b      	ble.n	84b38 <_vfiprintf_r+0x724>
   84ae0:	2f10      	cmp	r7, #16
   84ae2:	4dab      	ldr	r5, [pc, #684]	; (84d90 <_vfiprintf_r+0x97c>)
   84ae4:	dd1f      	ble.n	84b26 <_vfiprintf_r+0x712>
   84ae6:	46a6      	mov	lr, r4
   84ae8:	2310      	movs	r3, #16
   84aea:	9c01      	ldr	r4, [sp, #4]
   84aec:	e007      	b.n	84afe <_vfiprintf_r+0x6ea>
   84aee:	f101 0c02 	add.w	ip, r1, #2
   84af2:	4601      	mov	r1, r0
   84af4:	f10e 0e08 	add.w	lr, lr, #8
   84af8:	3f10      	subs	r7, #16
   84afa:	2f10      	cmp	r7, #16
   84afc:	dd11      	ble.n	84b22 <_vfiprintf_r+0x70e>
   84afe:	1c48      	adds	r0, r1, #1
   84b00:	3210      	adds	r2, #16
   84b02:	2807      	cmp	r0, #7
   84b04:	920f      	str	r2, [sp, #60]	; 0x3c
   84b06:	f8ce 5000 	str.w	r5, [lr]
   84b0a:	f8ce 3004 	str.w	r3, [lr, #4]
   84b0e:	900e      	str	r0, [sp, #56]	; 0x38
   84b10:	dded      	ble.n	84aee <_vfiprintf_r+0x6da>
   84b12:	bb6a      	cbnz	r2, 84b70 <_vfiprintf_r+0x75c>
   84b14:	3f10      	subs	r7, #16
   84b16:	2f10      	cmp	r7, #16
   84b18:	f04f 0c01 	mov.w	ip, #1
   84b1c:	4611      	mov	r1, r2
   84b1e:	46d6      	mov	lr, sl
   84b20:	dced      	bgt.n	84afe <_vfiprintf_r+0x6ea>
   84b22:	4674      	mov	r4, lr
   84b24:	4660      	mov	r0, ip
   84b26:	443a      	add	r2, r7
   84b28:	2807      	cmp	r0, #7
   84b2a:	920f      	str	r2, [sp, #60]	; 0x3c
   84b2c:	e884 00a0 	stmia.w	r4, {r5, r7}
   84b30:	900e      	str	r0, [sp, #56]	; 0x38
   84b32:	dc3b      	bgt.n	84bac <_vfiprintf_r+0x798>
   84b34:	3408      	adds	r4, #8
   84b36:	3001      	adds	r0, #1
   84b38:	eb02 0309 	add.w	r3, r2, r9
   84b3c:	9a07      	ldr	r2, [sp, #28]
   84b3e:	2807      	cmp	r0, #7
   84b40:	930f      	str	r3, [sp, #60]	; 0x3c
   84b42:	e884 0204 	stmia.w	r4, {r2, r9}
   84b46:	900e      	str	r0, [sp, #56]	; 0x38
   84b48:	dd3d      	ble.n	84bc6 <_vfiprintf_r+0x7b2>
   84b4a:	2b00      	cmp	r3, #0
   84b4c:	f040 813f 	bne.w	84dce <_vfiprintf_r+0x9ba>
   84b50:	f018 0f04 	tst.w	r8, #4
   84b54:	930e      	str	r3, [sp, #56]	; 0x38
   84b56:	f040 8130 	bne.w	84dba <_vfiprintf_r+0x9a6>
   84b5a:	9b02      	ldr	r3, [sp, #8]
   84b5c:	9a03      	ldr	r2, [sp, #12]
   84b5e:	4296      	cmp	r6, r2
   84b60:	bfac      	ite	ge
   84b62:	199b      	addge	r3, r3, r6
   84b64:	189b      	addlt	r3, r3, r2
   84b66:	9302      	str	r3, [sp, #8]
   84b68:	2300      	movs	r3, #0
   84b6a:	930e      	str	r3, [sp, #56]	; 0x38
   84b6c:	4654      	mov	r4, sl
   84b6e:	e483      	b.n	84478 <_vfiprintf_r+0x64>
   84b70:	4620      	mov	r0, r4
   84b72:	9900      	ldr	r1, [sp, #0]
   84b74:	aa0d      	add	r2, sp, #52	; 0x34
   84b76:	9305      	str	r3, [sp, #20]
   84b78:	f7ff fc10 	bl	8439c <__sprint_r.part.0>
   84b7c:	b968      	cbnz	r0, 84b9a <_vfiprintf_r+0x786>
   84b7e:	990e      	ldr	r1, [sp, #56]	; 0x38
   84b80:	46d6      	mov	lr, sl
   84b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b84:	f101 0c01 	add.w	ip, r1, #1
   84b88:	9b05      	ldr	r3, [sp, #20]
   84b8a:	e7b5      	b.n	84af8 <_vfiprintf_r+0x6e4>
   84b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84b8e:	b123      	cbz	r3, 84b9a <_vfiprintf_r+0x786>
   84b90:	9801      	ldr	r0, [sp, #4]
   84b92:	9900      	ldr	r1, [sp, #0]
   84b94:	aa0d      	add	r2, sp, #52	; 0x34
   84b96:	f7ff fc01 	bl	8439c <__sprint_r.part.0>
   84b9a:	9b00      	ldr	r3, [sp, #0]
   84b9c:	899b      	ldrh	r3, [r3, #12]
   84b9e:	065b      	lsls	r3, r3, #25
   84ba0:	f53f ad23 	bmi.w	845ea <_vfiprintf_r+0x1d6>
   84ba4:	9802      	ldr	r0, [sp, #8]
   84ba6:	b02b      	add	sp, #172	; 0xac
   84ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bac:	2a00      	cmp	r2, #0
   84bae:	f040 8190 	bne.w	84ed2 <_vfiprintf_r+0xabe>
   84bb2:	464b      	mov	r3, r9
   84bb4:	4654      	mov	r4, sl
   84bb6:	9907      	ldr	r1, [sp, #28]
   84bb8:	2201      	movs	r2, #1
   84bba:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   84bbe:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   84bc2:	911a      	str	r1, [sp, #104]	; 0x68
   84bc4:	920e      	str	r2, [sp, #56]	; 0x38
   84bc6:	f104 0208 	add.w	r2, r4, #8
   84bca:	f018 0f04 	tst.w	r8, #4
   84bce:	d039      	beq.n	84c44 <_vfiprintf_r+0x830>
   84bd0:	9903      	ldr	r1, [sp, #12]
   84bd2:	1b8d      	subs	r5, r1, r6
   84bd4:	2d00      	cmp	r5, #0
   84bd6:	dd35      	ble.n	84c44 <_vfiprintf_r+0x830>
   84bd8:	2d10      	cmp	r5, #16
   84bda:	f340 8200 	ble.w	84fde <_vfiprintf_r+0xbca>
   84bde:	980e      	ldr	r0, [sp, #56]	; 0x38
   84be0:	4f6c      	ldr	r7, [pc, #432]	; (84d94 <_vfiprintf_r+0x980>)
   84be2:	2410      	movs	r4, #16
   84be4:	f8dd 8004 	ldr.w	r8, [sp, #4]
   84be8:	f8dd 9000 	ldr.w	r9, [sp]
   84bec:	e006      	b.n	84bfc <_vfiprintf_r+0x7e8>
   84bee:	f100 0e02 	add.w	lr, r0, #2
   84bf2:	4608      	mov	r0, r1
   84bf4:	3208      	adds	r2, #8
   84bf6:	3d10      	subs	r5, #16
   84bf8:	2d10      	cmp	r5, #16
   84bfa:	dd10      	ble.n	84c1e <_vfiprintf_r+0x80a>
   84bfc:	1c41      	adds	r1, r0, #1
   84bfe:	3310      	adds	r3, #16
   84c00:	2907      	cmp	r1, #7
   84c02:	930f      	str	r3, [sp, #60]	; 0x3c
   84c04:	6017      	str	r7, [r2, #0]
   84c06:	6054      	str	r4, [r2, #4]
   84c08:	910e      	str	r1, [sp, #56]	; 0x38
   84c0a:	ddf0      	ble.n	84bee <_vfiprintf_r+0x7da>
   84c0c:	2b00      	cmp	r3, #0
   84c0e:	d12a      	bne.n	84c66 <_vfiprintf_r+0x852>
   84c10:	3d10      	subs	r5, #16
   84c12:	2d10      	cmp	r5, #16
   84c14:	f04f 0e01 	mov.w	lr, #1
   84c18:	4618      	mov	r0, r3
   84c1a:	4652      	mov	r2, sl
   84c1c:	dcee      	bgt.n	84bfc <_vfiprintf_r+0x7e8>
   84c1e:	442b      	add	r3, r5
   84c20:	f1be 0f07 	cmp.w	lr, #7
   84c24:	930f      	str	r3, [sp, #60]	; 0x3c
   84c26:	6017      	str	r7, [r2, #0]
   84c28:	6055      	str	r5, [r2, #4]
   84c2a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84c2e:	dd09      	ble.n	84c44 <_vfiprintf_r+0x830>
   84c30:	2b00      	cmp	r3, #0
   84c32:	d092      	beq.n	84b5a <_vfiprintf_r+0x746>
   84c34:	9801      	ldr	r0, [sp, #4]
   84c36:	9900      	ldr	r1, [sp, #0]
   84c38:	aa0d      	add	r2, sp, #52	; 0x34
   84c3a:	f7ff fbaf 	bl	8439c <__sprint_r.part.0>
   84c3e:	2800      	cmp	r0, #0
   84c40:	d1ab      	bne.n	84b9a <_vfiprintf_r+0x786>
   84c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84c44:	9a02      	ldr	r2, [sp, #8]
   84c46:	9903      	ldr	r1, [sp, #12]
   84c48:	428e      	cmp	r6, r1
   84c4a:	bfac      	ite	ge
   84c4c:	1992      	addge	r2, r2, r6
   84c4e:	1852      	addlt	r2, r2, r1
   84c50:	9202      	str	r2, [sp, #8]
   84c52:	2b00      	cmp	r3, #0
   84c54:	d088      	beq.n	84b68 <_vfiprintf_r+0x754>
   84c56:	9801      	ldr	r0, [sp, #4]
   84c58:	9900      	ldr	r1, [sp, #0]
   84c5a:	aa0d      	add	r2, sp, #52	; 0x34
   84c5c:	f7ff fb9e 	bl	8439c <__sprint_r.part.0>
   84c60:	2800      	cmp	r0, #0
   84c62:	d081      	beq.n	84b68 <_vfiprintf_r+0x754>
   84c64:	e799      	b.n	84b9a <_vfiprintf_r+0x786>
   84c66:	4640      	mov	r0, r8
   84c68:	4649      	mov	r1, r9
   84c6a:	aa0d      	add	r2, sp, #52	; 0x34
   84c6c:	f7ff fb96 	bl	8439c <__sprint_r.part.0>
   84c70:	2800      	cmp	r0, #0
   84c72:	d192      	bne.n	84b9a <_vfiprintf_r+0x786>
   84c74:	980e      	ldr	r0, [sp, #56]	; 0x38
   84c76:	4652      	mov	r2, sl
   84c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84c7a:	f100 0e01 	add.w	lr, r0, #1
   84c7e:	e7ba      	b.n	84bf6 <_vfiprintf_r+0x7e2>
   84c80:	9b03      	ldr	r3, [sp, #12]
   84c82:	1b9f      	subs	r7, r3, r6
   84c84:	2f00      	cmp	r7, #0
   84c86:	f77f af27 	ble.w	84ad8 <_vfiprintf_r+0x6c4>
   84c8a:	2f10      	cmp	r7, #16
   84c8c:	f340 81b3 	ble.w	84ff6 <_vfiprintf_r+0xbe2>
   84c90:	4620      	mov	r0, r4
   84c92:	4d3f      	ldr	r5, [pc, #252]	; (84d90 <_vfiprintf_r+0x97c>)
   84c94:	4664      	mov	r4, ip
   84c96:	2310      	movs	r3, #16
   84c98:	4684      	mov	ip, r0
   84c9a:	e007      	b.n	84cac <_vfiprintf_r+0x898>
   84c9c:	f101 0e02 	add.w	lr, r1, #2
   84ca0:	4601      	mov	r1, r0
   84ca2:	f10c 0c08 	add.w	ip, ip, #8
   84ca6:	3f10      	subs	r7, #16
   84ca8:	2f10      	cmp	r7, #16
   84caa:	dd11      	ble.n	84cd0 <_vfiprintf_r+0x8bc>
   84cac:	1c48      	adds	r0, r1, #1
   84cae:	3210      	adds	r2, #16
   84cb0:	2807      	cmp	r0, #7
   84cb2:	920f      	str	r2, [sp, #60]	; 0x3c
   84cb4:	f8cc 5000 	str.w	r5, [ip]
   84cb8:	f8cc 3004 	str.w	r3, [ip, #4]
   84cbc:	900e      	str	r0, [sp, #56]	; 0x38
   84cbe:	dded      	ble.n	84c9c <_vfiprintf_r+0x888>
   84cc0:	b9c2      	cbnz	r2, 84cf4 <_vfiprintf_r+0x8e0>
   84cc2:	3f10      	subs	r7, #16
   84cc4:	2f10      	cmp	r7, #16
   84cc6:	f04f 0e01 	mov.w	lr, #1
   84cca:	4611      	mov	r1, r2
   84ccc:	46d4      	mov	ip, sl
   84cce:	dced      	bgt.n	84cac <_vfiprintf_r+0x898>
   84cd0:	4663      	mov	r3, ip
   84cd2:	46a4      	mov	ip, r4
   84cd4:	461c      	mov	r4, r3
   84cd6:	443a      	add	r2, r7
   84cd8:	f1be 0f07 	cmp.w	lr, #7
   84cdc:	920f      	str	r2, [sp, #60]	; 0x3c
   84cde:	e884 00a0 	stmia.w	r4, {r5, r7}
   84ce2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84ce6:	f300 80ee 	bgt.w	84ec6 <_vfiprintf_r+0xab2>
   84cea:	3408      	adds	r4, #8
   84cec:	f10e 0001 	add.w	r0, lr, #1
   84cf0:	4671      	mov	r1, lr
   84cf2:	e6f1      	b.n	84ad8 <_vfiprintf_r+0x6c4>
   84cf4:	9801      	ldr	r0, [sp, #4]
   84cf6:	9900      	ldr	r1, [sp, #0]
   84cf8:	aa0d      	add	r2, sp, #52	; 0x34
   84cfa:	9305      	str	r3, [sp, #20]
   84cfc:	f7ff fb4e 	bl	8439c <__sprint_r.part.0>
   84d00:	2800      	cmp	r0, #0
   84d02:	f47f af4a 	bne.w	84b9a <_vfiprintf_r+0x786>
   84d06:	990e      	ldr	r1, [sp, #56]	; 0x38
   84d08:	46d4      	mov	ip, sl
   84d0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84d0c:	f101 0e01 	add.w	lr, r1, #1
   84d10:	9b05      	ldr	r3, [sp, #20]
   84d12:	e7c8      	b.n	84ca6 <_vfiprintf_r+0x892>
   84d14:	2a00      	cmp	r2, #0
   84d16:	f040 80c5 	bne.w	84ea4 <_vfiprintf_r+0xa90>
   84d1a:	9b05      	ldr	r3, [sp, #20]
   84d1c:	2b00      	cmp	r3, #0
   84d1e:	f000 8085 	beq.w	84e2c <_vfiprintf_r+0xa18>
   84d22:	aa0c      	add	r2, sp, #48	; 0x30
   84d24:	2302      	movs	r3, #2
   84d26:	921a      	str	r2, [sp, #104]	; 0x68
   84d28:	4608      	mov	r0, r1
   84d2a:	931b      	str	r3, [sp, #108]	; 0x6c
   84d2c:	461a      	mov	r2, r3
   84d2e:	4654      	mov	r4, sl
   84d30:	e6cb      	b.n	84aca <_vfiprintf_r+0x6b6>
   84d32:	2a00      	cmp	r2, #0
   84d34:	f040 80a5 	bne.w	84e82 <_vfiprintf_r+0xa6e>
   84d38:	2001      	movs	r0, #1
   84d3a:	4611      	mov	r1, r2
   84d3c:	4654      	mov	r4, sl
   84d3e:	e6c7      	b.n	84ad0 <_vfiprintf_r+0x6bc>
   84d40:	bb03      	cbnz	r3, 84d84 <_vfiprintf_r+0x970>
   84d42:	f018 0f01 	tst.w	r8, #1
   84d46:	d01d      	beq.n	84d84 <_vfiprintf_r+0x970>
   84d48:	ab2a      	add	r3, sp, #168	; 0xa8
   84d4a:	2230      	movs	r2, #48	; 0x30
   84d4c:	f803 2d41 	strb.w	r2, [r3, #-65]!
   84d50:	ebc3 090a 	rsb	r9, r3, sl
   84d54:	9307      	str	r3, [sp, #28]
   84d56:	e48f      	b.n	84678 <_vfiprintf_r+0x264>
   84d58:	46d1      	mov	r9, sl
   84d5a:	9809      	ldr	r0, [sp, #36]	; 0x24
   84d5c:	0933      	lsrs	r3, r6, #4
   84d5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   84d62:	0939      	lsrs	r1, r7, #4
   84d64:	f006 020f 	and.w	r2, r6, #15
   84d68:	460f      	mov	r7, r1
   84d6a:	461e      	mov	r6, r3
   84d6c:	5c83      	ldrb	r3, [r0, r2]
   84d6e:	f809 3d01 	strb.w	r3, [r9, #-1]!
   84d72:	ea56 0307 	orrs.w	r3, r6, r7
   84d76:	d1f1      	bne.n	84d5c <_vfiprintf_r+0x948>
   84d78:	464b      	mov	r3, r9
   84d7a:	f8cd 901c 	str.w	r9, [sp, #28]
   84d7e:	ebc3 090a 	rsb	r9, r3, sl
   84d82:	e479      	b.n	84678 <_vfiprintf_r+0x264>
   84d84:	f8cd a01c 	str.w	sl, [sp, #28]
   84d88:	e476      	b.n	84678 <_vfiprintf_r+0x264>
   84d8a:	2302      	movs	r3, #2
   84d8c:	e445      	b.n	8461a <_vfiprintf_r+0x206>
   84d8e:	bf00      	nop
   84d90:	00088b90 	.word	0x00088b90
   84d94:	00088bd0 	.word	0x00088bd0
   84d98:	2a00      	cmp	r2, #0
   84d9a:	f040 80d5 	bne.w	84f48 <_vfiprintf_r+0xb34>
   84d9e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84da2:	2b00      	cmp	r3, #0
   84da4:	f000 80ac 	beq.w	84f00 <_vfiprintf_r+0xaec>
   84da8:	2301      	movs	r3, #1
   84daa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84dae:	4618      	mov	r0, r3
   84db0:	931b      	str	r3, [sp, #108]	; 0x6c
   84db2:	461a      	mov	r2, r3
   84db4:	911a      	str	r1, [sp, #104]	; 0x68
   84db6:	4654      	mov	r4, sl
   84db8:	e678      	b.n	84aac <_vfiprintf_r+0x698>
   84dba:	9a03      	ldr	r2, [sp, #12]
   84dbc:	1b95      	subs	r5, r2, r6
   84dbe:	2d00      	cmp	r5, #0
   84dc0:	4652      	mov	r2, sl
   84dc2:	f73f af09 	bgt.w	84bd8 <_vfiprintf_r+0x7c4>
   84dc6:	e6c8      	b.n	84b5a <_vfiprintf_r+0x746>
   84dc8:	465d      	mov	r5, fp
   84dca:	f7ff bb7c 	b.w	844c6 <_vfiprintf_r+0xb2>
   84dce:	9801      	ldr	r0, [sp, #4]
   84dd0:	9900      	ldr	r1, [sp, #0]
   84dd2:	aa0d      	add	r2, sp, #52	; 0x34
   84dd4:	f7ff fae2 	bl	8439c <__sprint_r.part.0>
   84dd8:	2800      	cmp	r0, #0
   84dda:	f47f aede 	bne.w	84b9a <_vfiprintf_r+0x786>
   84dde:	4652      	mov	r2, sl
   84de0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84de2:	e6f2      	b.n	84bca <_vfiprintf_r+0x7b6>
   84de4:	9904      	ldr	r1, [sp, #16]
   84de6:	2700      	movs	r7, #0
   84de8:	460a      	mov	r2, r1
   84dea:	3204      	adds	r2, #4
   84dec:	680e      	ldr	r6, [r1, #0]
   84dee:	9204      	str	r2, [sp, #16]
   84df0:	e413      	b.n	8461a <_vfiprintf_r+0x206>
   84df2:	3204      	adds	r2, #4
   84df4:	681e      	ldr	r6, [r3, #0]
   84df6:	2700      	movs	r7, #0
   84df8:	2301      	movs	r3, #1
   84dfa:	9204      	str	r2, [sp, #16]
   84dfc:	e40d      	b.n	8461a <_vfiprintf_r+0x206>
   84dfe:	6816      	ldr	r6, [r2, #0]
   84e00:	3204      	adds	r2, #4
   84e02:	9204      	str	r2, [sp, #16]
   84e04:	2700      	movs	r7, #0
   84e06:	e52d      	b.n	84864 <_vfiprintf_r+0x450>
   84e08:	681e      	ldr	r6, [r3, #0]
   84e0a:	3304      	adds	r3, #4
   84e0c:	17f7      	asrs	r7, r6, #31
   84e0e:	9304      	str	r3, [sp, #16]
   84e10:	4632      	mov	r2, r6
   84e12:	463b      	mov	r3, r7
   84e14:	e4c1      	b.n	8479a <_vfiprintf_r+0x386>
   84e16:	9801      	ldr	r0, [sp, #4]
   84e18:	9900      	ldr	r1, [sp, #0]
   84e1a:	aa0d      	add	r2, sp, #52	; 0x34
   84e1c:	f7ff fabe 	bl	8439c <__sprint_r.part.0>
   84e20:	2800      	cmp	r0, #0
   84e22:	f47f aeba 	bne.w	84b9a <_vfiprintf_r+0x786>
   84e26:	4654      	mov	r4, sl
   84e28:	f7ff bbc0 	b.w	845ac <_vfiprintf_r+0x198>
   84e2c:	4608      	mov	r0, r1
   84e2e:	4654      	mov	r4, sl
   84e30:	4611      	mov	r1, r2
   84e32:	e64d      	b.n	84ad0 <_vfiprintf_r+0x6bc>
   84e34:	46d1      	mov	r9, sl
   84e36:	f8cd c014 	str.w	ip, [sp, #20]
   84e3a:	4630      	mov	r0, r6
   84e3c:	4639      	mov	r1, r7
   84e3e:	220a      	movs	r2, #10
   84e40:	2300      	movs	r3, #0
   84e42:	f003 fb55 	bl	884f0 <__aeabi_uldivmod>
   84e46:	3230      	adds	r2, #48	; 0x30
   84e48:	4630      	mov	r0, r6
   84e4a:	4639      	mov	r1, r7
   84e4c:	f809 2d01 	strb.w	r2, [r9, #-1]!
   84e50:	2300      	movs	r3, #0
   84e52:	220a      	movs	r2, #10
   84e54:	f003 fb4c 	bl	884f0 <__aeabi_uldivmod>
   84e58:	4606      	mov	r6, r0
   84e5a:	460f      	mov	r7, r1
   84e5c:	ea56 0307 	orrs.w	r3, r6, r7
   84e60:	d1eb      	bne.n	84e3a <_vfiprintf_r+0xa26>
   84e62:	f8dd c014 	ldr.w	ip, [sp, #20]
   84e66:	e787      	b.n	84d78 <_vfiprintf_r+0x964>
   84e68:	2b30      	cmp	r3, #48	; 0x30
   84e6a:	9b07      	ldr	r3, [sp, #28]
   84e6c:	d087      	beq.n	84d7e <_vfiprintf_r+0x96a>
   84e6e:	3b01      	subs	r3, #1
   84e70:	461a      	mov	r2, r3
   84e72:	9307      	str	r3, [sp, #28]
   84e74:	2330      	movs	r3, #48	; 0x30
   84e76:	ebc2 090a 	rsb	r9, r2, sl
   84e7a:	f801 3c01 	strb.w	r3, [r1, #-1]
   84e7e:	f7ff bbfb 	b.w	84678 <_vfiprintf_r+0x264>
   84e82:	9801      	ldr	r0, [sp, #4]
   84e84:	9900      	ldr	r1, [sp, #0]
   84e86:	aa0d      	add	r2, sp, #52	; 0x34
   84e88:	f8cd c014 	str.w	ip, [sp, #20]
   84e8c:	f7ff fa86 	bl	8439c <__sprint_r.part.0>
   84e90:	2800      	cmp	r0, #0
   84e92:	f47f ae82 	bne.w	84b9a <_vfiprintf_r+0x786>
   84e96:	990e      	ldr	r1, [sp, #56]	; 0x38
   84e98:	4654      	mov	r4, sl
   84e9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84e9c:	1c48      	adds	r0, r1, #1
   84e9e:	f8dd c014 	ldr.w	ip, [sp, #20]
   84ea2:	e615      	b.n	84ad0 <_vfiprintf_r+0x6bc>
   84ea4:	9801      	ldr	r0, [sp, #4]
   84ea6:	9900      	ldr	r1, [sp, #0]
   84ea8:	aa0d      	add	r2, sp, #52	; 0x34
   84eaa:	f8cd c020 	str.w	ip, [sp, #32]
   84eae:	f7ff fa75 	bl	8439c <__sprint_r.part.0>
   84eb2:	2800      	cmp	r0, #0
   84eb4:	f47f ae71 	bne.w	84b9a <_vfiprintf_r+0x786>
   84eb8:	990e      	ldr	r1, [sp, #56]	; 0x38
   84eba:	4654      	mov	r4, sl
   84ebc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84ebe:	1c48      	adds	r0, r1, #1
   84ec0:	f8dd c020 	ldr.w	ip, [sp, #32]
   84ec4:	e5f5      	b.n	84ab2 <_vfiprintf_r+0x69e>
   84ec6:	2a00      	cmp	r2, #0
   84ec8:	d167      	bne.n	84f9a <_vfiprintf_r+0xb86>
   84eca:	2001      	movs	r0, #1
   84ecc:	4611      	mov	r1, r2
   84ece:	4654      	mov	r4, sl
   84ed0:	e602      	b.n	84ad8 <_vfiprintf_r+0x6c4>
   84ed2:	9801      	ldr	r0, [sp, #4]
   84ed4:	9900      	ldr	r1, [sp, #0]
   84ed6:	aa0d      	add	r2, sp, #52	; 0x34
   84ed8:	f7ff fa60 	bl	8439c <__sprint_r.part.0>
   84edc:	2800      	cmp	r0, #0
   84ede:	f47f ae5c 	bne.w	84b9a <_vfiprintf_r+0x786>
   84ee2:	980e      	ldr	r0, [sp, #56]	; 0x38
   84ee4:	4654      	mov	r4, sl
   84ee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84ee8:	3001      	adds	r0, #1
   84eea:	e625      	b.n	84b38 <_vfiprintf_r+0x724>
   84eec:	252d      	movs	r5, #45	; 0x2d
   84eee:	4276      	negs	r6, r6
   84ef0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   84ef4:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   84ef8:	46e1      	mov	r9, ip
   84efa:	2301      	movs	r3, #1
   84efc:	f7ff bb93 	b.w	84626 <_vfiprintf_r+0x212>
   84f00:	9b05      	ldr	r3, [sp, #20]
   84f02:	4611      	mov	r1, r2
   84f04:	2001      	movs	r0, #1
   84f06:	4654      	mov	r4, sl
   84f08:	2b00      	cmp	r3, #0
   84f0a:	f43f ade5 	beq.w	84ad8 <_vfiprintf_r+0x6c4>
   84f0e:	aa0c      	add	r2, sp, #48	; 0x30
   84f10:	2302      	movs	r3, #2
   84f12:	e88a 000c 	stmia.w	sl, {r2, r3}
   84f16:	461a      	mov	r2, r3
   84f18:	e5d7      	b.n	84aca <_vfiprintf_r+0x6b6>
   84f1a:	f018 0f10 	tst.w	r8, #16
   84f1e:	d10b      	bne.n	84f38 <_vfiprintf_r+0xb24>
   84f20:	f018 0f40 	tst.w	r8, #64	; 0x40
   84f24:	d008      	beq.n	84f38 <_vfiprintf_r+0xb24>
   84f26:	9a04      	ldr	r2, [sp, #16]
   84f28:	6813      	ldr	r3, [r2, #0]
   84f2a:	3204      	adds	r2, #4
   84f2c:	9204      	str	r2, [sp, #16]
   84f2e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84f32:	801a      	strh	r2, [r3, #0]
   84f34:	f7ff baa0 	b.w	84478 <_vfiprintf_r+0x64>
   84f38:	9a04      	ldr	r2, [sp, #16]
   84f3a:	6813      	ldr	r3, [r2, #0]
   84f3c:	3204      	adds	r2, #4
   84f3e:	9204      	str	r2, [sp, #16]
   84f40:	9a02      	ldr	r2, [sp, #8]
   84f42:	601a      	str	r2, [r3, #0]
   84f44:	f7ff ba98 	b.w	84478 <_vfiprintf_r+0x64>
   84f48:	9801      	ldr	r0, [sp, #4]
   84f4a:	9900      	ldr	r1, [sp, #0]
   84f4c:	aa0d      	add	r2, sp, #52	; 0x34
   84f4e:	f8cd c020 	str.w	ip, [sp, #32]
   84f52:	f7ff fa23 	bl	8439c <__sprint_r.part.0>
   84f56:	2800      	cmp	r0, #0
   84f58:	f47f ae1f 	bne.w	84b9a <_vfiprintf_r+0x786>
   84f5c:	990e      	ldr	r1, [sp, #56]	; 0x38
   84f5e:	4654      	mov	r4, sl
   84f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84f62:	1c48      	adds	r0, r1, #1
   84f64:	f8dd c020 	ldr.w	ip, [sp, #32]
   84f68:	e592      	b.n	84a90 <_vfiprintf_r+0x67c>
   84f6a:	f048 0820 	orr.w	r8, r8, #32
   84f6e:	f10b 0001 	add.w	r0, fp, #1
   84f72:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84f76:	f7ff bab6 	b.w	844e6 <_vfiprintf_r+0xd2>
   84f7a:	426d      	negs	r5, r5
   84f7c:	9304      	str	r3, [sp, #16]
   84f7e:	4658      	mov	r0, fp
   84f80:	f7ff bbc8 	b.w	84714 <_vfiprintf_r+0x300>
   84f84:	9807      	ldr	r0, [sp, #28]
   84f86:	9504      	str	r5, [sp, #16]
   84f88:	f7fe f8c0 	bl	8310c <strlen>
   84f8c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84f90:	4681      	mov	r9, r0
   84f92:	f04f 0c00 	mov.w	ip, #0
   84f96:	f7ff bb6f 	b.w	84678 <_vfiprintf_r+0x264>
   84f9a:	9801      	ldr	r0, [sp, #4]
   84f9c:	9900      	ldr	r1, [sp, #0]
   84f9e:	aa0d      	add	r2, sp, #52	; 0x34
   84fa0:	f8cd c014 	str.w	ip, [sp, #20]
   84fa4:	f7ff f9fa 	bl	8439c <__sprint_r.part.0>
   84fa8:	2800      	cmp	r0, #0
   84faa:	f47f adf6 	bne.w	84b9a <_vfiprintf_r+0x786>
   84fae:	990e      	ldr	r1, [sp, #56]	; 0x38
   84fb0:	4654      	mov	r4, sl
   84fb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84fb4:	1c48      	adds	r0, r1, #1
   84fb6:	f8dd c014 	ldr.w	ip, [sp, #20]
   84fba:	e58d      	b.n	84ad8 <_vfiprintf_r+0x6c4>
   84fbc:	990e      	ldr	r1, [sp, #56]	; 0x38
   84fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84fc0:	3101      	adds	r1, #1
   84fc2:	4f15      	ldr	r7, [pc, #84]	; (85018 <_vfiprintf_r+0xc04>)
   84fc4:	f7ff bb9a 	b.w	846fc <_vfiprintf_r+0x2e8>
   84fc8:	2e06      	cmp	r6, #6
   84fca:	4b14      	ldr	r3, [pc, #80]	; (8501c <_vfiprintf_r+0xc08>)
   84fcc:	bf28      	it	cs
   84fce:	f04f 0c06 	movcs.w	ip, #6
   84fd2:	46e1      	mov	r9, ip
   84fd4:	9504      	str	r5, [sp, #16]
   84fd6:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   84fda:	9307      	str	r3, [sp, #28]
   84fdc:	e463      	b.n	848a6 <_vfiprintf_r+0x492>
   84fde:	990e      	ldr	r1, [sp, #56]	; 0x38
   84fe0:	4f0d      	ldr	r7, [pc, #52]	; (85018 <_vfiprintf_r+0xc04>)
   84fe2:	f101 0e01 	add.w	lr, r1, #1
   84fe6:	e61a      	b.n	84c1e <_vfiprintf_r+0x80a>
   84fe8:	46e1      	mov	r9, ip
   84fea:	9504      	str	r5, [sp, #16]
   84fec:	4684      	mov	ip, r0
   84fee:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84ff2:	f7ff bb41 	b.w	84678 <_vfiprintf_r+0x264>
   84ff6:	4686      	mov	lr, r0
   84ff8:	4d09      	ldr	r5, [pc, #36]	; (85020 <_vfiprintf_r+0xc0c>)
   84ffa:	e66c      	b.n	84cd6 <_vfiprintf_r+0x8c2>
   84ffc:	9a04      	ldr	r2, [sp, #16]
   84ffe:	f89b 3001 	ldrb.w	r3, [fp, #1]
   85002:	6816      	ldr	r6, [r2, #0]
   85004:	3204      	adds	r2, #4
   85006:	2e00      	cmp	r6, #0
   85008:	9204      	str	r2, [sp, #16]
   8500a:	f6bf aa6c 	bge.w	844e6 <_vfiprintf_r+0xd2>
   8500e:	f04f 36ff 	mov.w	r6, #4294967295
   85012:	f7ff ba68 	b.w	844e6 <_vfiprintf_r+0xd2>
   85016:	bf00      	nop
   85018:	00088bd0 	.word	0x00088bd0
   8501c:	00088bc8 	.word	0x00088bc8
   85020:	00088b90 	.word	0x00088b90

00085024 <__sbprintf>:
   85024:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   85028:	4688      	mov	r8, r1
   8502a:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   8502c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   85030:	9719      	str	r7, [sp, #100]	; 0x64
   85032:	f8d8 701c 	ldr.w	r7, [r8, #28]
   85036:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   8503a:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   8503e:	9707      	str	r7, [sp, #28]
   85040:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   85044:	ac1a      	add	r4, sp, #104	; 0x68
   85046:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8504a:	f02e 0e02 	bic.w	lr, lr, #2
   8504e:	2600      	movs	r6, #0
   85050:	4669      	mov	r1, sp
   85052:	9400      	str	r4, [sp, #0]
   85054:	9404      	str	r4, [sp, #16]
   85056:	9502      	str	r5, [sp, #8]
   85058:	9505      	str	r5, [sp, #20]
   8505a:	f8ad e00c 	strh.w	lr, [sp, #12]
   8505e:	f8ad a00e 	strh.w	sl, [sp, #14]
   85062:	9709      	str	r7, [sp, #36]	; 0x24
   85064:	9606      	str	r6, [sp, #24]
   85066:	4605      	mov	r5, r0
   85068:	f7ff f9d4 	bl	84414 <_vfiprintf_r>
   8506c:	1e04      	subs	r4, r0, #0
   8506e:	db07      	blt.n	85080 <__sbprintf+0x5c>
   85070:	4628      	mov	r0, r5
   85072:	4669      	mov	r1, sp
   85074:	f000 f92a 	bl	852cc <_fflush_r>
   85078:	42b0      	cmp	r0, r6
   8507a:	bf18      	it	ne
   8507c:	f04f 34ff 	movne.w	r4, #4294967295
   85080:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   85084:	065b      	lsls	r3, r3, #25
   85086:	d505      	bpl.n	85094 <__sbprintf+0x70>
   85088:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8508c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85090:	f8a8 300c 	strh.w	r3, [r8, #12]
   85094:	4620      	mov	r0, r4
   85096:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8509a:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   8509e:	bf00      	nop

000850a0 <__swsetup_r>:
   850a0:	b538      	push	{r3, r4, r5, lr}
   850a2:	4b2f      	ldr	r3, [pc, #188]	; (85160 <__swsetup_r+0xc0>)
   850a4:	4605      	mov	r5, r0
   850a6:	6818      	ldr	r0, [r3, #0]
   850a8:	460c      	mov	r4, r1
   850aa:	b110      	cbz	r0, 850b2 <__swsetup_r+0x12>
   850ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
   850ae:	2b00      	cmp	r3, #0
   850b0:	d036      	beq.n	85120 <__swsetup_r+0x80>
   850b2:	89a2      	ldrh	r2, [r4, #12]
   850b4:	b293      	uxth	r3, r2
   850b6:	0718      	lsls	r0, r3, #28
   850b8:	d50c      	bpl.n	850d4 <__swsetup_r+0x34>
   850ba:	6920      	ldr	r0, [r4, #16]
   850bc:	b1a8      	cbz	r0, 850ea <__swsetup_r+0x4a>
   850be:	f013 0201 	ands.w	r2, r3, #1
   850c2:	d01e      	beq.n	85102 <__swsetup_r+0x62>
   850c4:	6963      	ldr	r3, [r4, #20]
   850c6:	2200      	movs	r2, #0
   850c8:	425b      	negs	r3, r3
   850ca:	61a3      	str	r3, [r4, #24]
   850cc:	60a2      	str	r2, [r4, #8]
   850ce:	b1f0      	cbz	r0, 8510e <__swsetup_r+0x6e>
   850d0:	2000      	movs	r0, #0
   850d2:	bd38      	pop	{r3, r4, r5, pc}
   850d4:	06d9      	lsls	r1, r3, #27
   850d6:	d53a      	bpl.n	8514e <__swsetup_r+0xae>
   850d8:	0758      	lsls	r0, r3, #29
   850da:	d424      	bmi.n	85126 <__swsetup_r+0x86>
   850dc:	6920      	ldr	r0, [r4, #16]
   850de:	f042 0308 	orr.w	r3, r2, #8
   850e2:	81a3      	strh	r3, [r4, #12]
   850e4:	b29b      	uxth	r3, r3
   850e6:	2800      	cmp	r0, #0
   850e8:	d1e9      	bne.n	850be <__swsetup_r+0x1e>
   850ea:	f403 7220 	and.w	r2, r3, #640	; 0x280
   850ee:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   850f2:	d0e4      	beq.n	850be <__swsetup_r+0x1e>
   850f4:	4628      	mov	r0, r5
   850f6:	4621      	mov	r1, r4
   850f8:	f001 f8c4 	bl	86284 <__smakebuf_r>
   850fc:	89a3      	ldrh	r3, [r4, #12]
   850fe:	6920      	ldr	r0, [r4, #16]
   85100:	e7dd      	b.n	850be <__swsetup_r+0x1e>
   85102:	0799      	lsls	r1, r3, #30
   85104:	bf58      	it	pl
   85106:	6962      	ldrpl	r2, [r4, #20]
   85108:	60a2      	str	r2, [r4, #8]
   8510a:	2800      	cmp	r0, #0
   8510c:	d1e0      	bne.n	850d0 <__swsetup_r+0x30>
   8510e:	89a3      	ldrh	r3, [r4, #12]
   85110:	061a      	lsls	r2, r3, #24
   85112:	d5de      	bpl.n	850d2 <__swsetup_r+0x32>
   85114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85118:	81a3      	strh	r3, [r4, #12]
   8511a:	f04f 30ff 	mov.w	r0, #4294967295
   8511e:	bd38      	pop	{r3, r4, r5, pc}
   85120:	f000 f97a 	bl	85418 <__sinit>
   85124:	e7c5      	b.n	850b2 <__swsetup_r+0x12>
   85126:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85128:	b149      	cbz	r1, 8513e <__swsetup_r+0x9e>
   8512a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8512e:	4299      	cmp	r1, r3
   85130:	d003      	beq.n	8513a <__swsetup_r+0x9a>
   85132:	4628      	mov	r0, r5
   85134:	f000 fa48 	bl	855c8 <_free_r>
   85138:	89a2      	ldrh	r2, [r4, #12]
   8513a:	2300      	movs	r3, #0
   8513c:	6323      	str	r3, [r4, #48]	; 0x30
   8513e:	6920      	ldr	r0, [r4, #16]
   85140:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   85144:	2300      	movs	r3, #0
   85146:	b292      	uxth	r2, r2
   85148:	e884 0009 	stmia.w	r4, {r0, r3}
   8514c:	e7c7      	b.n	850de <__swsetup_r+0x3e>
   8514e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   85152:	2309      	movs	r3, #9
   85154:	602b      	str	r3, [r5, #0]
   85156:	f04f 30ff 	mov.w	r0, #4294967295
   8515a:	81a2      	strh	r2, [r4, #12]
   8515c:	bd38      	pop	{r3, r4, r5, pc}
   8515e:	bf00      	nop
   85160:	20070568 	.word	0x20070568

00085164 <register_fini>:
   85164:	4b02      	ldr	r3, [pc, #8]	; (85170 <register_fini+0xc>)
   85166:	b113      	cbz	r3, 8516e <register_fini+0xa>
   85168:	4802      	ldr	r0, [pc, #8]	; (85174 <register_fini+0x10>)
   8516a:	f000 b805 	b.w	85178 <atexit>
   8516e:	4770      	bx	lr
   85170:	00000000 	.word	0x00000000
   85174:	0008542d 	.word	0x0008542d

00085178 <atexit>:
   85178:	4601      	mov	r1, r0
   8517a:	2000      	movs	r0, #0
   8517c:	4602      	mov	r2, r0
   8517e:	4603      	mov	r3, r0
   85180:	f002 bbf8 	b.w	87974 <__register_exitproc>

00085184 <__sflush_r>:
   85184:	898b      	ldrh	r3, [r1, #12]
   85186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8518a:	b29a      	uxth	r2, r3
   8518c:	460d      	mov	r5, r1
   8518e:	0711      	lsls	r1, r2, #28
   85190:	4680      	mov	r8, r0
   85192:	d43c      	bmi.n	8520e <__sflush_r+0x8a>
   85194:	686a      	ldr	r2, [r5, #4]
   85196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8519a:	2a00      	cmp	r2, #0
   8519c:	81ab      	strh	r3, [r5, #12]
   8519e:	dd65      	ble.n	8526c <__sflush_r+0xe8>
   851a0:	6aae      	ldr	r6, [r5, #40]	; 0x28
   851a2:	2e00      	cmp	r6, #0
   851a4:	d04b      	beq.n	8523e <__sflush_r+0xba>
   851a6:	b29b      	uxth	r3, r3
   851a8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   851ac:	2100      	movs	r1, #0
   851ae:	b292      	uxth	r2, r2
   851b0:	f8d8 4000 	ldr.w	r4, [r8]
   851b4:	f8c8 1000 	str.w	r1, [r8]
   851b8:	2a00      	cmp	r2, #0
   851ba:	d05b      	beq.n	85274 <__sflush_r+0xf0>
   851bc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   851be:	075f      	lsls	r7, r3, #29
   851c0:	d505      	bpl.n	851ce <__sflush_r+0x4a>
   851c2:	6869      	ldr	r1, [r5, #4]
   851c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   851c6:	1a52      	subs	r2, r2, r1
   851c8:	b10b      	cbz	r3, 851ce <__sflush_r+0x4a>
   851ca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   851cc:	1ad2      	subs	r2, r2, r3
   851ce:	4640      	mov	r0, r8
   851d0:	69e9      	ldr	r1, [r5, #28]
   851d2:	2300      	movs	r3, #0
   851d4:	47b0      	blx	r6
   851d6:	1c46      	adds	r6, r0, #1
   851d8:	d056      	beq.n	85288 <__sflush_r+0x104>
   851da:	89ab      	ldrh	r3, [r5, #12]
   851dc:	692a      	ldr	r2, [r5, #16]
   851de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   851e2:	b29b      	uxth	r3, r3
   851e4:	2100      	movs	r1, #0
   851e6:	602a      	str	r2, [r5, #0]
   851e8:	04da      	lsls	r2, r3, #19
   851ea:	81ab      	strh	r3, [r5, #12]
   851ec:	6069      	str	r1, [r5, #4]
   851ee:	d43b      	bmi.n	85268 <__sflush_r+0xe4>
   851f0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   851f2:	f8c8 4000 	str.w	r4, [r8]
   851f6:	b311      	cbz	r1, 8523e <__sflush_r+0xba>
   851f8:	f105 0340 	add.w	r3, r5, #64	; 0x40
   851fc:	4299      	cmp	r1, r3
   851fe:	d002      	beq.n	85206 <__sflush_r+0x82>
   85200:	4640      	mov	r0, r8
   85202:	f000 f9e1 	bl	855c8 <_free_r>
   85206:	2000      	movs	r0, #0
   85208:	6328      	str	r0, [r5, #48]	; 0x30
   8520a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8520e:	692e      	ldr	r6, [r5, #16]
   85210:	b1ae      	cbz	r6, 8523e <__sflush_r+0xba>
   85212:	0791      	lsls	r1, r2, #30
   85214:	682c      	ldr	r4, [r5, #0]
   85216:	bf0c      	ite	eq
   85218:	696b      	ldreq	r3, [r5, #20]
   8521a:	2300      	movne	r3, #0
   8521c:	602e      	str	r6, [r5, #0]
   8521e:	1ba4      	subs	r4, r4, r6
   85220:	60ab      	str	r3, [r5, #8]
   85222:	e00a      	b.n	8523a <__sflush_r+0xb6>
   85224:	4632      	mov	r2, r6
   85226:	4623      	mov	r3, r4
   85228:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8522a:	4640      	mov	r0, r8
   8522c:	69e9      	ldr	r1, [r5, #28]
   8522e:	47b8      	blx	r7
   85230:	2800      	cmp	r0, #0
   85232:	eba4 0400 	sub.w	r4, r4, r0
   85236:	4406      	add	r6, r0
   85238:	dd04      	ble.n	85244 <__sflush_r+0xc0>
   8523a:	2c00      	cmp	r4, #0
   8523c:	dcf2      	bgt.n	85224 <__sflush_r+0xa0>
   8523e:	2000      	movs	r0, #0
   85240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85244:	89ab      	ldrh	r3, [r5, #12]
   85246:	f04f 30ff 	mov.w	r0, #4294967295
   8524a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8524e:	81ab      	strh	r3, [r5, #12]
   85250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85254:	89ab      	ldrh	r3, [r5, #12]
   85256:	692a      	ldr	r2, [r5, #16]
   85258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8525c:	b29b      	uxth	r3, r3
   8525e:	81ab      	strh	r3, [r5, #12]
   85260:	04db      	lsls	r3, r3, #19
   85262:	6069      	str	r1, [r5, #4]
   85264:	602a      	str	r2, [r5, #0]
   85266:	d5c3      	bpl.n	851f0 <__sflush_r+0x6c>
   85268:	6528      	str	r0, [r5, #80]	; 0x50
   8526a:	e7c1      	b.n	851f0 <__sflush_r+0x6c>
   8526c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8526e:	2a00      	cmp	r2, #0
   85270:	dc96      	bgt.n	851a0 <__sflush_r+0x1c>
   85272:	e7e4      	b.n	8523e <__sflush_r+0xba>
   85274:	2301      	movs	r3, #1
   85276:	4640      	mov	r0, r8
   85278:	69e9      	ldr	r1, [r5, #28]
   8527a:	47b0      	blx	r6
   8527c:	1c43      	adds	r3, r0, #1
   8527e:	4602      	mov	r2, r0
   85280:	d019      	beq.n	852b6 <__sflush_r+0x132>
   85282:	89ab      	ldrh	r3, [r5, #12]
   85284:	6aae      	ldr	r6, [r5, #40]	; 0x28
   85286:	e79a      	b.n	851be <__sflush_r+0x3a>
   85288:	f8d8 1000 	ldr.w	r1, [r8]
   8528c:	2900      	cmp	r1, #0
   8528e:	d0e1      	beq.n	85254 <__sflush_r+0xd0>
   85290:	291d      	cmp	r1, #29
   85292:	d007      	beq.n	852a4 <__sflush_r+0x120>
   85294:	2916      	cmp	r1, #22
   85296:	d005      	beq.n	852a4 <__sflush_r+0x120>
   85298:	89ab      	ldrh	r3, [r5, #12]
   8529a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8529e:	81ab      	strh	r3, [r5, #12]
   852a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852a4:	89ab      	ldrh	r3, [r5, #12]
   852a6:	6929      	ldr	r1, [r5, #16]
   852a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   852ac:	2200      	movs	r2, #0
   852ae:	81ab      	strh	r3, [r5, #12]
   852b0:	e885 0006 	stmia.w	r5, {r1, r2}
   852b4:	e79c      	b.n	851f0 <__sflush_r+0x6c>
   852b6:	f8d8 3000 	ldr.w	r3, [r8]
   852ba:	2b00      	cmp	r3, #0
   852bc:	d0e1      	beq.n	85282 <__sflush_r+0xfe>
   852be:	2b1d      	cmp	r3, #29
   852c0:	d001      	beq.n	852c6 <__sflush_r+0x142>
   852c2:	2b16      	cmp	r3, #22
   852c4:	d1be      	bne.n	85244 <__sflush_r+0xc0>
   852c6:	f8c8 4000 	str.w	r4, [r8]
   852ca:	e7b8      	b.n	8523e <__sflush_r+0xba>

000852cc <_fflush_r>:
   852cc:	b510      	push	{r4, lr}
   852ce:	4604      	mov	r4, r0
   852d0:	b082      	sub	sp, #8
   852d2:	b108      	cbz	r0, 852d8 <_fflush_r+0xc>
   852d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   852d6:	b153      	cbz	r3, 852ee <_fflush_r+0x22>
   852d8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   852dc:	b908      	cbnz	r0, 852e2 <_fflush_r+0x16>
   852de:	b002      	add	sp, #8
   852e0:	bd10      	pop	{r4, pc}
   852e2:	4620      	mov	r0, r4
   852e4:	b002      	add	sp, #8
   852e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   852ea:	f7ff bf4b 	b.w	85184 <__sflush_r>
   852ee:	9101      	str	r1, [sp, #4]
   852f0:	f000 f892 	bl	85418 <__sinit>
   852f4:	9901      	ldr	r1, [sp, #4]
   852f6:	e7ef      	b.n	852d8 <_fflush_r+0xc>

000852f8 <fflush>:
   852f8:	b120      	cbz	r0, 85304 <fflush+0xc>
   852fa:	4b05      	ldr	r3, [pc, #20]	; (85310 <fflush+0x18>)
   852fc:	4601      	mov	r1, r0
   852fe:	6818      	ldr	r0, [r3, #0]
   85300:	f7ff bfe4 	b.w	852cc <_fflush_r>
   85304:	4b03      	ldr	r3, [pc, #12]	; (85314 <fflush+0x1c>)
   85306:	4904      	ldr	r1, [pc, #16]	; (85318 <fflush+0x20>)
   85308:	6818      	ldr	r0, [r3, #0]
   8530a:	f000 bbe9 	b.w	85ae0 <_fwalk_reent>
   8530e:	bf00      	nop
   85310:	20070568 	.word	0x20070568
   85314:	00088b00 	.word	0x00088b00
   85318:	000852cd 	.word	0x000852cd

0008531c <_cleanup_r>:
   8531c:	4901      	ldr	r1, [pc, #4]	; (85324 <_cleanup_r+0x8>)
   8531e:	f000 bbdf 	b.w	85ae0 <_fwalk_reent>
   85322:	bf00      	nop
   85324:	00087a9d 	.word	0x00087a9d

00085328 <__sinit.part.1>:
   85328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8532c:	4607      	mov	r7, r0
   8532e:	4835      	ldr	r0, [pc, #212]	; (85404 <__sinit.part.1+0xdc>)
   85330:	687d      	ldr	r5, [r7, #4]
   85332:	2400      	movs	r4, #0
   85334:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   85338:	2304      	movs	r3, #4
   8533a:	2103      	movs	r1, #3
   8533c:	63f8      	str	r0, [r7, #60]	; 0x3c
   8533e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85342:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85346:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8534a:	b083      	sub	sp, #12
   8534c:	602c      	str	r4, [r5, #0]
   8534e:	606c      	str	r4, [r5, #4]
   85350:	60ac      	str	r4, [r5, #8]
   85352:	666c      	str	r4, [r5, #100]	; 0x64
   85354:	81ec      	strh	r4, [r5, #14]
   85356:	612c      	str	r4, [r5, #16]
   85358:	616c      	str	r4, [r5, #20]
   8535a:	61ac      	str	r4, [r5, #24]
   8535c:	81ab      	strh	r3, [r5, #12]
   8535e:	4621      	mov	r1, r4
   85360:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85364:	2208      	movs	r2, #8
   85366:	f7fd fde5 	bl	82f34 <memset>
   8536a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85408 <__sinit.part.1+0xe0>
   8536e:	68be      	ldr	r6, [r7, #8]
   85370:	f8df a098 	ldr.w	sl, [pc, #152]	; 8540c <__sinit.part.1+0xe4>
   85374:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85410 <__sinit.part.1+0xe8>
   85378:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85414 <__sinit.part.1+0xec>
   8537c:	2301      	movs	r3, #1
   8537e:	2209      	movs	r2, #9
   85380:	f8c5 b020 	str.w	fp, [r5, #32]
   85384:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85388:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8538c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85390:	61ed      	str	r5, [r5, #28]
   85392:	4621      	mov	r1, r4
   85394:	81f3      	strh	r3, [r6, #14]
   85396:	81b2      	strh	r2, [r6, #12]
   85398:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8539c:	6034      	str	r4, [r6, #0]
   8539e:	6074      	str	r4, [r6, #4]
   853a0:	60b4      	str	r4, [r6, #8]
   853a2:	6674      	str	r4, [r6, #100]	; 0x64
   853a4:	6134      	str	r4, [r6, #16]
   853a6:	6174      	str	r4, [r6, #20]
   853a8:	61b4      	str	r4, [r6, #24]
   853aa:	2208      	movs	r2, #8
   853ac:	9301      	str	r3, [sp, #4]
   853ae:	f7fd fdc1 	bl	82f34 <memset>
   853b2:	68fd      	ldr	r5, [r7, #12]
   853b4:	2012      	movs	r0, #18
   853b6:	2202      	movs	r2, #2
   853b8:	61f6      	str	r6, [r6, #28]
   853ba:	f8c6 b020 	str.w	fp, [r6, #32]
   853be:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   853c2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   853c6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   853ca:	4621      	mov	r1, r4
   853cc:	81a8      	strh	r0, [r5, #12]
   853ce:	81ea      	strh	r2, [r5, #14]
   853d0:	602c      	str	r4, [r5, #0]
   853d2:	606c      	str	r4, [r5, #4]
   853d4:	60ac      	str	r4, [r5, #8]
   853d6:	666c      	str	r4, [r5, #100]	; 0x64
   853d8:	612c      	str	r4, [r5, #16]
   853da:	616c      	str	r4, [r5, #20]
   853dc:	61ac      	str	r4, [r5, #24]
   853de:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   853e2:	2208      	movs	r2, #8
   853e4:	f7fd fda6 	bl	82f34 <memset>
   853e8:	9b01      	ldr	r3, [sp, #4]
   853ea:	61ed      	str	r5, [r5, #28]
   853ec:	f8c5 b020 	str.w	fp, [r5, #32]
   853f0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   853f4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   853f8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   853fc:	63bb      	str	r3, [r7, #56]	; 0x38
   853fe:	b003      	add	sp, #12
   85400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85404:	0008531d 	.word	0x0008531d
   85408:	000877b1 	.word	0x000877b1
   8540c:	000877d5 	.word	0x000877d5
   85410:	0008780d 	.word	0x0008780d
   85414:	0008782d 	.word	0x0008782d

00085418 <__sinit>:
   85418:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8541a:	b103      	cbz	r3, 8541e <__sinit+0x6>
   8541c:	4770      	bx	lr
   8541e:	f7ff bf83 	b.w	85328 <__sinit.part.1>
   85422:	bf00      	nop

00085424 <__sfp_lock_acquire>:
   85424:	4770      	bx	lr
   85426:	bf00      	nop

00085428 <__sfp_lock_release>:
   85428:	4770      	bx	lr
   8542a:	bf00      	nop

0008542c <__libc_fini_array>:
   8542c:	b538      	push	{r3, r4, r5, lr}
   8542e:	4b08      	ldr	r3, [pc, #32]	; (85450 <__libc_fini_array+0x24>)
   85430:	4d08      	ldr	r5, [pc, #32]	; (85454 <__libc_fini_array+0x28>)
   85432:	1aed      	subs	r5, r5, r3
   85434:	10ac      	asrs	r4, r5, #2
   85436:	bf18      	it	ne
   85438:	18ed      	addne	r5, r5, r3
   8543a:	d005      	beq.n	85448 <__libc_fini_array+0x1c>
   8543c:	3c01      	subs	r4, #1
   8543e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85442:	4798      	blx	r3
   85444:	2c00      	cmp	r4, #0
   85446:	d1f9      	bne.n	8543c <__libc_fini_array+0x10>
   85448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8544c:	f003 bd5a 	b.w	88f04 <_fini>
   85450:	00088f10 	.word	0x00088f10
   85454:	00088f14 	.word	0x00088f14

00085458 <__fputwc>:
   85458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8545c:	b082      	sub	sp, #8
   8545e:	4607      	mov	r7, r0
   85460:	460e      	mov	r6, r1
   85462:	4614      	mov	r4, r2
   85464:	f000 ff04 	bl	86270 <__locale_mb_cur_max>
   85468:	2801      	cmp	r0, #1
   8546a:	d040      	beq.n	854ee <__fputwc+0x96>
   8546c:	4638      	mov	r0, r7
   8546e:	a901      	add	r1, sp, #4
   85470:	4632      	mov	r2, r6
   85472:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85476:	f002 fa31 	bl	878dc <_wcrtomb_r>
   8547a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8547e:	4680      	mov	r8, r0
   85480:	d02e      	beq.n	854e0 <__fputwc+0x88>
   85482:	2800      	cmp	r0, #0
   85484:	d03b      	beq.n	854fe <__fputwc+0xa6>
   85486:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8548a:	2500      	movs	r5, #0
   8548c:	e009      	b.n	854a2 <__fputwc+0x4a>
   8548e:	6823      	ldr	r3, [r4, #0]
   85490:	7019      	strb	r1, [r3, #0]
   85492:	6823      	ldr	r3, [r4, #0]
   85494:	3301      	adds	r3, #1
   85496:	6023      	str	r3, [r4, #0]
   85498:	3501      	adds	r5, #1
   8549a:	45a8      	cmp	r8, r5
   8549c:	d92f      	bls.n	854fe <__fputwc+0xa6>
   8549e:	ab01      	add	r3, sp, #4
   854a0:	5d59      	ldrb	r1, [r3, r5]
   854a2:	68a3      	ldr	r3, [r4, #8]
   854a4:	3b01      	subs	r3, #1
   854a6:	2b00      	cmp	r3, #0
   854a8:	60a3      	str	r3, [r4, #8]
   854aa:	daf0      	bge.n	8548e <__fputwc+0x36>
   854ac:	69a2      	ldr	r2, [r4, #24]
   854ae:	4293      	cmp	r3, r2
   854b0:	db06      	blt.n	854c0 <__fputwc+0x68>
   854b2:	6823      	ldr	r3, [r4, #0]
   854b4:	7019      	strb	r1, [r3, #0]
   854b6:	6823      	ldr	r3, [r4, #0]
   854b8:	7819      	ldrb	r1, [r3, #0]
   854ba:	3301      	adds	r3, #1
   854bc:	290a      	cmp	r1, #10
   854be:	d1ea      	bne.n	85496 <__fputwc+0x3e>
   854c0:	4638      	mov	r0, r7
   854c2:	4622      	mov	r2, r4
   854c4:	f002 f9b6 	bl	87834 <__swbuf_r>
   854c8:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   854cc:	fab0 f080 	clz	r0, r0
   854d0:	0940      	lsrs	r0, r0, #5
   854d2:	2800      	cmp	r0, #0
   854d4:	d0e0      	beq.n	85498 <__fputwc+0x40>
   854d6:	f04f 30ff 	mov.w	r0, #4294967295
   854da:	b002      	add	sp, #8
   854dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   854e0:	89a3      	ldrh	r3, [r4, #12]
   854e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   854e6:	81a3      	strh	r3, [r4, #12]
   854e8:	b002      	add	sp, #8
   854ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   854ee:	1e73      	subs	r3, r6, #1
   854f0:	2bfe      	cmp	r3, #254	; 0xfe
   854f2:	d8bb      	bhi.n	8546c <__fputwc+0x14>
   854f4:	b2f1      	uxtb	r1, r6
   854f6:	4680      	mov	r8, r0
   854f8:	f88d 1004 	strb.w	r1, [sp, #4]
   854fc:	e7c5      	b.n	8548a <__fputwc+0x32>
   854fe:	4630      	mov	r0, r6
   85500:	b002      	add	sp, #8
   85502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85506:	bf00      	nop

00085508 <_fputwc_r>:
   85508:	8993      	ldrh	r3, [r2, #12]
   8550a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8550e:	d10b      	bne.n	85528 <_fputwc_r+0x20>
   85510:	b410      	push	{r4}
   85512:	6e54      	ldr	r4, [r2, #100]	; 0x64
   85514:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85518:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   8551c:	6654      	str	r4, [r2, #100]	; 0x64
   8551e:	8193      	strh	r3, [r2, #12]
   85520:	f85d 4b04 	ldr.w	r4, [sp], #4
   85524:	f7ff bf98 	b.w	85458 <__fputwc>
   85528:	f7ff bf96 	b.w	85458 <__fputwc>

0008552c <_malloc_trim_r>:
   8552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8552e:	460c      	mov	r4, r1
   85530:	4f22      	ldr	r7, [pc, #136]	; (855bc <_malloc_trim_r+0x90>)
   85532:	4606      	mov	r6, r0
   85534:	f001 fa52 	bl	869dc <__malloc_lock>
   85538:	68bb      	ldr	r3, [r7, #8]
   8553a:	685d      	ldr	r5, [r3, #4]
   8553c:	f025 0503 	bic.w	r5, r5, #3
   85540:	1b29      	subs	r1, r5, r4
   85542:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   85546:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8554a:	f021 010f 	bic.w	r1, r1, #15
   8554e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   85552:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85556:	db07      	blt.n	85568 <_malloc_trim_r+0x3c>
   85558:	4630      	mov	r0, r6
   8555a:	2100      	movs	r1, #0
   8555c:	f002 f916 	bl	8778c <_sbrk_r>
   85560:	68bb      	ldr	r3, [r7, #8]
   85562:	442b      	add	r3, r5
   85564:	4298      	cmp	r0, r3
   85566:	d004      	beq.n	85572 <_malloc_trim_r+0x46>
   85568:	4630      	mov	r0, r6
   8556a:	f001 fa39 	bl	869e0 <__malloc_unlock>
   8556e:	2000      	movs	r0, #0
   85570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85572:	4630      	mov	r0, r6
   85574:	4261      	negs	r1, r4
   85576:	f002 f909 	bl	8778c <_sbrk_r>
   8557a:	3001      	adds	r0, #1
   8557c:	d00d      	beq.n	8559a <_malloc_trim_r+0x6e>
   8557e:	4b10      	ldr	r3, [pc, #64]	; (855c0 <_malloc_trim_r+0x94>)
   85580:	68ba      	ldr	r2, [r7, #8]
   85582:	6819      	ldr	r1, [r3, #0]
   85584:	1b2d      	subs	r5, r5, r4
   85586:	f045 0501 	orr.w	r5, r5, #1
   8558a:	4630      	mov	r0, r6
   8558c:	1b09      	subs	r1, r1, r4
   8558e:	6055      	str	r5, [r2, #4]
   85590:	6019      	str	r1, [r3, #0]
   85592:	f001 fa25 	bl	869e0 <__malloc_unlock>
   85596:	2001      	movs	r0, #1
   85598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8559a:	4630      	mov	r0, r6
   8559c:	2100      	movs	r1, #0
   8559e:	f002 f8f5 	bl	8778c <_sbrk_r>
   855a2:	68ba      	ldr	r2, [r7, #8]
   855a4:	1a83      	subs	r3, r0, r2
   855a6:	2b0f      	cmp	r3, #15
   855a8:	ddde      	ble.n	85568 <_malloc_trim_r+0x3c>
   855aa:	4c06      	ldr	r4, [pc, #24]	; (855c4 <_malloc_trim_r+0x98>)
   855ac:	4904      	ldr	r1, [pc, #16]	; (855c0 <_malloc_trim_r+0x94>)
   855ae:	6824      	ldr	r4, [r4, #0]
   855b0:	f043 0301 	orr.w	r3, r3, #1
   855b4:	1b00      	subs	r0, r0, r4
   855b6:	6053      	str	r3, [r2, #4]
   855b8:	6008      	str	r0, [r1, #0]
   855ba:	e7d5      	b.n	85568 <_malloc_trim_r+0x3c>
   855bc:	200705cc 	.word	0x200705cc
   855c0:	2007aeb0 	.word	0x2007aeb0
   855c4:	200709d8 	.word	0x200709d8

000855c8 <_free_r>:
   855c8:	2900      	cmp	r1, #0
   855ca:	d04e      	beq.n	8566a <_free_r+0xa2>
   855cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   855d0:	460c      	mov	r4, r1
   855d2:	4680      	mov	r8, r0
   855d4:	f001 fa02 	bl	869dc <__malloc_lock>
   855d8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   855dc:	4962      	ldr	r1, [pc, #392]	; (85768 <_free_r+0x1a0>)
   855de:	f1a4 0508 	sub.w	r5, r4, #8
   855e2:	f027 0201 	bic.w	r2, r7, #1
   855e6:	18ab      	adds	r3, r5, r2
   855e8:	688e      	ldr	r6, [r1, #8]
   855ea:	6858      	ldr	r0, [r3, #4]
   855ec:	429e      	cmp	r6, r3
   855ee:	f020 0003 	bic.w	r0, r0, #3
   855f2:	d05a      	beq.n	856aa <_free_r+0xe2>
   855f4:	07fe      	lsls	r6, r7, #31
   855f6:	6058      	str	r0, [r3, #4]
   855f8:	d40b      	bmi.n	85612 <_free_r+0x4a>
   855fa:	f854 7c08 	ldr.w	r7, [r4, #-8]
   855fe:	f101 0e08 	add.w	lr, r1, #8
   85602:	1bed      	subs	r5, r5, r7
   85604:	68ac      	ldr	r4, [r5, #8]
   85606:	443a      	add	r2, r7
   85608:	4574      	cmp	r4, lr
   8560a:	d067      	beq.n	856dc <_free_r+0x114>
   8560c:	68ef      	ldr	r7, [r5, #12]
   8560e:	60e7      	str	r7, [r4, #12]
   85610:	60bc      	str	r4, [r7, #8]
   85612:	181c      	adds	r4, r3, r0
   85614:	6864      	ldr	r4, [r4, #4]
   85616:	07e4      	lsls	r4, r4, #31
   85618:	d40c      	bmi.n	85634 <_free_r+0x6c>
   8561a:	4f54      	ldr	r7, [pc, #336]	; (8576c <_free_r+0x1a4>)
   8561c:	689c      	ldr	r4, [r3, #8]
   8561e:	4402      	add	r2, r0
   85620:	42bc      	cmp	r4, r7
   85622:	d07c      	beq.n	8571e <_free_r+0x156>
   85624:	68d8      	ldr	r0, [r3, #12]
   85626:	f042 0301 	orr.w	r3, r2, #1
   8562a:	60e0      	str	r0, [r4, #12]
   8562c:	6084      	str	r4, [r0, #8]
   8562e:	606b      	str	r3, [r5, #4]
   85630:	50aa      	str	r2, [r5, r2]
   85632:	e003      	b.n	8563c <_free_r+0x74>
   85634:	f042 0301 	orr.w	r3, r2, #1
   85638:	606b      	str	r3, [r5, #4]
   8563a:	50aa      	str	r2, [r5, r2]
   8563c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   85640:	d214      	bcs.n	8566c <_free_r+0xa4>
   85642:	08d2      	lsrs	r2, r2, #3
   85644:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   85648:	2401      	movs	r4, #1
   8564a:	6848      	ldr	r0, [r1, #4]
   8564c:	1092      	asrs	r2, r2, #2
   8564e:	fa04 f202 	lsl.w	r2, r4, r2
   85652:	689c      	ldr	r4, [r3, #8]
   85654:	4310      	orrs	r0, r2
   85656:	60ac      	str	r4, [r5, #8]
   85658:	60eb      	str	r3, [r5, #12]
   8565a:	6048      	str	r0, [r1, #4]
   8565c:	609d      	str	r5, [r3, #8]
   8565e:	60e5      	str	r5, [r4, #12]
   85660:	4640      	mov	r0, r8
   85662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85666:	f001 b9bb 	b.w	869e0 <__malloc_unlock>
   8566a:	4770      	bx	lr
   8566c:	0a53      	lsrs	r3, r2, #9
   8566e:	2b04      	cmp	r3, #4
   85670:	d847      	bhi.n	85702 <_free_r+0x13a>
   85672:	0993      	lsrs	r3, r2, #6
   85674:	f103 0438 	add.w	r4, r3, #56	; 0x38
   85678:	0060      	lsls	r0, r4, #1
   8567a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   8567e:	6883      	ldr	r3, [r0, #8]
   85680:	4939      	ldr	r1, [pc, #228]	; (85768 <_free_r+0x1a0>)
   85682:	4283      	cmp	r3, r0
   85684:	d043      	beq.n	8570e <_free_r+0x146>
   85686:	6859      	ldr	r1, [r3, #4]
   85688:	f021 0103 	bic.w	r1, r1, #3
   8568c:	4291      	cmp	r1, r2
   8568e:	d902      	bls.n	85696 <_free_r+0xce>
   85690:	689b      	ldr	r3, [r3, #8]
   85692:	4298      	cmp	r0, r3
   85694:	d1f7      	bne.n	85686 <_free_r+0xbe>
   85696:	68da      	ldr	r2, [r3, #12]
   85698:	60ea      	str	r2, [r5, #12]
   8569a:	60ab      	str	r3, [r5, #8]
   8569c:	4640      	mov	r0, r8
   8569e:	6095      	str	r5, [r2, #8]
   856a0:	60dd      	str	r5, [r3, #12]
   856a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   856a6:	f001 b99b 	b.w	869e0 <__malloc_unlock>
   856aa:	07ff      	lsls	r7, r7, #31
   856ac:	4402      	add	r2, r0
   856ae:	d407      	bmi.n	856c0 <_free_r+0xf8>
   856b0:	f854 4c08 	ldr.w	r4, [r4, #-8]
   856b4:	1b2d      	subs	r5, r5, r4
   856b6:	68eb      	ldr	r3, [r5, #12]
   856b8:	68a8      	ldr	r0, [r5, #8]
   856ba:	4422      	add	r2, r4
   856bc:	60c3      	str	r3, [r0, #12]
   856be:	6098      	str	r0, [r3, #8]
   856c0:	4b2b      	ldr	r3, [pc, #172]	; (85770 <_free_r+0x1a8>)
   856c2:	f042 0001 	orr.w	r0, r2, #1
   856c6:	681b      	ldr	r3, [r3, #0]
   856c8:	6068      	str	r0, [r5, #4]
   856ca:	429a      	cmp	r2, r3
   856cc:	608d      	str	r5, [r1, #8]
   856ce:	d3c7      	bcc.n	85660 <_free_r+0x98>
   856d0:	4b28      	ldr	r3, [pc, #160]	; (85774 <_free_r+0x1ac>)
   856d2:	4640      	mov	r0, r8
   856d4:	6819      	ldr	r1, [r3, #0]
   856d6:	f7ff ff29 	bl	8552c <_malloc_trim_r>
   856da:	e7c1      	b.n	85660 <_free_r+0x98>
   856dc:	1819      	adds	r1, r3, r0
   856de:	6849      	ldr	r1, [r1, #4]
   856e0:	07c9      	lsls	r1, r1, #31
   856e2:	d409      	bmi.n	856f8 <_free_r+0x130>
   856e4:	68d9      	ldr	r1, [r3, #12]
   856e6:	4402      	add	r2, r0
   856e8:	689b      	ldr	r3, [r3, #8]
   856ea:	f042 0001 	orr.w	r0, r2, #1
   856ee:	60d9      	str	r1, [r3, #12]
   856f0:	608b      	str	r3, [r1, #8]
   856f2:	6068      	str	r0, [r5, #4]
   856f4:	50aa      	str	r2, [r5, r2]
   856f6:	e7b3      	b.n	85660 <_free_r+0x98>
   856f8:	f042 0301 	orr.w	r3, r2, #1
   856fc:	606b      	str	r3, [r5, #4]
   856fe:	50aa      	str	r2, [r5, r2]
   85700:	e7ae      	b.n	85660 <_free_r+0x98>
   85702:	2b14      	cmp	r3, #20
   85704:	d814      	bhi.n	85730 <_free_r+0x168>
   85706:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8570a:	0060      	lsls	r0, r4, #1
   8570c:	e7b5      	b.n	8567a <_free_r+0xb2>
   8570e:	684a      	ldr	r2, [r1, #4]
   85710:	10a4      	asrs	r4, r4, #2
   85712:	2001      	movs	r0, #1
   85714:	40a0      	lsls	r0, r4
   85716:	4302      	orrs	r2, r0
   85718:	604a      	str	r2, [r1, #4]
   8571a:	461a      	mov	r2, r3
   8571c:	e7bc      	b.n	85698 <_free_r+0xd0>
   8571e:	f042 0301 	orr.w	r3, r2, #1
   85722:	614d      	str	r5, [r1, #20]
   85724:	610d      	str	r5, [r1, #16]
   85726:	60ec      	str	r4, [r5, #12]
   85728:	60ac      	str	r4, [r5, #8]
   8572a:	606b      	str	r3, [r5, #4]
   8572c:	50aa      	str	r2, [r5, r2]
   8572e:	e797      	b.n	85660 <_free_r+0x98>
   85730:	2b54      	cmp	r3, #84	; 0x54
   85732:	d804      	bhi.n	8573e <_free_r+0x176>
   85734:	0b13      	lsrs	r3, r2, #12
   85736:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   8573a:	0060      	lsls	r0, r4, #1
   8573c:	e79d      	b.n	8567a <_free_r+0xb2>
   8573e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85742:	d804      	bhi.n	8574e <_free_r+0x186>
   85744:	0bd3      	lsrs	r3, r2, #15
   85746:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8574a:	0060      	lsls	r0, r4, #1
   8574c:	e795      	b.n	8567a <_free_r+0xb2>
   8574e:	f240 5054 	movw	r0, #1364	; 0x554
   85752:	4283      	cmp	r3, r0
   85754:	d804      	bhi.n	85760 <_free_r+0x198>
   85756:	0c93      	lsrs	r3, r2, #18
   85758:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8575c:	0060      	lsls	r0, r4, #1
   8575e:	e78c      	b.n	8567a <_free_r+0xb2>
   85760:	20fc      	movs	r0, #252	; 0xfc
   85762:	247e      	movs	r4, #126	; 0x7e
   85764:	e789      	b.n	8567a <_free_r+0xb2>
   85766:	bf00      	nop
   85768:	200705cc 	.word	0x200705cc
   8576c:	200705d4 	.word	0x200705d4
   85770:	200709d4 	.word	0x200709d4
   85774:	2007aeac 	.word	0x2007aeac

00085778 <__sfvwrite_r>:
   85778:	6893      	ldr	r3, [r2, #8]
   8577a:	2b00      	cmp	r3, #0
   8577c:	f000 80b1 	beq.w	858e2 <__sfvwrite_r+0x16a>
   85780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85784:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   85788:	b083      	sub	sp, #12
   8578a:	f01e 0f08 	tst.w	lr, #8
   8578e:	460c      	mov	r4, r1
   85790:	4681      	mov	r9, r0
   85792:	4616      	mov	r6, r2
   85794:	d028      	beq.n	857e8 <__sfvwrite_r+0x70>
   85796:	690b      	ldr	r3, [r1, #16]
   85798:	b333      	cbz	r3, 857e8 <__sfvwrite_r+0x70>
   8579a:	f00e 0802 	and.w	r8, lr, #2
   8579e:	fa1f f088 	uxth.w	r0, r8
   857a2:	6835      	ldr	r5, [r6, #0]
   857a4:	b380      	cbz	r0, 85808 <__sfvwrite_r+0x90>
   857a6:	f04f 0b00 	mov.w	fp, #0
   857aa:	46d8      	mov	r8, fp
   857ac:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 85a94 <__sfvwrite_r+0x31c>
   857b0:	f1b8 0f00 	cmp.w	r8, #0
   857b4:	f000 808f 	beq.w	858d6 <__sfvwrite_r+0x15e>
   857b8:	45d0      	cmp	r8, sl
   857ba:	4643      	mov	r3, r8
   857bc:	4648      	mov	r0, r9
   857be:	bf28      	it	cs
   857c0:	4653      	movcs	r3, sl
   857c2:	69e1      	ldr	r1, [r4, #28]
   857c4:	465a      	mov	r2, fp
   857c6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   857c8:	47b8      	blx	r7
   857ca:	2800      	cmp	r0, #0
   857cc:	f340 80a8 	ble.w	85920 <__sfvwrite_r+0x1a8>
   857d0:	68b3      	ldr	r3, [r6, #8]
   857d2:	4483      	add	fp, r0
   857d4:	1a1b      	subs	r3, r3, r0
   857d6:	ebc0 0808 	rsb	r8, r0, r8
   857da:	60b3      	str	r3, [r6, #8]
   857dc:	2b00      	cmp	r3, #0
   857de:	d1e7      	bne.n	857b0 <__sfvwrite_r+0x38>
   857e0:	2000      	movs	r0, #0
   857e2:	b003      	add	sp, #12
   857e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   857e8:	4648      	mov	r0, r9
   857ea:	4621      	mov	r1, r4
   857ec:	f7ff fc58 	bl	850a0 <__swsetup_r>
   857f0:	2800      	cmp	r0, #0
   857f2:	f040 8146 	bne.w	85a82 <__sfvwrite_r+0x30a>
   857f6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   857fa:	6835      	ldr	r5, [r6, #0]
   857fc:	f00e 0802 	and.w	r8, lr, #2
   85800:	fa1f f088 	uxth.w	r0, r8
   85804:	2800      	cmp	r0, #0
   85806:	d1ce      	bne.n	857a6 <__sfvwrite_r+0x2e>
   85808:	f01e 0b01 	ands.w	fp, lr, #1
   8580c:	f040 8091 	bne.w	85932 <__sfvwrite_r+0x1ba>
   85810:	46d8      	mov	r8, fp
   85812:	f1b8 0f00 	cmp.w	r8, #0
   85816:	d058      	beq.n	858ca <__sfvwrite_r+0x152>
   85818:	f41e 7f00 	tst.w	lr, #512	; 0x200
   8581c:	68a7      	ldr	r7, [r4, #8]
   8581e:	d062      	beq.n	858e6 <__sfvwrite_r+0x16e>
   85820:	45b8      	cmp	r8, r7
   85822:	46ba      	mov	sl, r7
   85824:	f0c0 80c2 	bcc.w	859ac <__sfvwrite_r+0x234>
   85828:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   8582c:	f000 80c0 	beq.w	859b0 <__sfvwrite_r+0x238>
   85830:	6967      	ldr	r7, [r4, #20]
   85832:	6921      	ldr	r1, [r4, #16]
   85834:	6823      	ldr	r3, [r4, #0]
   85836:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8583a:	1a5b      	subs	r3, r3, r1
   8583c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   85840:	1c58      	adds	r0, r3, #1
   85842:	107f      	asrs	r7, r7, #1
   85844:	4440      	add	r0, r8
   85846:	4287      	cmp	r7, r0
   85848:	463a      	mov	r2, r7
   8584a:	bf3c      	itt	cc
   8584c:	4607      	movcc	r7, r0
   8584e:	463a      	movcc	r2, r7
   85850:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   85854:	9300      	str	r3, [sp, #0]
   85856:	f000 80fb 	beq.w	85a50 <__sfvwrite_r+0x2d8>
   8585a:	4611      	mov	r1, r2
   8585c:	4648      	mov	r0, r9
   8585e:	f000 fd89 	bl	86374 <_malloc_r>
   85862:	9b00      	ldr	r3, [sp, #0]
   85864:	4682      	mov	sl, r0
   85866:	2800      	cmp	r0, #0
   85868:	f000 810e 	beq.w	85a88 <__sfvwrite_r+0x310>
   8586c:	461a      	mov	r2, r3
   8586e:	6921      	ldr	r1, [r4, #16]
   85870:	9300      	str	r3, [sp, #0]
   85872:	f7fd fae9 	bl	82e48 <memcpy>
   85876:	89a2      	ldrh	r2, [r4, #12]
   85878:	9b00      	ldr	r3, [sp, #0]
   8587a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8587e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85882:	81a2      	strh	r2, [r4, #12]
   85884:	eb0a 0003 	add.w	r0, sl, r3
   85888:	f8c4 a010 	str.w	sl, [r4, #16]
   8588c:	1afb      	subs	r3, r7, r3
   8588e:	6167      	str	r7, [r4, #20]
   85890:	46c2      	mov	sl, r8
   85892:	4647      	mov	r7, r8
   85894:	6020      	str	r0, [r4, #0]
   85896:	60a3      	str	r3, [r4, #8]
   85898:	4652      	mov	r2, sl
   8589a:	4659      	mov	r1, fp
   8589c:	f001 f83a 	bl	86914 <memmove>
   858a0:	68a0      	ldr	r0, [r4, #8]
   858a2:	6822      	ldr	r2, [r4, #0]
   858a4:	1bc0      	subs	r0, r0, r7
   858a6:	60a0      	str	r0, [r4, #8]
   858a8:	4640      	mov	r0, r8
   858aa:	eb02 030a 	add.w	r3, r2, sl
   858ae:	6023      	str	r3, [r4, #0]
   858b0:	68b3      	ldr	r3, [r6, #8]
   858b2:	4483      	add	fp, r0
   858b4:	1a1b      	subs	r3, r3, r0
   858b6:	ebc0 0808 	rsb	r8, r0, r8
   858ba:	60b3      	str	r3, [r6, #8]
   858bc:	2b00      	cmp	r3, #0
   858be:	d08f      	beq.n	857e0 <__sfvwrite_r+0x68>
   858c0:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   858c4:	f1b8 0f00 	cmp.w	r8, #0
   858c8:	d1a6      	bne.n	85818 <__sfvwrite_r+0xa0>
   858ca:	f8d5 b000 	ldr.w	fp, [r5]
   858ce:	f8d5 8004 	ldr.w	r8, [r5, #4]
   858d2:	3508      	adds	r5, #8
   858d4:	e79d      	b.n	85812 <__sfvwrite_r+0x9a>
   858d6:	f8d5 b000 	ldr.w	fp, [r5]
   858da:	f8d5 8004 	ldr.w	r8, [r5, #4]
   858de:	3508      	adds	r5, #8
   858e0:	e766      	b.n	857b0 <__sfvwrite_r+0x38>
   858e2:	2000      	movs	r0, #0
   858e4:	4770      	bx	lr
   858e6:	6820      	ldr	r0, [r4, #0]
   858e8:	6923      	ldr	r3, [r4, #16]
   858ea:	4298      	cmp	r0, r3
   858ec:	d803      	bhi.n	858f6 <__sfvwrite_r+0x17e>
   858ee:	6962      	ldr	r2, [r4, #20]
   858f0:	4590      	cmp	r8, r2
   858f2:	f080 8085 	bcs.w	85a00 <__sfvwrite_r+0x288>
   858f6:	4547      	cmp	r7, r8
   858f8:	bf28      	it	cs
   858fa:	4647      	movcs	r7, r8
   858fc:	4659      	mov	r1, fp
   858fe:	463a      	mov	r2, r7
   85900:	f001 f808 	bl	86914 <memmove>
   85904:	68a3      	ldr	r3, [r4, #8]
   85906:	6822      	ldr	r2, [r4, #0]
   85908:	1bdb      	subs	r3, r3, r7
   8590a:	443a      	add	r2, r7
   8590c:	60a3      	str	r3, [r4, #8]
   8590e:	6022      	str	r2, [r4, #0]
   85910:	2b00      	cmp	r3, #0
   85912:	d149      	bne.n	859a8 <__sfvwrite_r+0x230>
   85914:	4648      	mov	r0, r9
   85916:	4621      	mov	r1, r4
   85918:	f7ff fcd8 	bl	852cc <_fflush_r>
   8591c:	2800      	cmp	r0, #0
   8591e:	d043      	beq.n	859a8 <__sfvwrite_r+0x230>
   85920:	89a3      	ldrh	r3, [r4, #12]
   85922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85926:	f04f 30ff 	mov.w	r0, #4294967295
   8592a:	81a3      	strh	r3, [r4, #12]
   8592c:	b003      	add	sp, #12
   8592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85932:	4680      	mov	r8, r0
   85934:	4683      	mov	fp, r0
   85936:	4682      	mov	sl, r0
   85938:	9000      	str	r0, [sp, #0]
   8593a:	f1ba 0f00 	cmp.w	sl, #0
   8593e:	d02b      	beq.n	85998 <__sfvwrite_r+0x220>
   85940:	9b00      	ldr	r3, [sp, #0]
   85942:	2b00      	cmp	r3, #0
   85944:	d04f      	beq.n	859e6 <__sfvwrite_r+0x26e>
   85946:	45d0      	cmp	r8, sl
   85948:	4643      	mov	r3, r8
   8594a:	bf28      	it	cs
   8594c:	4653      	movcs	r3, sl
   8594e:	6820      	ldr	r0, [r4, #0]
   85950:	6921      	ldr	r1, [r4, #16]
   85952:	461f      	mov	r7, r3
   85954:	4288      	cmp	r0, r1
   85956:	f8d4 e008 	ldr.w	lr, [r4, #8]
   8595a:	6962      	ldr	r2, [r4, #20]
   8595c:	d903      	bls.n	85966 <__sfvwrite_r+0x1ee>
   8595e:	eb0e 0c02 	add.w	ip, lr, r2
   85962:	4563      	cmp	r3, ip
   85964:	dc5e      	bgt.n	85a24 <__sfvwrite_r+0x2ac>
   85966:	4293      	cmp	r3, r2
   85968:	db24      	blt.n	859b4 <__sfvwrite_r+0x23c>
   8596a:	4613      	mov	r3, r2
   8596c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8596e:	4648      	mov	r0, r9
   85970:	69e1      	ldr	r1, [r4, #28]
   85972:	465a      	mov	r2, fp
   85974:	47b8      	blx	r7
   85976:	1e07      	subs	r7, r0, #0
   85978:	ddd2      	ble.n	85920 <__sfvwrite_r+0x1a8>
   8597a:	ebb8 0807 	subs.w	r8, r8, r7
   8597e:	d029      	beq.n	859d4 <__sfvwrite_r+0x25c>
   85980:	68b3      	ldr	r3, [r6, #8]
   85982:	44bb      	add	fp, r7
   85984:	1bdb      	subs	r3, r3, r7
   85986:	ebc7 0a0a 	rsb	sl, r7, sl
   8598a:	60b3      	str	r3, [r6, #8]
   8598c:	2b00      	cmp	r3, #0
   8598e:	f43f af27 	beq.w	857e0 <__sfvwrite_r+0x68>
   85992:	f1ba 0f00 	cmp.w	sl, #0
   85996:	d1d3      	bne.n	85940 <__sfvwrite_r+0x1c8>
   85998:	2300      	movs	r3, #0
   8599a:	f8d5 b000 	ldr.w	fp, [r5]
   8599e:	f8d5 a004 	ldr.w	sl, [r5, #4]
   859a2:	9300      	str	r3, [sp, #0]
   859a4:	3508      	adds	r5, #8
   859a6:	e7c8      	b.n	8593a <__sfvwrite_r+0x1c2>
   859a8:	4638      	mov	r0, r7
   859aa:	e781      	b.n	858b0 <__sfvwrite_r+0x138>
   859ac:	4647      	mov	r7, r8
   859ae:	46c2      	mov	sl, r8
   859b0:	6820      	ldr	r0, [r4, #0]
   859b2:	e771      	b.n	85898 <__sfvwrite_r+0x120>
   859b4:	461a      	mov	r2, r3
   859b6:	4659      	mov	r1, fp
   859b8:	9301      	str	r3, [sp, #4]
   859ba:	f000 ffab 	bl	86914 <memmove>
   859be:	68a2      	ldr	r2, [r4, #8]
   859c0:	6821      	ldr	r1, [r4, #0]
   859c2:	9b01      	ldr	r3, [sp, #4]
   859c4:	ebb8 0807 	subs.w	r8, r8, r7
   859c8:	eba2 0203 	sub.w	r2, r2, r3
   859cc:	440b      	add	r3, r1
   859ce:	60a2      	str	r2, [r4, #8]
   859d0:	6023      	str	r3, [r4, #0]
   859d2:	d1d5      	bne.n	85980 <__sfvwrite_r+0x208>
   859d4:	4648      	mov	r0, r9
   859d6:	4621      	mov	r1, r4
   859d8:	f7ff fc78 	bl	852cc <_fflush_r>
   859dc:	2800      	cmp	r0, #0
   859de:	d19f      	bne.n	85920 <__sfvwrite_r+0x1a8>
   859e0:	f8cd 8000 	str.w	r8, [sp]
   859e4:	e7cc      	b.n	85980 <__sfvwrite_r+0x208>
   859e6:	4658      	mov	r0, fp
   859e8:	210a      	movs	r1, #10
   859ea:	4652      	mov	r2, sl
   859ec:	f000 ff48 	bl	86880 <memchr>
   859f0:	2800      	cmp	r0, #0
   859f2:	d041      	beq.n	85a78 <__sfvwrite_r+0x300>
   859f4:	3001      	adds	r0, #1
   859f6:	2301      	movs	r3, #1
   859f8:	ebcb 0800 	rsb	r8, fp, r0
   859fc:	9300      	str	r3, [sp, #0]
   859fe:	e7a2      	b.n	85946 <__sfvwrite_r+0x1ce>
   85a00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   85a04:	4543      	cmp	r3, r8
   85a06:	bf28      	it	cs
   85a08:	4643      	movcs	r3, r8
   85a0a:	fb93 f3f2 	sdiv	r3, r3, r2
   85a0e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85a10:	fb03 f302 	mul.w	r3, r3, r2
   85a14:	4648      	mov	r0, r9
   85a16:	69e1      	ldr	r1, [r4, #28]
   85a18:	465a      	mov	r2, fp
   85a1a:	47b8      	blx	r7
   85a1c:	2800      	cmp	r0, #0
   85a1e:	f73f af47 	bgt.w	858b0 <__sfvwrite_r+0x138>
   85a22:	e77d      	b.n	85920 <__sfvwrite_r+0x1a8>
   85a24:	4662      	mov	r2, ip
   85a26:	4659      	mov	r1, fp
   85a28:	f8cd c004 	str.w	ip, [sp, #4]
   85a2c:	f000 ff72 	bl	86914 <memmove>
   85a30:	6823      	ldr	r3, [r4, #0]
   85a32:	f8dd c004 	ldr.w	ip, [sp, #4]
   85a36:	4648      	mov	r0, r9
   85a38:	4463      	add	r3, ip
   85a3a:	6023      	str	r3, [r4, #0]
   85a3c:	4621      	mov	r1, r4
   85a3e:	f7ff fc45 	bl	852cc <_fflush_r>
   85a42:	f8dd c004 	ldr.w	ip, [sp, #4]
   85a46:	2800      	cmp	r0, #0
   85a48:	f47f af6a 	bne.w	85920 <__sfvwrite_r+0x1a8>
   85a4c:	4667      	mov	r7, ip
   85a4e:	e794      	b.n	8597a <__sfvwrite_r+0x202>
   85a50:	4648      	mov	r0, r9
   85a52:	f001 fc19 	bl	87288 <_realloc_r>
   85a56:	9b00      	ldr	r3, [sp, #0]
   85a58:	4682      	mov	sl, r0
   85a5a:	2800      	cmp	r0, #0
   85a5c:	f47f af12 	bne.w	85884 <__sfvwrite_r+0x10c>
   85a60:	4648      	mov	r0, r9
   85a62:	6921      	ldr	r1, [r4, #16]
   85a64:	f7ff fdb0 	bl	855c8 <_free_r>
   85a68:	89a3      	ldrh	r3, [r4, #12]
   85a6a:	220c      	movs	r2, #12
   85a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85a70:	b29b      	uxth	r3, r3
   85a72:	f8c9 2000 	str.w	r2, [r9]
   85a76:	e754      	b.n	85922 <__sfvwrite_r+0x1aa>
   85a78:	2301      	movs	r3, #1
   85a7a:	f10a 0801 	add.w	r8, sl, #1
   85a7e:	9300      	str	r3, [sp, #0]
   85a80:	e761      	b.n	85946 <__sfvwrite_r+0x1ce>
   85a82:	f04f 30ff 	mov.w	r0, #4294967295
   85a86:	e6ac      	b.n	857e2 <__sfvwrite_r+0x6a>
   85a88:	230c      	movs	r3, #12
   85a8a:	f8c9 3000 	str.w	r3, [r9]
   85a8e:	89a3      	ldrh	r3, [r4, #12]
   85a90:	e747      	b.n	85922 <__sfvwrite_r+0x1aa>
   85a92:	bf00      	nop
   85a94:	7ffffc00 	.word	0x7ffffc00

00085a98 <_fwalk>:
   85a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a9c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   85aa0:	d01a      	beq.n	85ad8 <_fwalk+0x40>
   85aa2:	4688      	mov	r8, r1
   85aa4:	2600      	movs	r6, #0
   85aa6:	687d      	ldr	r5, [r7, #4]
   85aa8:	68bc      	ldr	r4, [r7, #8]
   85aaa:	3d01      	subs	r5, #1
   85aac:	d40e      	bmi.n	85acc <_fwalk+0x34>
   85aae:	89a3      	ldrh	r3, [r4, #12]
   85ab0:	3d01      	subs	r5, #1
   85ab2:	2b01      	cmp	r3, #1
   85ab4:	d906      	bls.n	85ac4 <_fwalk+0x2c>
   85ab6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   85aba:	3301      	adds	r3, #1
   85abc:	d002      	beq.n	85ac4 <_fwalk+0x2c>
   85abe:	4620      	mov	r0, r4
   85ac0:	47c0      	blx	r8
   85ac2:	4306      	orrs	r6, r0
   85ac4:	1c6b      	adds	r3, r5, #1
   85ac6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   85aca:	d1f0      	bne.n	85aae <_fwalk+0x16>
   85acc:	683f      	ldr	r7, [r7, #0]
   85ace:	2f00      	cmp	r7, #0
   85ad0:	d1e9      	bne.n	85aa6 <_fwalk+0xe>
   85ad2:	4630      	mov	r0, r6
   85ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ad8:	463e      	mov	r6, r7
   85ada:	4630      	mov	r0, r6
   85adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085ae0 <_fwalk_reent>:
   85ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85ae4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85ae8:	d01e      	beq.n	85b28 <_fwalk_reent+0x48>
   85aea:	4688      	mov	r8, r1
   85aec:	4607      	mov	r7, r0
   85aee:	f04f 0900 	mov.w	r9, #0
   85af2:	6875      	ldr	r5, [r6, #4]
   85af4:	68b4      	ldr	r4, [r6, #8]
   85af6:	3d01      	subs	r5, #1
   85af8:	d410      	bmi.n	85b1c <_fwalk_reent+0x3c>
   85afa:	89a3      	ldrh	r3, [r4, #12]
   85afc:	3d01      	subs	r5, #1
   85afe:	2b01      	cmp	r3, #1
   85b00:	d908      	bls.n	85b14 <_fwalk_reent+0x34>
   85b02:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   85b06:	3301      	adds	r3, #1
   85b08:	d004      	beq.n	85b14 <_fwalk_reent+0x34>
   85b0a:	4638      	mov	r0, r7
   85b0c:	4621      	mov	r1, r4
   85b0e:	47c0      	blx	r8
   85b10:	ea49 0900 	orr.w	r9, r9, r0
   85b14:	1c6b      	adds	r3, r5, #1
   85b16:	f104 0468 	add.w	r4, r4, #104	; 0x68
   85b1a:	d1ee      	bne.n	85afa <_fwalk_reent+0x1a>
   85b1c:	6836      	ldr	r6, [r6, #0]
   85b1e:	2e00      	cmp	r6, #0
   85b20:	d1e7      	bne.n	85af2 <_fwalk_reent+0x12>
   85b22:	4648      	mov	r0, r9
   85b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85b28:	46b1      	mov	r9, r6
   85b2a:	4648      	mov	r0, r9
   85b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085b30 <rshift>:
   85b30:	6902      	ldr	r2, [r0, #16]
   85b32:	114b      	asrs	r3, r1, #5
   85b34:	4293      	cmp	r3, r2
   85b36:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b38:	f100 0614 	add.w	r6, r0, #20
   85b3c:	da2b      	bge.n	85b96 <rshift+0x66>
   85b3e:	f011 011f 	ands.w	r1, r1, #31
   85b42:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   85b46:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
   85b4a:	d029      	beq.n	85ba0 <rshift+0x70>
   85b4c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   85b50:	f10e 0504 	add.w	r5, lr, #4
   85b54:	42aa      	cmp	r2, r5
   85b56:	fa23 f401 	lsr.w	r4, r3, r1
   85b5a:	f1c1 0c20 	rsb	ip, r1, #32
   85b5e:	d935      	bls.n	85bcc <rshift+0x9c>
   85b60:	f100 0710 	add.w	r7, r0, #16
   85b64:	682b      	ldr	r3, [r5, #0]
   85b66:	fa03 f30c 	lsl.w	r3, r3, ip
   85b6a:	4323      	orrs	r3, r4
   85b6c:	f847 3f04 	str.w	r3, [r7, #4]!
   85b70:	f855 3b04 	ldr.w	r3, [r5], #4
   85b74:	42aa      	cmp	r2, r5
   85b76:	fa23 f401 	lsr.w	r4, r3, r1
   85b7a:	d8f3      	bhi.n	85b64 <rshift+0x34>
   85b7c:	ebce 0202 	rsb	r2, lr, r2
   85b80:	3a05      	subs	r2, #5
   85b82:	f022 0203 	bic.w	r2, r2, #3
   85b86:	3204      	adds	r2, #4
   85b88:	4432      	add	r2, r6
   85b8a:	6014      	str	r4, [r2, #0]
   85b8c:	b104      	cbz	r4, 85b90 <rshift+0x60>
   85b8e:	3204      	adds	r2, #4
   85b90:	1b93      	subs	r3, r2, r6
   85b92:	109b      	asrs	r3, r3, #2
   85b94:	e016      	b.n	85bc4 <rshift+0x94>
   85b96:	2300      	movs	r3, #0
   85b98:	6103      	str	r3, [r0, #16]
   85b9a:	2300      	movs	r3, #0
   85b9c:	6143      	str	r3, [r0, #20]
   85b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85ba0:	4572      	cmp	r2, lr
   85ba2:	d9f8      	bls.n	85b96 <rshift+0x66>
   85ba4:	4671      	mov	r1, lr
   85ba6:	f100 0410 	add.w	r4, r0, #16
   85baa:	f851 5b04 	ldr.w	r5, [r1], #4
   85bae:	428a      	cmp	r2, r1
   85bb0:	f844 5f04 	str.w	r5, [r4, #4]!
   85bb4:	d8f9      	bhi.n	85baa <rshift+0x7a>
   85bb6:	ea6f 030e 	mvn.w	r3, lr
   85bba:	4413      	add	r3, r2
   85bbc:	f023 0303 	bic.w	r3, r3, #3
   85bc0:	3304      	adds	r3, #4
   85bc2:	109b      	asrs	r3, r3, #2
   85bc4:	6103      	str	r3, [r0, #16]
   85bc6:	2b00      	cmp	r3, #0
   85bc8:	d0e7      	beq.n	85b9a <rshift+0x6a>
   85bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85bcc:	4632      	mov	r2, r6
   85bce:	e7dc      	b.n	85b8a <rshift+0x5a>

00085bd0 <__gethex>:
   85bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85bd4:	b08b      	sub	sp, #44	; 0x2c
   85bd6:	4688      	mov	r8, r1
   85bd8:	9202      	str	r2, [sp, #8]
   85bda:	9307      	str	r3, [sp, #28]
   85bdc:	9005      	str	r0, [sp, #20]
   85bde:	f000 fb4d 	bl	8627c <_localeconv_r>
   85be2:	6803      	ldr	r3, [r0, #0]
   85be4:	4618      	mov	r0, r3
   85be6:	461c      	mov	r4, r3
   85be8:	9303      	str	r3, [sp, #12]
   85bea:	f7fd fa8f 	bl	8310c <strlen>
   85bee:	f8d8 3000 	ldr.w	r3, [r8]
   85bf2:	1821      	adds	r1, r4, r0
   85bf4:	789a      	ldrb	r2, [r3, #2]
   85bf6:	9000      	str	r0, [sp, #0]
   85bf8:	2a30      	cmp	r2, #48	; 0x30
   85bfa:	f811 bc01 	ldrb.w	fp, [r1, #-1]
   85bfe:	f040 819e 	bne.w	85f3e <__gethex+0x36e>
   85c02:	3303      	adds	r3, #3
   85c04:	f04f 0900 	mov.w	r9, #0
   85c08:	461c      	mov	r4, r3
   85c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   85c0e:	f109 0901 	add.w	r9, r9, #1
   85c12:	2a30      	cmp	r2, #48	; 0x30
   85c14:	d0f8      	beq.n	85c08 <__gethex+0x38>
   85c16:	4ead      	ldr	r6, [pc, #692]	; (85ecc <__gethex+0x2fc>)
   85c18:	5cb3      	ldrb	r3, [r6, r2]
   85c1a:	2b00      	cmp	r3, #0
   85c1c:	f000 80ed 	beq.w	85dfa <__gethex+0x22a>
   85c20:	f04f 0a00 	mov.w	sl, #0
   85c24:	4655      	mov	r5, sl
   85c26:	7823      	ldrb	r3, [r4, #0]
   85c28:	5cf3      	ldrb	r3, [r6, r3]
   85c2a:	4627      	mov	r7, r4
   85c2c:	b123      	cbz	r3, 85c38 <__gethex+0x68>
   85c2e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
   85c32:	5cf3      	ldrb	r3, [r6, r3]
   85c34:	2b00      	cmp	r3, #0
   85c36:	d1fa      	bne.n	85c2e <__gethex+0x5e>
   85c38:	4638      	mov	r0, r7
   85c3a:	9903      	ldr	r1, [sp, #12]
   85c3c:	9a00      	ldr	r2, [sp, #0]
   85c3e:	f7fd fa93 	bl	83168 <strncmp>
   85c42:	b1c0      	cbz	r0, 85c76 <__gethex+0xa6>
   85c44:	783b      	ldrb	r3, [r7, #0]
   85c46:	2d00      	cmp	r5, #0
   85c48:	f000 8168 	beq.w	85f1c <__gethex+0x34c>
   85c4c:	1bed      	subs	r5, r5, r7
   85c4e:	00aa      	lsls	r2, r5, #2
   85c50:	9201      	str	r2, [sp, #4]
   85c52:	2b50      	cmp	r3, #80	; 0x50
   85c54:	d018      	beq.n	85c88 <__gethex+0xb8>
   85c56:	2b70      	cmp	r3, #112	; 0x70
   85c58:	d016      	beq.n	85c88 <__gethex+0xb8>
   85c5a:	463d      	mov	r5, r7
   85c5c:	f8c8 7000 	str.w	r7, [r8]
   85c60:	f1ba 0f00 	cmp.w	sl, #0
   85c64:	d03d      	beq.n	85ce2 <__gethex+0x112>
   85c66:	f1b9 0f00 	cmp.w	r9, #0
   85c6a:	bf14      	ite	ne
   85c6c:	2000      	movne	r0, #0
   85c6e:	2006      	moveq	r0, #6
   85c70:	b00b      	add	sp, #44	; 0x2c
   85c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c76:	2d00      	cmp	r5, #0
   85c78:	f000 8189 	beq.w	85f8e <__gethex+0x3be>
   85c7c:	783b      	ldrb	r3, [r7, #0]
   85c7e:	e7e5      	b.n	85c4c <__gethex+0x7c>
   85c80:	2300      	movs	r3, #0
   85c82:	9301      	str	r3, [sp, #4]
   85c84:	f04f 0a01 	mov.w	sl, #1
   85c88:	787b      	ldrb	r3, [r7, #1]
   85c8a:	2b2b      	cmp	r3, #43	; 0x2b
   85c8c:	f000 811c 	beq.w	85ec8 <__gethex+0x2f8>
   85c90:	2b2d      	cmp	r3, #45	; 0x2d
   85c92:	f000 80e4 	beq.w	85e5e <__gethex+0x28e>
   85c96:	1c79      	adds	r1, r7, #1
   85c98:	2500      	movs	r5, #0
   85c9a:	5cf3      	ldrb	r3, [r6, r3]
   85c9c:	4a8b      	ldr	r2, [pc, #556]	; (85ecc <__gethex+0x2fc>)
   85c9e:	1e58      	subs	r0, r3, #1
   85ca0:	2818      	cmp	r0, #24
   85ca2:	d8da      	bhi.n	85c5a <__gethex+0x8a>
   85ca4:	7848      	ldrb	r0, [r1, #1]
   85ca6:	3b10      	subs	r3, #16
   85ca8:	5c12      	ldrb	r2, [r2, r0]
   85caa:	3101      	adds	r1, #1
   85cac:	1e50      	subs	r0, r2, #1
   85cae:	2818      	cmp	r0, #24
   85cb0:	d80a      	bhi.n	85cc8 <__gethex+0xf8>
   85cb2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   85cb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   85cba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   85cbe:	5c32      	ldrb	r2, [r6, r0]
   85cc0:	3b10      	subs	r3, #16
   85cc2:	1e50      	subs	r0, r2, #1
   85cc4:	2818      	cmp	r0, #24
   85cc6:	d9f4      	bls.n	85cb2 <__gethex+0xe2>
   85cc8:	426a      	negs	r2, r5
   85cca:	4053      	eors	r3, r2
   85ccc:	442b      	add	r3, r5
   85cce:	463d      	mov	r5, r7
   85cd0:	460f      	mov	r7, r1
   85cd2:	9a01      	ldr	r2, [sp, #4]
   85cd4:	f8c8 7000 	str.w	r7, [r8]
   85cd8:	441a      	add	r2, r3
   85cda:	9201      	str	r2, [sp, #4]
   85cdc:	f1ba 0f00 	cmp.w	sl, #0
   85ce0:	d1c1      	bne.n	85c66 <__gethex+0x96>
   85ce2:	1b2b      	subs	r3, r5, r4
   85ce4:	3b01      	subs	r3, #1
   85ce6:	2b07      	cmp	r3, #7
   85ce8:	4651      	mov	r1, sl
   85cea:	dd04      	ble.n	85cf6 <__gethex+0x126>
   85cec:	105b      	asrs	r3, r3, #1
   85cee:	2b07      	cmp	r3, #7
   85cf0:	f101 0101 	add.w	r1, r1, #1
   85cf4:	dcfa      	bgt.n	85cec <__gethex+0x11c>
   85cf6:	9805      	ldr	r0, [sp, #20]
   85cf8:	f000 fe74 	bl	869e4 <_Balloc>
   85cfc:	4603      	mov	r3, r0
   85cfe:	42a5      	cmp	r5, r4
   85d00:	f103 0314 	add.w	r3, r3, #20
   85d04:	9004      	str	r0, [sp, #16]
   85d06:	9306      	str	r3, [sp, #24]
   85d08:	f240 8193 	bls.w	86032 <__gethex+0x462>
   85d0c:	f04f 0800 	mov.w	r8, #0
   85d10:	4647      	mov	r7, r8
   85d12:	4699      	mov	r9, r3
   85d14:	9b00      	ldr	r3, [sp, #0]
   85d16:	46a0      	mov	r8, r4
   85d18:	f1c3 0c01 	rsb	ip, r3, #1
   85d1c:	46e2      	mov	sl, ip
   85d1e:	463c      	mov	r4, r7
   85d20:	e00f      	b.n	85d42 <__gethex+0x172>
   85d22:	2f20      	cmp	r7, #32
   85d24:	d061      	beq.n	85dea <__gethex+0x21a>
   85d26:	463a      	mov	r2, r7
   85d28:	3704      	adds	r7, #4
   85d2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   85d2e:	461d      	mov	r5, r3
   85d30:	5c73      	ldrb	r3, [r6, r1]
   85d32:	4545      	cmp	r5, r8
   85d34:	f003 030f 	and.w	r3, r3, #15
   85d38:	fa03 f302 	lsl.w	r3, r3, r2
   85d3c:	ea44 0403 	orr.w	r4, r4, r3
   85d40:	d918      	bls.n	85d74 <__gethex+0x1a4>
   85d42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   85d46:	1e6b      	subs	r3, r5, #1
   85d48:	455a      	cmp	r2, fp
   85d4a:	d1ea      	bne.n	85d22 <__gethex+0x152>
   85d4c:	eb03 0c0a 	add.w	ip, r3, sl
   85d50:	45c4      	cmp	ip, r8
   85d52:	d3e6      	bcc.n	85d22 <__gethex+0x152>
   85d54:	4660      	mov	r0, ip
   85d56:	9903      	ldr	r1, [sp, #12]
   85d58:	9a00      	ldr	r2, [sp, #0]
   85d5a:	9309      	str	r3, [sp, #36]	; 0x24
   85d5c:	f8cd c020 	str.w	ip, [sp, #32]
   85d60:	f7fd fa02 	bl	83168 <strncmp>
   85d64:	f8dd c020 	ldr.w	ip, [sp, #32]
   85d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85d6a:	2800      	cmp	r0, #0
   85d6c:	d1d9      	bne.n	85d22 <__gethex+0x152>
   85d6e:	4665      	mov	r5, ip
   85d70:	4545      	cmp	r5, r8
   85d72:	d8e6      	bhi.n	85d42 <__gethex+0x172>
   85d74:	46a0      	mov	r8, r4
   85d76:	9b06      	ldr	r3, [sp, #24]
   85d78:	f849 8b04 	str.w	r8, [r9], #4
   85d7c:	ebc3 0909 	rsb	r9, r3, r9
   85d80:	9a04      	ldr	r2, [sp, #16]
   85d82:	ea4f 03a9 	mov.w	r3, r9, asr #2
   85d86:	6113      	str	r3, [r2, #16]
   85d88:	4640      	mov	r0, r8
   85d8a:	ea4f 1943 	mov.w	r9, r3, lsl #5
   85d8e:	f000 fee9 	bl	86b64 <__hi0bits>
   85d92:	9b02      	ldr	r3, [sp, #8]
   85d94:	ebc0 0009 	rsb	r0, r0, r9
   85d98:	681e      	ldr	r6, [r3, #0]
   85d9a:	42b0      	cmp	r0, r6
   85d9c:	f300 8098 	bgt.w	85ed0 <__gethex+0x300>
   85da0:	f2c0 80be 	blt.w	85f20 <__gethex+0x350>
   85da4:	2700      	movs	r7, #0
   85da6:	9b02      	ldr	r3, [sp, #8]
   85da8:	9a01      	ldr	r2, [sp, #4]
   85daa:	689b      	ldr	r3, [r3, #8]
   85dac:	429a      	cmp	r2, r3
   85dae:	dc4b      	bgt.n	85e48 <__gethex+0x278>
   85db0:	9b02      	ldr	r3, [sp, #8]
   85db2:	9a01      	ldr	r2, [sp, #4]
   85db4:	685b      	ldr	r3, [r3, #4]
   85db6:	429a      	cmp	r2, r3
   85db8:	da6b      	bge.n	85e92 <__gethex+0x2c2>
   85dba:	1a9d      	subs	r5, r3, r2
   85dbc:	42ae      	cmp	r6, r5
   85dbe:	f300 80c6 	bgt.w	85f4e <__gethex+0x37e>
   85dc2:	9a02      	ldr	r2, [sp, #8]
   85dc4:	68d2      	ldr	r2, [r2, #12]
   85dc6:	2a02      	cmp	r2, #2
   85dc8:	f000 8149 	beq.w	8605e <__gethex+0x48e>
   85dcc:	2a03      	cmp	r2, #3
   85dce:	f000 8117 	beq.w	86000 <__gethex+0x430>
   85dd2:	2a01      	cmp	r2, #1
   85dd4:	f000 8134 	beq.w	86040 <__gethex+0x470>
   85dd8:	9805      	ldr	r0, [sp, #20]
   85dda:	9904      	ldr	r1, [sp, #16]
   85ddc:	f000 fe2a 	bl	86a34 <_Bfree>
   85de0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   85de2:	2300      	movs	r3, #0
   85de4:	6013      	str	r3, [r2, #0]
   85de6:	2050      	movs	r0, #80	; 0x50
   85de8:	e742      	b.n	85c70 <__gethex+0xa0>
   85dea:	f8c9 4000 	str.w	r4, [r9]
   85dee:	2400      	movs	r4, #0
   85df0:	4622      	mov	r2, r4
   85df2:	f109 0904 	add.w	r9, r9, #4
   85df6:	2704      	movs	r7, #4
   85df8:	e797      	b.n	85d2a <__gethex+0x15a>
   85dfa:	4620      	mov	r0, r4
   85dfc:	9903      	ldr	r1, [sp, #12]
   85dfe:	9a00      	ldr	r2, [sp, #0]
   85e00:	f7fd f9b2 	bl	83168 <strncmp>
   85e04:	b378      	cbz	r0, 85e66 <__gethex+0x296>
   85e06:	4627      	mov	r7, r4
   85e08:	7823      	ldrb	r3, [r4, #0]
   85e0a:	2b50      	cmp	r3, #80	; 0x50
   85e0c:	f43f af38 	beq.w	85c80 <__gethex+0xb0>
   85e10:	2b70      	cmp	r3, #112	; 0x70
   85e12:	f43f af35 	beq.w	85c80 <__gethex+0xb0>
   85e16:	f8c8 7000 	str.w	r7, [r8]
   85e1a:	e724      	b.n	85c66 <__gethex+0x96>
   85e1c:	4445      	add	r5, r8
   85e1e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   85e22:	f000 fe9f 	bl	86b64 <__hi0bits>
   85e26:	f1c6 0620 	rsb	r6, r6, #32
   85e2a:	42b0      	cmp	r0, r6
   85e2c:	f280 80e4 	bge.w	85ff8 <__gethex+0x428>
   85e30:	9804      	ldr	r0, [sp, #16]
   85e32:	2101      	movs	r1, #1
   85e34:	f7ff fe7c 	bl	85b30 <rshift>
   85e38:	9b02      	ldr	r3, [sp, #8]
   85e3a:	9a01      	ldr	r2, [sp, #4]
   85e3c:	689b      	ldr	r3, [r3, #8]
   85e3e:	3201      	adds	r2, #1
   85e40:	429a      	cmp	r2, r3
   85e42:	9201      	str	r2, [sp, #4]
   85e44:	f340 80d8 	ble.w	85ff8 <__gethex+0x428>
   85e48:	9805      	ldr	r0, [sp, #20]
   85e4a:	9904      	ldr	r1, [sp, #16]
   85e4c:	f000 fdf2 	bl	86a34 <_Bfree>
   85e50:	9a14      	ldr	r2, [sp, #80]	; 0x50
   85e52:	2300      	movs	r3, #0
   85e54:	20a3      	movs	r0, #163	; 0xa3
   85e56:	6013      	str	r3, [r2, #0]
   85e58:	b00b      	add	sp, #44	; 0x2c
   85e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e5e:	2501      	movs	r5, #1
   85e60:	78bb      	ldrb	r3, [r7, #2]
   85e62:	1cb9      	adds	r1, r7, #2
   85e64:	e719      	b.n	85c9a <__gethex+0xca>
   85e66:	9900      	ldr	r1, [sp, #0]
   85e68:	5c62      	ldrb	r2, [r4, r1]
   85e6a:	1867      	adds	r7, r4, r1
   85e6c:	5cb3      	ldrb	r3, [r6, r2]
   85e6e:	2b00      	cmp	r3, #0
   85e70:	d069      	beq.n	85f46 <__gethex+0x376>
   85e72:	2a30      	cmp	r2, #48	; 0x30
   85e74:	463c      	mov	r4, r7
   85e76:	d104      	bne.n	85e82 <__gethex+0x2b2>
   85e78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   85e7c:	2b30      	cmp	r3, #48	; 0x30
   85e7e:	d0fb      	beq.n	85e78 <__gethex+0x2a8>
   85e80:	5cf3      	ldrb	r3, [r6, r3]
   85e82:	fab3 fa83 	clz	sl, r3
   85e86:	463d      	mov	r5, r7
   85e88:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
   85e8c:	f04f 0901 	mov.w	r9, #1
   85e90:	e6cb      	b.n	85c2a <__gethex+0x5a>
   85e92:	2401      	movs	r4, #1
   85e94:	b167      	cbz	r7, 85eb0 <__gethex+0x2e0>
   85e96:	9b02      	ldr	r3, [sp, #8]
   85e98:	68db      	ldr	r3, [r3, #12]
   85e9a:	2b02      	cmp	r3, #2
   85e9c:	f000 8085 	beq.w	85faa <__gethex+0x3da>
   85ea0:	2b03      	cmp	r3, #3
   85ea2:	f000 8086 	beq.w	85fb2 <__gethex+0x3e2>
   85ea6:	2b01      	cmp	r3, #1
   85ea8:	f000 80ba 	beq.w	86020 <__gethex+0x450>
   85eac:	f044 0410 	orr.w	r4, r4, #16
   85eb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   85eb2:	4620      	mov	r0, r4
   85eb4:	461a      	mov	r2, r3
   85eb6:	9b04      	ldr	r3, [sp, #16]
   85eb8:	6013      	str	r3, [r2, #0]
   85eba:	9b07      	ldr	r3, [sp, #28]
   85ebc:	461a      	mov	r2, r3
   85ebe:	9b01      	ldr	r3, [sp, #4]
   85ec0:	6013      	str	r3, [r2, #0]
   85ec2:	b00b      	add	sp, #44	; 0x2c
   85ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ec8:	2500      	movs	r5, #0
   85eca:	e7c9      	b.n	85e60 <__gethex+0x290>
   85ecc:	00088ce4 	.word	0x00088ce4
   85ed0:	1b84      	subs	r4, r0, r6
   85ed2:	4621      	mov	r1, r4
   85ed4:	9804      	ldr	r0, [sp, #16]
   85ed6:	f001 f9a9 	bl	8722c <__any_on>
   85eda:	2800      	cmp	r0, #0
   85edc:	d035      	beq.n	85f4a <__gethex+0x37a>
   85ede:	1e63      	subs	r3, r4, #1
   85ee0:	9906      	ldr	r1, [sp, #24]
   85ee2:	115a      	asrs	r2, r3, #5
   85ee4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   85ee8:	2701      	movs	r7, #1
   85eea:	f003 011f 	and.w	r1, r3, #31
   85eee:	fa07 f101 	lsl.w	r1, r7, r1
   85ef2:	4211      	tst	r1, r2
   85ef4:	d00a      	beq.n	85f0c <__gethex+0x33c>
   85ef6:	42bb      	cmp	r3, r7
   85ef8:	f340 80a0 	ble.w	8603c <__gethex+0x46c>
   85efc:	9804      	ldr	r0, [sp, #16]
   85efe:	1ea1      	subs	r1, r4, #2
   85f00:	f001 f994 	bl	8722c <__any_on>
   85f04:	2800      	cmp	r0, #0
   85f06:	f000 8099 	beq.w	8603c <__gethex+0x46c>
   85f0a:	2703      	movs	r7, #3
   85f0c:	9b01      	ldr	r3, [sp, #4]
   85f0e:	4621      	mov	r1, r4
   85f10:	4423      	add	r3, r4
   85f12:	9804      	ldr	r0, [sp, #16]
   85f14:	9301      	str	r3, [sp, #4]
   85f16:	f7ff fe0b 	bl	85b30 <rshift>
   85f1a:	e744      	b.n	85da6 <__gethex+0x1d6>
   85f1c:	9501      	str	r5, [sp, #4]
   85f1e:	e698      	b.n	85c52 <__gethex+0x82>
   85f20:	1a34      	subs	r4, r6, r0
   85f22:	9904      	ldr	r1, [sp, #16]
   85f24:	4622      	mov	r2, r4
   85f26:	9805      	ldr	r0, [sp, #20]
   85f28:	f000 ff64 	bl	86df4 <__lshift>
   85f2c:	9b01      	ldr	r3, [sp, #4]
   85f2e:	9004      	str	r0, [sp, #16]
   85f30:	1b1b      	subs	r3, r3, r4
   85f32:	9301      	str	r3, [sp, #4]
   85f34:	4603      	mov	r3, r0
   85f36:	3314      	adds	r3, #20
   85f38:	9306      	str	r3, [sp, #24]
   85f3a:	2700      	movs	r7, #0
   85f3c:	e733      	b.n	85da6 <__gethex+0x1d6>
   85f3e:	1c9c      	adds	r4, r3, #2
   85f40:	f04f 0900 	mov.w	r9, #0
   85f44:	e667      	b.n	85c16 <__gethex+0x46>
   85f46:	4613      	mov	r3, r2
   85f48:	e75f      	b.n	85e0a <__gethex+0x23a>
   85f4a:	4607      	mov	r7, r0
   85f4c:	e7de      	b.n	85f0c <__gethex+0x33c>
   85f4e:	1e6c      	subs	r4, r5, #1
   85f50:	2f00      	cmp	r7, #0
   85f52:	d153      	bne.n	85ffc <__gethex+0x42c>
   85f54:	2c00      	cmp	r4, #0
   85f56:	dd04      	ble.n	85f62 <__gethex+0x392>
   85f58:	9804      	ldr	r0, [sp, #16]
   85f5a:	4621      	mov	r1, r4
   85f5c:	f001 f966 	bl	8722c <__any_on>
   85f60:	4607      	mov	r7, r0
   85f62:	9a06      	ldr	r2, [sp, #24]
   85f64:	1163      	asrs	r3, r4, #5
   85f66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   85f6a:	f004 041f 	and.w	r4, r4, #31
   85f6e:	2301      	movs	r3, #1
   85f70:	40a3      	lsls	r3, r4
   85f72:	4213      	tst	r3, r2
   85f74:	4629      	mov	r1, r5
   85f76:	9804      	ldr	r0, [sp, #16]
   85f78:	bf18      	it	ne
   85f7a:	f047 0702 	orrne.w	r7, r7, #2
   85f7e:	f7ff fdd7 	bl	85b30 <rshift>
   85f82:	9b02      	ldr	r3, [sp, #8]
   85f84:	1b76      	subs	r6, r6, r5
   85f86:	685b      	ldr	r3, [r3, #4]
   85f88:	2402      	movs	r4, #2
   85f8a:	9301      	str	r3, [sp, #4]
   85f8c:	e782      	b.n	85e94 <__gethex+0x2c4>
   85f8e:	9a00      	ldr	r2, [sp, #0]
   85f90:	5cbb      	ldrb	r3, [r7, r2]
   85f92:	18bd      	adds	r5, r7, r2
   85f94:	5cf2      	ldrb	r2, [r6, r3]
   85f96:	462f      	mov	r7, r5
   85f98:	2a00      	cmp	r2, #0
   85f9a:	f43f ae57 	beq.w	85c4c <__gethex+0x7c>
   85f9e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
   85fa2:	5cf2      	ldrb	r2, [r6, r3]
   85fa4:	2a00      	cmp	r2, #0
   85fa6:	d1fa      	bne.n	85f9e <__gethex+0x3ce>
   85fa8:	e650      	b.n	85c4c <__gethex+0x7c>
   85faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85fac:	f1c3 0301 	rsb	r3, r3, #1
   85fb0:	9315      	str	r3, [sp, #84]	; 0x54
   85fb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85fb4:	2b00      	cmp	r3, #0
   85fb6:	f43f af79 	beq.w	85eac <__gethex+0x2dc>
   85fba:	9a04      	ldr	r2, [sp, #16]
   85fbc:	9906      	ldr	r1, [sp, #24]
   85fbe:	6917      	ldr	r7, [r2, #16]
   85fc0:	460b      	mov	r3, r1
   85fc2:	00bd      	lsls	r5, r7, #2
   85fc4:	2000      	movs	r0, #0
   85fc6:	4429      	add	r1, r5
   85fc8:	e003      	b.n	85fd2 <__gethex+0x402>
   85fca:	f843 0b04 	str.w	r0, [r3], #4
   85fce:	4299      	cmp	r1, r3
   85fd0:	d949      	bls.n	86066 <__gethex+0x496>
   85fd2:	681a      	ldr	r2, [r3, #0]
   85fd4:	f1b2 3fff 	cmp.w	r2, #4294967295
   85fd8:	d0f7      	beq.n	85fca <__gethex+0x3fa>
   85fda:	3201      	adds	r2, #1
   85fdc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   85fe0:	601a      	str	r2, [r3, #0]
   85fe2:	2c02      	cmp	r4, #2
   85fe4:	d04e      	beq.n	86084 <__gethex+0x4b4>
   85fe6:	9b04      	ldr	r3, [sp, #16]
   85fe8:	691b      	ldr	r3, [r3, #16]
   85fea:	429f      	cmp	r7, r3
   85fec:	f6ff af20 	blt.w	85e30 <__gethex+0x260>
   85ff0:	f016 061f 	ands.w	r6, r6, #31
   85ff4:	f47f af12 	bne.w	85e1c <__gethex+0x24c>
   85ff8:	2421      	movs	r4, #33	; 0x21
   85ffa:	e759      	b.n	85eb0 <__gethex+0x2e0>
   85ffc:	2701      	movs	r7, #1
   85ffe:	e7b0      	b.n	85f62 <__gethex+0x392>
   86000:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86002:	2a00      	cmp	r2, #0
   86004:	f43f aee8 	beq.w	85dd8 <__gethex+0x208>
   86008:	9907      	ldr	r1, [sp, #28]
   8600a:	2201      	movs	r2, #1
   8600c:	600b      	str	r3, [r1, #0]
   8600e:	9b06      	ldr	r3, [sp, #24]
   86010:	9904      	ldr	r1, [sp, #16]
   86012:	2062      	movs	r0, #98	; 0x62
   86014:	610a      	str	r2, [r1, #16]
   86016:	601a      	str	r2, [r3, #0]
   86018:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8601a:	461a      	mov	r2, r3
   8601c:	6011      	str	r1, [r2, #0]
   8601e:	e627      	b.n	85c70 <__gethex+0xa0>
   86020:	07ba      	lsls	r2, r7, #30
   86022:	f57f af43 	bpl.w	85eac <__gethex+0x2dc>
   86026:	9b06      	ldr	r3, [sp, #24]
   86028:	681b      	ldr	r3, [r3, #0]
   8602a:	433b      	orrs	r3, r7
   8602c:	07db      	lsls	r3, r3, #31
   8602e:	d4c4      	bmi.n	85fba <__gethex+0x3ea>
   86030:	e73c      	b.n	85eac <__gethex+0x2dc>
   86032:	f8dd 9018 	ldr.w	r9, [sp, #24]
   86036:	f04f 0800 	mov.w	r8, #0
   8603a:	e69c      	b.n	85d76 <__gethex+0x1a6>
   8603c:	2702      	movs	r7, #2
   8603e:	e765      	b.n	85f0c <__gethex+0x33c>
   86040:	42b5      	cmp	r5, r6
   86042:	f47f aec9 	bne.w	85dd8 <__gethex+0x208>
   86046:	2e01      	cmp	r6, #1
   86048:	ddde      	ble.n	86008 <__gethex+0x438>
   8604a:	1e71      	subs	r1, r6, #1
   8604c:	9804      	ldr	r0, [sp, #16]
   8604e:	f001 f8ed 	bl	8722c <__any_on>
   86052:	2800      	cmp	r0, #0
   86054:	f43f aec0 	beq.w	85dd8 <__gethex+0x208>
   86058:	9b02      	ldr	r3, [sp, #8]
   8605a:	685b      	ldr	r3, [r3, #4]
   8605c:	e7d4      	b.n	86008 <__gethex+0x438>
   8605e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   86060:	2a00      	cmp	r2, #0
   86062:	d0d1      	beq.n	86008 <__gethex+0x438>
   86064:	e6b8      	b.n	85dd8 <__gethex+0x208>
   86066:	9b04      	ldr	r3, [sp, #16]
   86068:	689b      	ldr	r3, [r3, #8]
   8606a:	429f      	cmp	r7, r3
   8606c:	da11      	bge.n	86092 <__gethex+0x4c2>
   8606e:	463b      	mov	r3, r7
   86070:	f8dd 8018 	ldr.w	r8, [sp, #24]
   86074:	9804      	ldr	r0, [sp, #16]
   86076:	1c59      	adds	r1, r3, #1
   86078:	2201      	movs	r2, #1
   8607a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   8607e:	6101      	str	r1, [r0, #16]
   86080:	615a      	str	r2, [r3, #20]
   86082:	e7ae      	b.n	85fe2 <__gethex+0x412>
   86084:	9b02      	ldr	r3, [sp, #8]
   86086:	681b      	ldr	r3, [r3, #0]
   86088:	3b01      	subs	r3, #1
   8608a:	42b3      	cmp	r3, r6
   8608c:	d01d      	beq.n	860ca <__gethex+0x4fa>
   8608e:	2422      	movs	r4, #34	; 0x22
   86090:	e70e      	b.n	85eb0 <__gethex+0x2e0>
   86092:	9b04      	ldr	r3, [sp, #16]
   86094:	f8dd 9014 	ldr.w	r9, [sp, #20]
   86098:	6859      	ldr	r1, [r3, #4]
   8609a:	4648      	mov	r0, r9
   8609c:	3101      	adds	r1, #1
   8609e:	f000 fca1 	bl	869e4 <_Balloc>
   860a2:	4680      	mov	r8, r0
   860a4:	9904      	ldr	r1, [sp, #16]
   860a6:	300c      	adds	r0, #12
   860a8:	690b      	ldr	r3, [r1, #16]
   860aa:	310c      	adds	r1, #12
   860ac:	1c9a      	adds	r2, r3, #2
   860ae:	0092      	lsls	r2, r2, #2
   860b0:	f7fc feca 	bl	82e48 <memcpy>
   860b4:	4648      	mov	r0, r9
   860b6:	9904      	ldr	r1, [sp, #16]
   860b8:	f000 fcbc 	bl	86a34 <_Bfree>
   860bc:	f8cd 8010 	str.w	r8, [sp, #16]
   860c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   860c4:	f108 0814 	add.w	r8, r8, #20
   860c8:	e7d4      	b.n	86074 <__gethex+0x4a4>
   860ca:	1173      	asrs	r3, r6, #5
   860cc:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   860d0:	f006 061f 	and.w	r6, r6, #31
   860d4:	2301      	movs	r3, #1
   860d6:	40b3      	lsls	r3, r6
   860d8:	4213      	tst	r3, r2
   860da:	bf0c      	ite	eq
   860dc:	2422      	moveq	r4, #34	; 0x22
   860de:	2421      	movne	r4, #33	; 0x21
   860e0:	e6e6      	b.n	85eb0 <__gethex+0x2e0>
   860e2:	bf00      	nop

000860e4 <__hexnan>:
   860e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   860e8:	680b      	ldr	r3, [r1, #0]
   860ea:	b085      	sub	sp, #20
   860ec:	1159      	asrs	r1, r3, #5
   860ee:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   860f2:	f013 031f 	ands.w	r3, r3, #31
   860f6:	9002      	str	r0, [sp, #8]
   860f8:	9101      	str	r1, [sp, #4]
   860fa:	9303      	str	r3, [sp, #12]
   860fc:	d002      	beq.n	86104 <__hexnan+0x20>
   860fe:	460b      	mov	r3, r1
   86100:	3304      	adds	r3, #4
   86102:	9301      	str	r3, [sp, #4]
   86104:	9c01      	ldr	r4, [sp, #4]
   86106:	2300      	movs	r3, #0
   86108:	f1a4 0c04 	sub.w	ip, r4, #4
   8610c:	46e0      	mov	r8, ip
   8610e:	4660      	mov	r0, ip
   86110:	4619      	mov	r1, r3
   86112:	f844 3c04 	str.w	r3, [r4, #-4]
   86116:	469a      	mov	sl, r3
   86118:	469e      	mov	lr, r3
   8611a:	9b02      	ldr	r3, [sp, #8]
   8611c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 86264 <__hexnan+0x180>
   86120:	681d      	ldr	r5, [r3, #0]
   86122:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   86126:	b323      	cbz	r3, 86172 <__hexnan+0x8e>
   86128:	f819 4003 	ldrb.w	r4, [r9, r3]
   8612c:	2c00      	cmp	r4, #0
   8612e:	d143      	bne.n	861b8 <__hexnan+0xd4>
   86130:	2b20      	cmp	r3, #32
   86132:	d85e      	bhi.n	861f2 <__hexnan+0x10e>
   86134:	45d6      	cmp	lr, sl
   86136:	ddf4      	ble.n	86122 <__hexnan+0x3e>
   86138:	4540      	cmp	r0, r8
   8613a:	d213      	bcs.n	86164 <__hexnan+0x80>
   8613c:	2907      	cmp	r1, #7
   8613e:	dc11      	bgt.n	86164 <__hexnan+0x80>
   86140:	4603      	mov	r3, r0
   86142:	f1c1 0108 	rsb	r1, r1, #8
   86146:	0089      	lsls	r1, r1, #2
   86148:	6806      	ldr	r6, [r0, #0]
   8614a:	f1c1 0b20 	rsb	fp, r1, #32
   8614e:	685f      	ldr	r7, [r3, #4]
   86150:	fa07 f40b 	lsl.w	r4, r7, fp
   86154:	4334      	orrs	r4, r6
   86156:	fa27 f601 	lsr.w	r6, r7, r1
   8615a:	601c      	str	r4, [r3, #0]
   8615c:	f843 6f04 	str.w	r6, [r3, #4]!
   86160:	4598      	cmp	r8, r3
   86162:	d8f4      	bhi.n	8614e <__hexnan+0x6a>
   86164:	4290      	cmp	r0, r2
   86166:	d83b      	bhi.n	861e0 <__hexnan+0xfc>
   86168:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   8616c:	2108      	movs	r1, #8
   8616e:	2b00      	cmp	r3, #0
   86170:	d1da      	bne.n	86128 <__hexnan+0x44>
   86172:	f1be 0f00 	cmp.w	lr, #0
   86176:	d03e      	beq.n	861f6 <__hexnan+0x112>
   86178:	4540      	cmp	r0, r8
   8617a:	d201      	bcs.n	86180 <__hexnan+0x9c>
   8617c:	2907      	cmp	r1, #7
   8617e:	dd5d      	ble.n	8623c <__hexnan+0x158>
   86180:	4282      	cmp	r2, r0
   86182:	d23c      	bcs.n	861fe <__hexnan+0x11a>
   86184:	4613      	mov	r3, r2
   86186:	f850 1b04 	ldr.w	r1, [r0], #4
   8618a:	4584      	cmp	ip, r0
   8618c:	f843 1b04 	str.w	r1, [r3], #4
   86190:	d2f9      	bcs.n	86186 <__hexnan+0xa2>
   86192:	2100      	movs	r1, #0
   86194:	f843 1b04 	str.w	r1, [r3], #4
   86198:	459c      	cmp	ip, r3
   8619a:	d2fb      	bcs.n	86194 <__hexnan+0xb0>
   8619c:	9b01      	ldr	r3, [sp, #4]
   8619e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   861a2:	b92b      	cbnz	r3, 861b0 <__hexnan+0xcc>
   861a4:	4562      	cmp	r2, ip
   861a6:	d03b      	beq.n	86220 <__hexnan+0x13c>
   861a8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   861ac:	2b00      	cmp	r3, #0
   861ae:	d0f9      	beq.n	861a4 <__hexnan+0xc0>
   861b0:	2005      	movs	r0, #5
   861b2:	b005      	add	sp, #20
   861b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   861b8:	3101      	adds	r1, #1
   861ba:	2908      	cmp	r1, #8
   861bc:	f10e 0e01 	add.w	lr, lr, #1
   861c0:	dc06      	bgt.n	861d0 <__hexnan+0xec>
   861c2:	6803      	ldr	r3, [r0, #0]
   861c4:	011b      	lsls	r3, r3, #4
   861c6:	f004 040f 	and.w	r4, r4, #15
   861ca:	431c      	orrs	r4, r3
   861cc:	6004      	str	r4, [r0, #0]
   861ce:	e7a8      	b.n	86122 <__hexnan+0x3e>
   861d0:	4290      	cmp	r0, r2
   861d2:	d9a6      	bls.n	86122 <__hexnan+0x3e>
   861d4:	2300      	movs	r3, #0
   861d6:	f840 3c04 	str.w	r3, [r0, #-4]
   861da:	2101      	movs	r1, #1
   861dc:	3804      	subs	r0, #4
   861de:	e7f2      	b.n	861c6 <__hexnan+0xe2>
   861e0:	2300      	movs	r3, #0
   861e2:	f1a0 0804 	sub.w	r8, r0, #4
   861e6:	f840 3c04 	str.w	r3, [r0, #-4]
   861ea:	46f2      	mov	sl, lr
   861ec:	4640      	mov	r0, r8
   861ee:	4619      	mov	r1, r3
   861f0:	e797      	b.n	86122 <__hexnan+0x3e>
   861f2:	2b29      	cmp	r3, #41	; 0x29
   861f4:	d01b      	beq.n	8622e <__hexnan+0x14a>
   861f6:	2004      	movs	r0, #4
   861f8:	b005      	add	sp, #20
   861fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   861fe:	9b03      	ldr	r3, [sp, #12]
   86200:	2b00      	cmp	r3, #0
   86202:	d0cb      	beq.n	8619c <__hexnan+0xb8>
   86204:	9c01      	ldr	r4, [sp, #4]
   86206:	9b03      	ldr	r3, [sp, #12]
   86208:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8620c:	f1c3 0320 	rsb	r3, r3, #32
   86210:	f04f 30ff 	mov.w	r0, #4294967295
   86214:	fa20 f303 	lsr.w	r3, r0, r3
   86218:	400b      	ands	r3, r1
   8621a:	f844 3c04 	str.w	r3, [r4, #-4]
   8621e:	e7c0      	b.n	861a2 <__hexnan+0xbe>
   86220:	2301      	movs	r3, #1
   86222:	2005      	movs	r0, #5
   86224:	f8cc 3000 	str.w	r3, [ip]
   86228:	b005      	add	sp, #20
   8622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8622e:	9b02      	ldr	r3, [sp, #8]
   86230:	3501      	adds	r5, #1
   86232:	601d      	str	r5, [r3, #0]
   86234:	f1be 0f00 	cmp.w	lr, #0
   86238:	d19e      	bne.n	86178 <__hexnan+0x94>
   8623a:	e7dc      	b.n	861f6 <__hexnan+0x112>
   8623c:	4604      	mov	r4, r0
   8623e:	f1c1 0308 	rsb	r3, r1, #8
   86242:	009b      	lsls	r3, r3, #2
   86244:	6805      	ldr	r5, [r0, #0]
   86246:	f1c3 0720 	rsb	r7, r3, #32
   8624a:	6866      	ldr	r6, [r4, #4]
   8624c:	fa06 f107 	lsl.w	r1, r6, r7
   86250:	4329      	orrs	r1, r5
   86252:	fa26 f503 	lsr.w	r5, r6, r3
   86256:	6021      	str	r1, [r4, #0]
   86258:	f844 5f04 	str.w	r5, [r4, #4]!
   8625c:	4544      	cmp	r4, r8
   8625e:	d3f4      	bcc.n	8624a <__hexnan+0x166>
   86260:	e78e      	b.n	86180 <__hexnan+0x9c>
   86262:	bf00      	nop
   86264:	00088ce4 	.word	0x00088ce4

00086268 <__locale_charset>:
   86268:	4800      	ldr	r0, [pc, #0]	; (8626c <__locale_charset+0x4>)
   8626a:	4770      	bx	lr
   8626c:	200705a8 	.word	0x200705a8

00086270 <__locale_mb_cur_max>:
   86270:	4b01      	ldr	r3, [pc, #4]	; (86278 <__locale_mb_cur_max+0x8>)
   86272:	6818      	ldr	r0, [r3, #0]
   86274:	4770      	bx	lr
   86276:	bf00      	nop
   86278:	200705c8 	.word	0x200705c8

0008627c <_localeconv_r>:
   8627c:	4800      	ldr	r0, [pc, #0]	; (86280 <_localeconv_r+0x4>)
   8627e:	4770      	bx	lr
   86280:	20070570 	.word	0x20070570

00086284 <__smakebuf_r>:
   86284:	898b      	ldrh	r3, [r1, #12]
   86286:	b29a      	uxth	r2, r3
   86288:	f012 0f02 	tst.w	r2, #2
   8628c:	d13c      	bne.n	86308 <__smakebuf_r+0x84>
   8628e:	b5f0      	push	{r4, r5, r6, r7, lr}
   86290:	460c      	mov	r4, r1
   86292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86296:	b091      	sub	sp, #68	; 0x44
   86298:	2900      	cmp	r1, #0
   8629a:	4605      	mov	r5, r0
   8629c:	db19      	blt.n	862d2 <__smakebuf_r+0x4e>
   8629e:	aa01      	add	r2, sp, #4
   862a0:	f001 fc3e 	bl	87b20 <_fstat_r>
   862a4:	2800      	cmp	r0, #0
   862a6:	db12      	blt.n	862ce <__smakebuf_r+0x4a>
   862a8:	9b02      	ldr	r3, [sp, #8]
   862aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   862ae:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   862b2:	fab7 f787 	clz	r7, r7
   862b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   862ba:	ea4f 1757 	mov.w	r7, r7, lsr #5
   862be:	d02a      	beq.n	86316 <__smakebuf_r+0x92>
   862c0:	89a3      	ldrh	r3, [r4, #12]
   862c2:	f44f 6680 	mov.w	r6, #1024	; 0x400
   862c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   862ca:	81a3      	strh	r3, [r4, #12]
   862cc:	e00b      	b.n	862e6 <__smakebuf_r+0x62>
   862ce:	89a3      	ldrh	r3, [r4, #12]
   862d0:	b29a      	uxth	r2, r3
   862d2:	f012 0f80 	tst.w	r2, #128	; 0x80
   862d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   862da:	81a3      	strh	r3, [r4, #12]
   862dc:	bf0c      	ite	eq
   862de:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   862e2:	2640      	movne	r6, #64	; 0x40
   862e4:	2700      	movs	r7, #0
   862e6:	4628      	mov	r0, r5
   862e8:	4631      	mov	r1, r6
   862ea:	f000 f843 	bl	86374 <_malloc_r>
   862ee:	89a3      	ldrh	r3, [r4, #12]
   862f0:	b340      	cbz	r0, 86344 <__smakebuf_r+0xc0>
   862f2:	4a1a      	ldr	r2, [pc, #104]	; (8635c <__smakebuf_r+0xd8>)
   862f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   862f8:	63ea      	str	r2, [r5, #60]	; 0x3c
   862fa:	81a3      	strh	r3, [r4, #12]
   862fc:	6020      	str	r0, [r4, #0]
   862fe:	6120      	str	r0, [r4, #16]
   86300:	6166      	str	r6, [r4, #20]
   86302:	b99f      	cbnz	r7, 8632c <__smakebuf_r+0xa8>
   86304:	b011      	add	sp, #68	; 0x44
   86306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86308:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8630c:	2201      	movs	r2, #1
   8630e:	600b      	str	r3, [r1, #0]
   86310:	610b      	str	r3, [r1, #16]
   86312:	614a      	str	r2, [r1, #20]
   86314:	4770      	bx	lr
   86316:	4b12      	ldr	r3, [pc, #72]	; (86360 <__smakebuf_r+0xdc>)
   86318:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   8631a:	429a      	cmp	r2, r3
   8631c:	d1d0      	bne.n	862c0 <__smakebuf_r+0x3c>
   8631e:	89a3      	ldrh	r3, [r4, #12]
   86320:	f44f 6680 	mov.w	r6, #1024	; 0x400
   86324:	4333      	orrs	r3, r6
   86326:	81a3      	strh	r3, [r4, #12]
   86328:	64e6      	str	r6, [r4, #76]	; 0x4c
   8632a:	e7dc      	b.n	862e6 <__smakebuf_r+0x62>
   8632c:	4628      	mov	r0, r5
   8632e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86332:	f001 fc09 	bl	87b48 <_isatty_r>
   86336:	2800      	cmp	r0, #0
   86338:	d0e4      	beq.n	86304 <__smakebuf_r+0x80>
   8633a:	89a3      	ldrh	r3, [r4, #12]
   8633c:	f043 0301 	orr.w	r3, r3, #1
   86340:	81a3      	strh	r3, [r4, #12]
   86342:	e7df      	b.n	86304 <__smakebuf_r+0x80>
   86344:	059a      	lsls	r2, r3, #22
   86346:	d4dd      	bmi.n	86304 <__smakebuf_r+0x80>
   86348:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8634c:	f043 0302 	orr.w	r3, r3, #2
   86350:	2101      	movs	r1, #1
   86352:	81a3      	strh	r3, [r4, #12]
   86354:	6022      	str	r2, [r4, #0]
   86356:	6122      	str	r2, [r4, #16]
   86358:	6161      	str	r1, [r4, #20]
   8635a:	e7d3      	b.n	86304 <__smakebuf_r+0x80>
   8635c:	0008531d 	.word	0x0008531d
   86360:	0008780d 	.word	0x0008780d

00086364 <malloc>:
   86364:	4b02      	ldr	r3, [pc, #8]	; (86370 <malloc+0xc>)
   86366:	4601      	mov	r1, r0
   86368:	6818      	ldr	r0, [r3, #0]
   8636a:	f000 b803 	b.w	86374 <_malloc_r>
   8636e:	bf00      	nop
   86370:	20070568 	.word	0x20070568

00086374 <_malloc_r>:
   86374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86378:	f101 050b 	add.w	r5, r1, #11
   8637c:	2d16      	cmp	r5, #22
   8637e:	b083      	sub	sp, #12
   86380:	4606      	mov	r6, r0
   86382:	d927      	bls.n	863d4 <_malloc_r+0x60>
   86384:	f035 0507 	bics.w	r5, r5, #7
   86388:	f100 80b6 	bmi.w	864f8 <_malloc_r+0x184>
   8638c:	42a9      	cmp	r1, r5
   8638e:	f200 80b3 	bhi.w	864f8 <_malloc_r+0x184>
   86392:	f000 fb23 	bl	869dc <__malloc_lock>
   86396:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8639a:	d222      	bcs.n	863e2 <_malloc_r+0x6e>
   8639c:	4fbc      	ldr	r7, [pc, #752]	; (86690 <_malloc_r+0x31c>)
   8639e:	08e8      	lsrs	r0, r5, #3
   863a0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   863a4:	68dc      	ldr	r4, [r3, #12]
   863a6:	429c      	cmp	r4, r3
   863a8:	f000 81bc 	beq.w	86724 <_malloc_r+0x3b0>
   863ac:	6863      	ldr	r3, [r4, #4]
   863ae:	68e1      	ldr	r1, [r4, #12]
   863b0:	f023 0303 	bic.w	r3, r3, #3
   863b4:	4423      	add	r3, r4
   863b6:	685a      	ldr	r2, [r3, #4]
   863b8:	68a5      	ldr	r5, [r4, #8]
   863ba:	f042 0201 	orr.w	r2, r2, #1
   863be:	60e9      	str	r1, [r5, #12]
   863c0:	4630      	mov	r0, r6
   863c2:	608d      	str	r5, [r1, #8]
   863c4:	605a      	str	r2, [r3, #4]
   863c6:	f000 fb0b 	bl	869e0 <__malloc_unlock>
   863ca:	3408      	adds	r4, #8
   863cc:	4620      	mov	r0, r4
   863ce:	b003      	add	sp, #12
   863d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   863d4:	2910      	cmp	r1, #16
   863d6:	f200 808f 	bhi.w	864f8 <_malloc_r+0x184>
   863da:	f000 faff 	bl	869dc <__malloc_lock>
   863de:	2510      	movs	r5, #16
   863e0:	e7dc      	b.n	8639c <_malloc_r+0x28>
   863e2:	0a68      	lsrs	r0, r5, #9
   863e4:	f000 808f 	beq.w	86506 <_malloc_r+0x192>
   863e8:	2804      	cmp	r0, #4
   863ea:	f200 8147 	bhi.w	8667c <_malloc_r+0x308>
   863ee:	09a8      	lsrs	r0, r5, #6
   863f0:	3038      	adds	r0, #56	; 0x38
   863f2:	0041      	lsls	r1, r0, #1
   863f4:	4fa6      	ldr	r7, [pc, #664]	; (86690 <_malloc_r+0x31c>)
   863f6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   863fa:	68cc      	ldr	r4, [r1, #12]
   863fc:	42a1      	cmp	r1, r4
   863fe:	d106      	bne.n	8640e <_malloc_r+0x9a>
   86400:	e00c      	b.n	8641c <_malloc_r+0xa8>
   86402:	2a00      	cmp	r2, #0
   86404:	f280 8082 	bge.w	8650c <_malloc_r+0x198>
   86408:	68e4      	ldr	r4, [r4, #12]
   8640a:	42a1      	cmp	r1, r4
   8640c:	d006      	beq.n	8641c <_malloc_r+0xa8>
   8640e:	6863      	ldr	r3, [r4, #4]
   86410:	f023 0303 	bic.w	r3, r3, #3
   86414:	1b5a      	subs	r2, r3, r5
   86416:	2a0f      	cmp	r2, #15
   86418:	ddf3      	ble.n	86402 <_malloc_r+0x8e>
   8641a:	3801      	subs	r0, #1
   8641c:	3001      	adds	r0, #1
   8641e:	499c      	ldr	r1, [pc, #624]	; (86690 <_malloc_r+0x31c>)
   86420:	693c      	ldr	r4, [r7, #16]
   86422:	f101 0e08 	add.w	lr, r1, #8
   86426:	4574      	cmp	r4, lr
   86428:	f000 8171 	beq.w	8670e <_malloc_r+0x39a>
   8642c:	6863      	ldr	r3, [r4, #4]
   8642e:	f023 0303 	bic.w	r3, r3, #3
   86432:	1b5a      	subs	r2, r3, r5
   86434:	2a0f      	cmp	r2, #15
   86436:	f300 8157 	bgt.w	866e8 <_malloc_r+0x374>
   8643a:	2a00      	cmp	r2, #0
   8643c:	f8c1 e014 	str.w	lr, [r1, #20]
   86440:	f8c1 e010 	str.w	lr, [r1, #16]
   86444:	da66      	bge.n	86514 <_malloc_r+0x1a0>
   86446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8644a:	f080 812d 	bcs.w	866a8 <_malloc_r+0x334>
   8644e:	08db      	lsrs	r3, r3, #3
   86450:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   86454:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   86458:	684a      	ldr	r2, [r1, #4]
   8645a:	2301      	movs	r3, #1
   8645c:	fa03 f30c 	lsl.w	r3, r3, ip
   86460:	f8d8 c008 	ldr.w	ip, [r8, #8]
   86464:	4313      	orrs	r3, r2
   86466:	f8c4 c008 	str.w	ip, [r4, #8]
   8646a:	f8c4 800c 	str.w	r8, [r4, #12]
   8646e:	604b      	str	r3, [r1, #4]
   86470:	f8c8 4008 	str.w	r4, [r8, #8]
   86474:	f8cc 400c 	str.w	r4, [ip, #12]
   86478:	1082      	asrs	r2, r0, #2
   8647a:	2401      	movs	r4, #1
   8647c:	4094      	lsls	r4, r2
   8647e:	429c      	cmp	r4, r3
   86480:	d855      	bhi.n	8652e <_malloc_r+0x1ba>
   86482:	4223      	tst	r3, r4
   86484:	d106      	bne.n	86494 <_malloc_r+0x120>
   86486:	f020 0003 	bic.w	r0, r0, #3
   8648a:	0064      	lsls	r4, r4, #1
   8648c:	4223      	tst	r3, r4
   8648e:	f100 0004 	add.w	r0, r0, #4
   86492:	d0fa      	beq.n	8648a <_malloc_r+0x116>
   86494:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   86498:	46c4      	mov	ip, r8
   8649a:	4681      	mov	r9, r0
   8649c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   864a0:	459c      	cmp	ip, r3
   864a2:	d107      	bne.n	864b4 <_malloc_r+0x140>
   864a4:	e135      	b.n	86712 <_malloc_r+0x39e>
   864a6:	2900      	cmp	r1, #0
   864a8:	f280 8145 	bge.w	86736 <_malloc_r+0x3c2>
   864ac:	68db      	ldr	r3, [r3, #12]
   864ae:	459c      	cmp	ip, r3
   864b0:	f000 812f 	beq.w	86712 <_malloc_r+0x39e>
   864b4:	685a      	ldr	r2, [r3, #4]
   864b6:	f022 0203 	bic.w	r2, r2, #3
   864ba:	1b51      	subs	r1, r2, r5
   864bc:	290f      	cmp	r1, #15
   864be:	ddf2      	ble.n	864a6 <_malloc_r+0x132>
   864c0:	461c      	mov	r4, r3
   864c2:	68da      	ldr	r2, [r3, #12]
   864c4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   864c8:	f045 0901 	orr.w	r9, r5, #1
   864cc:	f041 0801 	orr.w	r8, r1, #1
   864d0:	441d      	add	r5, r3
   864d2:	f8c3 9004 	str.w	r9, [r3, #4]
   864d6:	4630      	mov	r0, r6
   864d8:	f8cc 200c 	str.w	r2, [ip, #12]
   864dc:	f8c2 c008 	str.w	ip, [r2, #8]
   864e0:	617d      	str	r5, [r7, #20]
   864e2:	613d      	str	r5, [r7, #16]
   864e4:	f8c5 e00c 	str.w	lr, [r5, #12]
   864e8:	f8c5 e008 	str.w	lr, [r5, #8]
   864ec:	f8c5 8004 	str.w	r8, [r5, #4]
   864f0:	5069      	str	r1, [r5, r1]
   864f2:	f000 fa75 	bl	869e0 <__malloc_unlock>
   864f6:	e769      	b.n	863cc <_malloc_r+0x58>
   864f8:	2400      	movs	r4, #0
   864fa:	4620      	mov	r0, r4
   864fc:	230c      	movs	r3, #12
   864fe:	6033      	str	r3, [r6, #0]
   86500:	b003      	add	sp, #12
   86502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86506:	217e      	movs	r1, #126	; 0x7e
   86508:	203f      	movs	r0, #63	; 0x3f
   8650a:	e773      	b.n	863f4 <_malloc_r+0x80>
   8650c:	4423      	add	r3, r4
   8650e:	685a      	ldr	r2, [r3, #4]
   86510:	68e1      	ldr	r1, [r4, #12]
   86512:	e751      	b.n	863b8 <_malloc_r+0x44>
   86514:	4423      	add	r3, r4
   86516:	685a      	ldr	r2, [r3, #4]
   86518:	4630      	mov	r0, r6
   8651a:	f042 0201 	orr.w	r2, r2, #1
   8651e:	605a      	str	r2, [r3, #4]
   86520:	3408      	adds	r4, #8
   86522:	f000 fa5d 	bl	869e0 <__malloc_unlock>
   86526:	4620      	mov	r0, r4
   86528:	b003      	add	sp, #12
   8652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8652e:	68bc      	ldr	r4, [r7, #8]
   86530:	6863      	ldr	r3, [r4, #4]
   86532:	f023 0803 	bic.w	r8, r3, #3
   86536:	4545      	cmp	r5, r8
   86538:	d804      	bhi.n	86544 <_malloc_r+0x1d0>
   8653a:	ebc5 0308 	rsb	r3, r5, r8
   8653e:	2b0f      	cmp	r3, #15
   86540:	f300 808c 	bgt.w	8665c <_malloc_r+0x2e8>
   86544:	4b53      	ldr	r3, [pc, #332]	; (86694 <_malloc_r+0x320>)
   86546:	f8df a15c 	ldr.w	sl, [pc, #348]	; 866a4 <_malloc_r+0x330>
   8654a:	681a      	ldr	r2, [r3, #0]
   8654c:	f8da 3000 	ldr.w	r3, [sl]
   86550:	442a      	add	r2, r5
   86552:	3301      	adds	r3, #1
   86554:	eb04 0b08 	add.w	fp, r4, r8
   86558:	f000 8151 	beq.w	867fe <_malloc_r+0x48a>
   8655c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   86560:	320f      	adds	r2, #15
   86562:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   86566:	f022 020f 	bic.w	r2, r2, #15
   8656a:	4611      	mov	r1, r2
   8656c:	4630      	mov	r0, r6
   8656e:	9201      	str	r2, [sp, #4]
   86570:	f001 f90c 	bl	8778c <_sbrk_r>
   86574:	f1b0 3fff 	cmp.w	r0, #4294967295
   86578:	4681      	mov	r9, r0
   8657a:	9a01      	ldr	r2, [sp, #4]
   8657c:	f000 8148 	beq.w	86810 <_malloc_r+0x49c>
   86580:	4583      	cmp	fp, r0
   86582:	f200 80ef 	bhi.w	86764 <_malloc_r+0x3f0>
   86586:	4b44      	ldr	r3, [pc, #272]	; (86698 <_malloc_r+0x324>)
   86588:	45cb      	cmp	fp, r9
   8658a:	6819      	ldr	r1, [r3, #0]
   8658c:	4411      	add	r1, r2
   8658e:	6019      	str	r1, [r3, #0]
   86590:	f000 8143 	beq.w	8681a <_malloc_r+0x4a6>
   86594:	f8da 0000 	ldr.w	r0, [sl]
   86598:	f8df e108 	ldr.w	lr, [pc, #264]	; 866a4 <_malloc_r+0x330>
   8659c:	3001      	adds	r0, #1
   8659e:	bf1b      	ittet	ne
   865a0:	ebcb 0b09 	rsbne	fp, fp, r9
   865a4:	4459      	addne	r1, fp
   865a6:	f8ce 9000 	streq.w	r9, [lr]
   865aa:	6019      	strne	r1, [r3, #0]
   865ac:	f019 0107 	ands.w	r1, r9, #7
   865b0:	f000 8108 	beq.w	867c4 <_malloc_r+0x450>
   865b4:	f1c1 0008 	rsb	r0, r1, #8
   865b8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   865bc:	4481      	add	r9, r0
   865be:	3108      	adds	r1, #8
   865c0:	444a      	add	r2, r9
   865c2:	f3c2 020b 	ubfx	r2, r2, #0, #12
   865c6:	ebc2 0a01 	rsb	sl, r2, r1
   865ca:	4651      	mov	r1, sl
   865cc:	4630      	mov	r0, r6
   865ce:	9301      	str	r3, [sp, #4]
   865d0:	f001 f8dc 	bl	8778c <_sbrk_r>
   865d4:	1c43      	adds	r3, r0, #1
   865d6:	9b01      	ldr	r3, [sp, #4]
   865d8:	f000 812d 	beq.w	86836 <_malloc_r+0x4c2>
   865dc:	ebc9 0200 	rsb	r2, r9, r0
   865e0:	4452      	add	r2, sl
   865e2:	f042 0201 	orr.w	r2, r2, #1
   865e6:	6819      	ldr	r1, [r3, #0]
   865e8:	42bc      	cmp	r4, r7
   865ea:	4451      	add	r1, sl
   865ec:	f8c7 9008 	str.w	r9, [r7, #8]
   865f0:	6019      	str	r1, [r3, #0]
   865f2:	f8c9 2004 	str.w	r2, [r9, #4]
   865f6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 86698 <_malloc_r+0x324>
   865fa:	d016      	beq.n	8662a <_malloc_r+0x2b6>
   865fc:	f1b8 0f0f 	cmp.w	r8, #15
   86600:	f240 80ef 	bls.w	867e2 <_malloc_r+0x46e>
   86604:	6862      	ldr	r2, [r4, #4]
   86606:	f1a8 030c 	sub.w	r3, r8, #12
   8660a:	f023 0307 	bic.w	r3, r3, #7
   8660e:	f002 0201 	and.w	r2, r2, #1
   86612:	18e0      	adds	r0, r4, r3
   86614:	f04f 0e05 	mov.w	lr, #5
   86618:	431a      	orrs	r2, r3
   8661a:	2b0f      	cmp	r3, #15
   8661c:	6062      	str	r2, [r4, #4]
   8661e:	f8c0 e004 	str.w	lr, [r0, #4]
   86622:	f8c0 e008 	str.w	lr, [r0, #8]
   86626:	f200 810a 	bhi.w	8683e <_malloc_r+0x4ca>
   8662a:	4b1c      	ldr	r3, [pc, #112]	; (8669c <_malloc_r+0x328>)
   8662c:	68bc      	ldr	r4, [r7, #8]
   8662e:	681a      	ldr	r2, [r3, #0]
   86630:	4291      	cmp	r1, r2
   86632:	bf88      	it	hi
   86634:	6019      	strhi	r1, [r3, #0]
   86636:	4b1a      	ldr	r3, [pc, #104]	; (866a0 <_malloc_r+0x32c>)
   86638:	681a      	ldr	r2, [r3, #0]
   8663a:	4291      	cmp	r1, r2
   8663c:	6862      	ldr	r2, [r4, #4]
   8663e:	bf88      	it	hi
   86640:	6019      	strhi	r1, [r3, #0]
   86642:	f022 0203 	bic.w	r2, r2, #3
   86646:	4295      	cmp	r5, r2
   86648:	eba2 0305 	sub.w	r3, r2, r5
   8664c:	d801      	bhi.n	86652 <_malloc_r+0x2de>
   8664e:	2b0f      	cmp	r3, #15
   86650:	dc04      	bgt.n	8665c <_malloc_r+0x2e8>
   86652:	4630      	mov	r0, r6
   86654:	f000 f9c4 	bl	869e0 <__malloc_unlock>
   86658:	2400      	movs	r4, #0
   8665a:	e6b7      	b.n	863cc <_malloc_r+0x58>
   8665c:	f045 0201 	orr.w	r2, r5, #1
   86660:	f043 0301 	orr.w	r3, r3, #1
   86664:	4425      	add	r5, r4
   86666:	6062      	str	r2, [r4, #4]
   86668:	4630      	mov	r0, r6
   8666a:	60bd      	str	r5, [r7, #8]
   8666c:	3408      	adds	r4, #8
   8666e:	606b      	str	r3, [r5, #4]
   86670:	f000 f9b6 	bl	869e0 <__malloc_unlock>
   86674:	4620      	mov	r0, r4
   86676:	b003      	add	sp, #12
   86678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8667c:	2814      	cmp	r0, #20
   8667e:	d969      	bls.n	86754 <_malloc_r+0x3e0>
   86680:	2854      	cmp	r0, #84	; 0x54
   86682:	f200 8098 	bhi.w	867b6 <_malloc_r+0x442>
   86686:	0b28      	lsrs	r0, r5, #12
   86688:	306e      	adds	r0, #110	; 0x6e
   8668a:	0041      	lsls	r1, r0, #1
   8668c:	e6b2      	b.n	863f4 <_malloc_r+0x80>
   8668e:	bf00      	nop
   86690:	200705cc 	.word	0x200705cc
   86694:	2007aeac 	.word	0x2007aeac
   86698:	2007aeb0 	.word	0x2007aeb0
   8669c:	2007aea8 	.word	0x2007aea8
   866a0:	2007aea4 	.word	0x2007aea4
   866a4:	200709d8 	.word	0x200709d8
   866a8:	0a5a      	lsrs	r2, r3, #9
   866aa:	2a04      	cmp	r2, #4
   866ac:	d955      	bls.n	8675a <_malloc_r+0x3e6>
   866ae:	2a14      	cmp	r2, #20
   866b0:	f200 80a7 	bhi.w	86802 <_malloc_r+0x48e>
   866b4:	325b      	adds	r2, #91	; 0x5b
   866b6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   866ba:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   866be:	f8dc 1008 	ldr.w	r1, [ip, #8]
   866c2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8687c <_malloc_r+0x508>
   866c6:	4561      	cmp	r1, ip
   866c8:	d07f      	beq.n	867ca <_malloc_r+0x456>
   866ca:	684a      	ldr	r2, [r1, #4]
   866cc:	f022 0203 	bic.w	r2, r2, #3
   866d0:	4293      	cmp	r3, r2
   866d2:	d202      	bcs.n	866da <_malloc_r+0x366>
   866d4:	6889      	ldr	r1, [r1, #8]
   866d6:	458c      	cmp	ip, r1
   866d8:	d1f7      	bne.n	866ca <_malloc_r+0x356>
   866da:	68ca      	ldr	r2, [r1, #12]
   866dc:	687b      	ldr	r3, [r7, #4]
   866de:	60e2      	str	r2, [r4, #12]
   866e0:	60a1      	str	r1, [r4, #8]
   866e2:	6094      	str	r4, [r2, #8]
   866e4:	60cc      	str	r4, [r1, #12]
   866e6:	e6c7      	b.n	86478 <_malloc_r+0x104>
   866e8:	f045 0701 	orr.w	r7, r5, #1
   866ec:	f042 0301 	orr.w	r3, r2, #1
   866f0:	4425      	add	r5, r4
   866f2:	6067      	str	r7, [r4, #4]
   866f4:	4630      	mov	r0, r6
   866f6:	614d      	str	r5, [r1, #20]
   866f8:	610d      	str	r5, [r1, #16]
   866fa:	f8c5 e00c 	str.w	lr, [r5, #12]
   866fe:	f8c5 e008 	str.w	lr, [r5, #8]
   86702:	606b      	str	r3, [r5, #4]
   86704:	50aa      	str	r2, [r5, r2]
   86706:	3408      	adds	r4, #8
   86708:	f000 f96a 	bl	869e0 <__malloc_unlock>
   8670c:	e65e      	b.n	863cc <_malloc_r+0x58>
   8670e:	684b      	ldr	r3, [r1, #4]
   86710:	e6b2      	b.n	86478 <_malloc_r+0x104>
   86712:	f109 0901 	add.w	r9, r9, #1
   86716:	f019 0f03 	tst.w	r9, #3
   8671a:	f10c 0c08 	add.w	ip, ip, #8
   8671e:	f47f aebd 	bne.w	8649c <_malloc_r+0x128>
   86722:	e02c      	b.n	8677e <_malloc_r+0x40a>
   86724:	f104 0308 	add.w	r3, r4, #8
   86728:	6964      	ldr	r4, [r4, #20]
   8672a:	42a3      	cmp	r3, r4
   8672c:	bf08      	it	eq
   8672e:	3002      	addeq	r0, #2
   86730:	f43f ae75 	beq.w	8641e <_malloc_r+0xaa>
   86734:	e63a      	b.n	863ac <_malloc_r+0x38>
   86736:	461c      	mov	r4, r3
   86738:	441a      	add	r2, r3
   8673a:	6851      	ldr	r1, [r2, #4]
   8673c:	68db      	ldr	r3, [r3, #12]
   8673e:	f854 5f08 	ldr.w	r5, [r4, #8]!
   86742:	f041 0101 	orr.w	r1, r1, #1
   86746:	6051      	str	r1, [r2, #4]
   86748:	4630      	mov	r0, r6
   8674a:	60eb      	str	r3, [r5, #12]
   8674c:	609d      	str	r5, [r3, #8]
   8674e:	f000 f947 	bl	869e0 <__malloc_unlock>
   86752:	e63b      	b.n	863cc <_malloc_r+0x58>
   86754:	305b      	adds	r0, #91	; 0x5b
   86756:	0041      	lsls	r1, r0, #1
   86758:	e64c      	b.n	863f4 <_malloc_r+0x80>
   8675a:	099a      	lsrs	r2, r3, #6
   8675c:	3238      	adds	r2, #56	; 0x38
   8675e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   86762:	e7aa      	b.n	866ba <_malloc_r+0x346>
   86764:	42bc      	cmp	r4, r7
   86766:	4b45      	ldr	r3, [pc, #276]	; (8687c <_malloc_r+0x508>)
   86768:	f43f af0d 	beq.w	86586 <_malloc_r+0x212>
   8676c:	689c      	ldr	r4, [r3, #8]
   8676e:	6862      	ldr	r2, [r4, #4]
   86770:	f022 0203 	bic.w	r2, r2, #3
   86774:	e767      	b.n	86646 <_malloc_r+0x2d2>
   86776:	f8d8 8000 	ldr.w	r8, [r8]
   8677a:	4598      	cmp	r8, r3
   8677c:	d17c      	bne.n	86878 <_malloc_r+0x504>
   8677e:	f010 0f03 	tst.w	r0, #3
   86782:	f1a8 0308 	sub.w	r3, r8, #8
   86786:	f100 30ff 	add.w	r0, r0, #4294967295
   8678a:	d1f4      	bne.n	86776 <_malloc_r+0x402>
   8678c:	687b      	ldr	r3, [r7, #4]
   8678e:	ea23 0304 	bic.w	r3, r3, r4
   86792:	607b      	str	r3, [r7, #4]
   86794:	0064      	lsls	r4, r4, #1
   86796:	429c      	cmp	r4, r3
   86798:	f63f aec9 	bhi.w	8652e <_malloc_r+0x1ba>
   8679c:	2c00      	cmp	r4, #0
   8679e:	f43f aec6 	beq.w	8652e <_malloc_r+0x1ba>
   867a2:	4223      	tst	r3, r4
   867a4:	4648      	mov	r0, r9
   867a6:	f47f ae75 	bne.w	86494 <_malloc_r+0x120>
   867aa:	0064      	lsls	r4, r4, #1
   867ac:	4223      	tst	r3, r4
   867ae:	f100 0004 	add.w	r0, r0, #4
   867b2:	d0fa      	beq.n	867aa <_malloc_r+0x436>
   867b4:	e66e      	b.n	86494 <_malloc_r+0x120>
   867b6:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   867ba:	d818      	bhi.n	867ee <_malloc_r+0x47a>
   867bc:	0be8      	lsrs	r0, r5, #15
   867be:	3077      	adds	r0, #119	; 0x77
   867c0:	0041      	lsls	r1, r0, #1
   867c2:	e617      	b.n	863f4 <_malloc_r+0x80>
   867c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   867c8:	e6fa      	b.n	865c0 <_malloc_r+0x24c>
   867ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   867ce:	1092      	asrs	r2, r2, #2
   867d0:	f04f 0c01 	mov.w	ip, #1
   867d4:	fa0c f202 	lsl.w	r2, ip, r2
   867d8:	4313      	orrs	r3, r2
   867da:	f8c8 3004 	str.w	r3, [r8, #4]
   867de:	460a      	mov	r2, r1
   867e0:	e77d      	b.n	866de <_malloc_r+0x36a>
   867e2:	2301      	movs	r3, #1
   867e4:	f8c9 3004 	str.w	r3, [r9, #4]
   867e8:	464c      	mov	r4, r9
   867ea:	2200      	movs	r2, #0
   867ec:	e72b      	b.n	86646 <_malloc_r+0x2d2>
   867ee:	f240 5354 	movw	r3, #1364	; 0x554
   867f2:	4298      	cmp	r0, r3
   867f4:	d81c      	bhi.n	86830 <_malloc_r+0x4bc>
   867f6:	0ca8      	lsrs	r0, r5, #18
   867f8:	307c      	adds	r0, #124	; 0x7c
   867fa:	0041      	lsls	r1, r0, #1
   867fc:	e5fa      	b.n	863f4 <_malloc_r+0x80>
   867fe:	3210      	adds	r2, #16
   86800:	e6b3      	b.n	8656a <_malloc_r+0x1f6>
   86802:	2a54      	cmp	r2, #84	; 0x54
   86804:	d823      	bhi.n	8684e <_malloc_r+0x4da>
   86806:	0b1a      	lsrs	r2, r3, #12
   86808:	326e      	adds	r2, #110	; 0x6e
   8680a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8680e:	e754      	b.n	866ba <_malloc_r+0x346>
   86810:	68bc      	ldr	r4, [r7, #8]
   86812:	6862      	ldr	r2, [r4, #4]
   86814:	f022 0203 	bic.w	r2, r2, #3
   86818:	e715      	b.n	86646 <_malloc_r+0x2d2>
   8681a:	f3cb 000b 	ubfx	r0, fp, #0, #12
   8681e:	2800      	cmp	r0, #0
   86820:	f47f aeb8 	bne.w	86594 <_malloc_r+0x220>
   86824:	4442      	add	r2, r8
   86826:	68bb      	ldr	r3, [r7, #8]
   86828:	f042 0201 	orr.w	r2, r2, #1
   8682c:	605a      	str	r2, [r3, #4]
   8682e:	e6fc      	b.n	8662a <_malloc_r+0x2b6>
   86830:	21fc      	movs	r1, #252	; 0xfc
   86832:	207e      	movs	r0, #126	; 0x7e
   86834:	e5de      	b.n	863f4 <_malloc_r+0x80>
   86836:	2201      	movs	r2, #1
   86838:	f04f 0a00 	mov.w	sl, #0
   8683c:	e6d3      	b.n	865e6 <_malloc_r+0x272>
   8683e:	f104 0108 	add.w	r1, r4, #8
   86842:	4630      	mov	r0, r6
   86844:	f7fe fec0 	bl	855c8 <_free_r>
   86848:	f8da 1000 	ldr.w	r1, [sl]
   8684c:	e6ed      	b.n	8662a <_malloc_r+0x2b6>
   8684e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86852:	d804      	bhi.n	8685e <_malloc_r+0x4ea>
   86854:	0bda      	lsrs	r2, r3, #15
   86856:	3277      	adds	r2, #119	; 0x77
   86858:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8685c:	e72d      	b.n	866ba <_malloc_r+0x346>
   8685e:	f240 5154 	movw	r1, #1364	; 0x554
   86862:	428a      	cmp	r2, r1
   86864:	d804      	bhi.n	86870 <_malloc_r+0x4fc>
   86866:	0c9a      	lsrs	r2, r3, #18
   86868:	327c      	adds	r2, #124	; 0x7c
   8686a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8686e:	e724      	b.n	866ba <_malloc_r+0x346>
   86870:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   86874:	227e      	movs	r2, #126	; 0x7e
   86876:	e720      	b.n	866ba <_malloc_r+0x346>
   86878:	687b      	ldr	r3, [r7, #4]
   8687a:	e78b      	b.n	86794 <_malloc_r+0x420>
   8687c:	200705cc 	.word	0x200705cc

00086880 <memchr>:
   86880:	0783      	lsls	r3, r0, #30
   86882:	b470      	push	{r4, r5, r6}
   86884:	b2c9      	uxtb	r1, r1
   86886:	d040      	beq.n	8690a <memchr+0x8a>
   86888:	1e54      	subs	r4, r2, #1
   8688a:	2a00      	cmp	r2, #0
   8688c:	d03f      	beq.n	8690e <memchr+0x8e>
   8688e:	7803      	ldrb	r3, [r0, #0]
   86890:	428b      	cmp	r3, r1
   86892:	bf18      	it	ne
   86894:	1c43      	addne	r3, r0, #1
   86896:	d105      	bne.n	868a4 <memchr+0x24>
   86898:	e01c      	b.n	868d4 <memchr+0x54>
   8689a:	b1ec      	cbz	r4, 868d8 <memchr+0x58>
   8689c:	7802      	ldrb	r2, [r0, #0]
   8689e:	3c01      	subs	r4, #1
   868a0:	428a      	cmp	r2, r1
   868a2:	d017      	beq.n	868d4 <memchr+0x54>
   868a4:	f013 0f03 	tst.w	r3, #3
   868a8:	4618      	mov	r0, r3
   868aa:	f103 0301 	add.w	r3, r3, #1
   868ae:	d1f4      	bne.n	8689a <memchr+0x1a>
   868b0:	2c03      	cmp	r4, #3
   868b2:	d814      	bhi.n	868de <memchr+0x5e>
   868b4:	b184      	cbz	r4, 868d8 <memchr+0x58>
   868b6:	7803      	ldrb	r3, [r0, #0]
   868b8:	428b      	cmp	r3, r1
   868ba:	d00b      	beq.n	868d4 <memchr+0x54>
   868bc:	1905      	adds	r5, r0, r4
   868be:	1c43      	adds	r3, r0, #1
   868c0:	e002      	b.n	868c8 <memchr+0x48>
   868c2:	7802      	ldrb	r2, [r0, #0]
   868c4:	428a      	cmp	r2, r1
   868c6:	d005      	beq.n	868d4 <memchr+0x54>
   868c8:	42ab      	cmp	r3, r5
   868ca:	4618      	mov	r0, r3
   868cc:	f103 0301 	add.w	r3, r3, #1
   868d0:	d1f7      	bne.n	868c2 <memchr+0x42>
   868d2:	2000      	movs	r0, #0
   868d4:	bc70      	pop	{r4, r5, r6}
   868d6:	4770      	bx	lr
   868d8:	4620      	mov	r0, r4
   868da:	bc70      	pop	{r4, r5, r6}
   868dc:	4770      	bx	lr
   868de:	4602      	mov	r2, r0
   868e0:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   868e4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   868e8:	6813      	ldr	r3, [r2, #0]
   868ea:	4610      	mov	r0, r2
   868ec:	4073      	eors	r3, r6
   868ee:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   868f2:	ea25 0303 	bic.w	r3, r5, r3
   868f6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   868fa:	f102 0204 	add.w	r2, r2, #4
   868fe:	d1d9      	bne.n	868b4 <memchr+0x34>
   86900:	3c04      	subs	r4, #4
   86902:	2c03      	cmp	r4, #3
   86904:	4610      	mov	r0, r2
   86906:	d8ef      	bhi.n	868e8 <memchr+0x68>
   86908:	e7d4      	b.n	868b4 <memchr+0x34>
   8690a:	4614      	mov	r4, r2
   8690c:	e7d0      	b.n	868b0 <memchr+0x30>
   8690e:	4610      	mov	r0, r2
   86910:	e7e0      	b.n	868d4 <memchr+0x54>
   86912:	bf00      	nop

00086914 <memmove>:
   86914:	4288      	cmp	r0, r1
   86916:	b5f0      	push	{r4, r5, r6, r7, lr}
   86918:	d90d      	bls.n	86936 <memmove+0x22>
   8691a:	188b      	adds	r3, r1, r2
   8691c:	4298      	cmp	r0, r3
   8691e:	d20a      	bcs.n	86936 <memmove+0x22>
   86920:	1881      	adds	r1, r0, r2
   86922:	2a00      	cmp	r2, #0
   86924:	d054      	beq.n	869d0 <memmove+0xbc>
   86926:	1a9a      	subs	r2, r3, r2
   86928:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8692c:	4293      	cmp	r3, r2
   8692e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   86932:	d1f9      	bne.n	86928 <memmove+0x14>
   86934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86936:	2a0f      	cmp	r2, #15
   86938:	d948      	bls.n	869cc <memmove+0xb8>
   8693a:	ea40 0301 	orr.w	r3, r0, r1
   8693e:	079b      	lsls	r3, r3, #30
   86940:	d147      	bne.n	869d2 <memmove+0xbe>
   86942:	4615      	mov	r5, r2
   86944:	f100 0410 	add.w	r4, r0, #16
   86948:	f101 0310 	add.w	r3, r1, #16
   8694c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   86950:	3d10      	subs	r5, #16
   86952:	f844 6c10 	str.w	r6, [r4, #-16]
   86956:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8695a:	2d0f      	cmp	r5, #15
   8695c:	f844 6c0c 	str.w	r6, [r4, #-12]
   86960:	f853 6c08 	ldr.w	r6, [r3, #-8]
   86964:	f104 0410 	add.w	r4, r4, #16
   86968:	f844 6c18 	str.w	r6, [r4, #-24]
   8696c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86970:	f103 0310 	add.w	r3, r3, #16
   86974:	f844 6c14 	str.w	r6, [r4, #-20]
   86978:	d8e8      	bhi.n	8694c <memmove+0x38>
   8697a:	f1a2 0310 	sub.w	r3, r2, #16
   8697e:	f023 030f 	bic.w	r3, r3, #15
   86982:	f002 0e0f 	and.w	lr, r2, #15
   86986:	3310      	adds	r3, #16
   86988:	f1be 0f03 	cmp.w	lr, #3
   8698c:	4419      	add	r1, r3
   8698e:	4403      	add	r3, r0
   86990:	d921      	bls.n	869d6 <memmove+0xc2>
   86992:	460e      	mov	r6, r1
   86994:	4674      	mov	r4, lr
   86996:	1f1d      	subs	r5, r3, #4
   86998:	f856 7b04 	ldr.w	r7, [r6], #4
   8699c:	3c04      	subs	r4, #4
   8699e:	2c03      	cmp	r4, #3
   869a0:	f845 7f04 	str.w	r7, [r5, #4]!
   869a4:	d8f8      	bhi.n	86998 <memmove+0x84>
   869a6:	f1ae 0404 	sub.w	r4, lr, #4
   869aa:	f024 0403 	bic.w	r4, r4, #3
   869ae:	3404      	adds	r4, #4
   869b0:	4423      	add	r3, r4
   869b2:	4421      	add	r1, r4
   869b4:	f002 0203 	and.w	r2, r2, #3
   869b8:	b152      	cbz	r2, 869d0 <memmove+0xbc>
   869ba:	3b01      	subs	r3, #1
   869bc:	440a      	add	r2, r1
   869be:	f811 4b01 	ldrb.w	r4, [r1], #1
   869c2:	4291      	cmp	r1, r2
   869c4:	f803 4f01 	strb.w	r4, [r3, #1]!
   869c8:	d1f9      	bne.n	869be <memmove+0xaa>
   869ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   869cc:	4603      	mov	r3, r0
   869ce:	e7f3      	b.n	869b8 <memmove+0xa4>
   869d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   869d2:	4603      	mov	r3, r0
   869d4:	e7f1      	b.n	869ba <memmove+0xa6>
   869d6:	4672      	mov	r2, lr
   869d8:	e7ee      	b.n	869b8 <memmove+0xa4>
   869da:	bf00      	nop

000869dc <__malloc_lock>:
   869dc:	4770      	bx	lr
   869de:	bf00      	nop

000869e0 <__malloc_unlock>:
   869e0:	4770      	bx	lr
   869e2:	bf00      	nop

000869e4 <_Balloc>:
   869e4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   869e6:	b570      	push	{r4, r5, r6, lr}
   869e8:	4605      	mov	r5, r0
   869ea:	460c      	mov	r4, r1
   869ec:	b152      	cbz	r2, 86a04 <_Balloc+0x20>
   869ee:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   869f2:	b18b      	cbz	r3, 86a18 <_Balloc+0x34>
   869f4:	6819      	ldr	r1, [r3, #0]
   869f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   869fa:	2200      	movs	r2, #0
   869fc:	4618      	mov	r0, r3
   869fe:	611a      	str	r2, [r3, #16]
   86a00:	60da      	str	r2, [r3, #12]
   86a02:	bd70      	pop	{r4, r5, r6, pc}
   86a04:	2221      	movs	r2, #33	; 0x21
   86a06:	2104      	movs	r1, #4
   86a08:	f001 f806 	bl	87a18 <_calloc_r>
   86a0c:	64e8      	str	r0, [r5, #76]	; 0x4c
   86a0e:	4602      	mov	r2, r0
   86a10:	2800      	cmp	r0, #0
   86a12:	d1ec      	bne.n	869ee <_Balloc+0xa>
   86a14:	2000      	movs	r0, #0
   86a16:	bd70      	pop	{r4, r5, r6, pc}
   86a18:	2101      	movs	r1, #1
   86a1a:	fa01 f604 	lsl.w	r6, r1, r4
   86a1e:	1d72      	adds	r2, r6, #5
   86a20:	4628      	mov	r0, r5
   86a22:	0092      	lsls	r2, r2, #2
   86a24:	f000 fff8 	bl	87a18 <_calloc_r>
   86a28:	4603      	mov	r3, r0
   86a2a:	2800      	cmp	r0, #0
   86a2c:	d0f2      	beq.n	86a14 <_Balloc+0x30>
   86a2e:	6044      	str	r4, [r0, #4]
   86a30:	6086      	str	r6, [r0, #8]
   86a32:	e7e2      	b.n	869fa <_Balloc+0x16>

00086a34 <_Bfree>:
   86a34:	b131      	cbz	r1, 86a44 <_Bfree+0x10>
   86a36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86a38:	684a      	ldr	r2, [r1, #4]
   86a3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86a3e:	6008      	str	r0, [r1, #0]
   86a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86a44:	4770      	bx	lr
   86a46:	bf00      	nop

00086a48 <__multadd>:
   86a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   86a4a:	460c      	mov	r4, r1
   86a4c:	4605      	mov	r5, r0
   86a4e:	690e      	ldr	r6, [r1, #16]
   86a50:	b083      	sub	sp, #12
   86a52:	f101 0e14 	add.w	lr, r1, #20
   86a56:	2700      	movs	r7, #0
   86a58:	f8de 1000 	ldr.w	r1, [lr]
   86a5c:	3701      	adds	r7, #1
   86a5e:	b288      	uxth	r0, r1
   86a60:	0c09      	lsrs	r1, r1, #16
   86a62:	fb02 3300 	mla	r3, r2, r0, r3
   86a66:	fb02 f101 	mul.w	r1, r2, r1
   86a6a:	b298      	uxth	r0, r3
   86a6c:	eb01 4313 	add.w	r3, r1, r3, lsr #16
   86a70:	eb00 4103 	add.w	r1, r0, r3, lsl #16
   86a74:	42be      	cmp	r6, r7
   86a76:	f84e 1b04 	str.w	r1, [lr], #4
   86a7a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   86a7e:	dceb      	bgt.n	86a58 <__multadd+0x10>
   86a80:	b13b      	cbz	r3, 86a92 <__multadd+0x4a>
   86a82:	68a2      	ldr	r2, [r4, #8]
   86a84:	4296      	cmp	r6, r2
   86a86:	da07      	bge.n	86a98 <__multadd+0x50>
   86a88:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   86a8c:	3601      	adds	r6, #1
   86a8e:	6153      	str	r3, [r2, #20]
   86a90:	6126      	str	r6, [r4, #16]
   86a92:	4620      	mov	r0, r4
   86a94:	b003      	add	sp, #12
   86a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86a98:	6861      	ldr	r1, [r4, #4]
   86a9a:	4628      	mov	r0, r5
   86a9c:	3101      	adds	r1, #1
   86a9e:	9301      	str	r3, [sp, #4]
   86aa0:	f7ff ffa0 	bl	869e4 <_Balloc>
   86aa4:	4607      	mov	r7, r0
   86aa6:	6922      	ldr	r2, [r4, #16]
   86aa8:	f104 010c 	add.w	r1, r4, #12
   86aac:	3202      	adds	r2, #2
   86aae:	0092      	lsls	r2, r2, #2
   86ab0:	300c      	adds	r0, #12
   86ab2:	f7fc f9c9 	bl	82e48 <memcpy>
   86ab6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86ab8:	6861      	ldr	r1, [r4, #4]
   86aba:	9b01      	ldr	r3, [sp, #4]
   86abc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86ac0:	6020      	str	r0, [r4, #0]
   86ac2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86ac6:	463c      	mov	r4, r7
   86ac8:	e7de      	b.n	86a88 <__multadd+0x40>
   86aca:	bf00      	nop

00086acc <__s2b>:
   86acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86ad0:	4c23      	ldr	r4, [pc, #140]	; (86b60 <__s2b+0x94>)
   86ad2:	461f      	mov	r7, r3
   86ad4:	3308      	adds	r3, #8
   86ad6:	fb84 4e03 	smull	r4, lr, r4, r3
   86ada:	17db      	asrs	r3, r3, #31
   86adc:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
   86ae0:	f1be 0f01 	cmp.w	lr, #1
   86ae4:	4606      	mov	r6, r0
   86ae6:	460c      	mov	r4, r1
   86ae8:	4690      	mov	r8, r2
   86aea:	9d08      	ldr	r5, [sp, #32]
   86aec:	dd35      	ble.n	86b5a <__s2b+0x8e>
   86aee:	2301      	movs	r3, #1
   86af0:	2100      	movs	r1, #0
   86af2:	005b      	lsls	r3, r3, #1
   86af4:	459e      	cmp	lr, r3
   86af6:	f101 0101 	add.w	r1, r1, #1
   86afa:	dcfa      	bgt.n	86af2 <__s2b+0x26>
   86afc:	4630      	mov	r0, r6
   86afe:	f7ff ff71 	bl	869e4 <_Balloc>
   86b02:	2301      	movs	r3, #1
   86b04:	f1b8 0f09 	cmp.w	r8, #9
   86b08:	6145      	str	r5, [r0, #20]
   86b0a:	6103      	str	r3, [r0, #16]
   86b0c:	dd21      	ble.n	86b52 <__s2b+0x86>
   86b0e:	f104 0909 	add.w	r9, r4, #9
   86b12:	464d      	mov	r5, r9
   86b14:	4444      	add	r4, r8
   86b16:	f815 3b01 	ldrb.w	r3, [r5], #1
   86b1a:	4601      	mov	r1, r0
   86b1c:	3b30      	subs	r3, #48	; 0x30
   86b1e:	4630      	mov	r0, r6
   86b20:	220a      	movs	r2, #10
   86b22:	f7ff ff91 	bl	86a48 <__multadd>
   86b26:	42a5      	cmp	r5, r4
   86b28:	d1f5      	bne.n	86b16 <__s2b+0x4a>
   86b2a:	eb09 0408 	add.w	r4, r9, r8
   86b2e:	3c08      	subs	r4, #8
   86b30:	4547      	cmp	r7, r8
   86b32:	dd0c      	ble.n	86b4e <__s2b+0x82>
   86b34:	ebc8 0707 	rsb	r7, r8, r7
   86b38:	4427      	add	r7, r4
   86b3a:	f814 3b01 	ldrb.w	r3, [r4], #1
   86b3e:	4601      	mov	r1, r0
   86b40:	3b30      	subs	r3, #48	; 0x30
   86b42:	4630      	mov	r0, r6
   86b44:	220a      	movs	r2, #10
   86b46:	f7ff ff7f 	bl	86a48 <__multadd>
   86b4a:	42bc      	cmp	r4, r7
   86b4c:	d1f5      	bne.n	86b3a <__s2b+0x6e>
   86b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86b52:	340a      	adds	r4, #10
   86b54:	f04f 0809 	mov.w	r8, #9
   86b58:	e7ea      	b.n	86b30 <__s2b+0x64>
   86b5a:	2100      	movs	r1, #0
   86b5c:	e7ce      	b.n	86afc <__s2b+0x30>
   86b5e:	bf00      	nop
   86b60:	38e38e39 	.word	0x38e38e39

00086b64 <__hi0bits>:
   86b64:	0c03      	lsrs	r3, r0, #16
   86b66:	041b      	lsls	r3, r3, #16
   86b68:	b9b3      	cbnz	r3, 86b98 <__hi0bits+0x34>
   86b6a:	0400      	lsls	r0, r0, #16
   86b6c:	2310      	movs	r3, #16
   86b6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   86b72:	bf04      	itt	eq
   86b74:	0200      	lsleq	r0, r0, #8
   86b76:	3308      	addeq	r3, #8
   86b78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   86b7c:	bf04      	itt	eq
   86b7e:	0100      	lsleq	r0, r0, #4
   86b80:	3304      	addeq	r3, #4
   86b82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   86b86:	bf04      	itt	eq
   86b88:	0080      	lsleq	r0, r0, #2
   86b8a:	3302      	addeq	r3, #2
   86b8c:	2800      	cmp	r0, #0
   86b8e:	db07      	blt.n	86ba0 <__hi0bits+0x3c>
   86b90:	0042      	lsls	r2, r0, #1
   86b92:	d403      	bmi.n	86b9c <__hi0bits+0x38>
   86b94:	2020      	movs	r0, #32
   86b96:	4770      	bx	lr
   86b98:	2300      	movs	r3, #0
   86b9a:	e7e8      	b.n	86b6e <__hi0bits+0xa>
   86b9c:	1c58      	adds	r0, r3, #1
   86b9e:	4770      	bx	lr
   86ba0:	4618      	mov	r0, r3
   86ba2:	4770      	bx	lr

00086ba4 <__lo0bits>:
   86ba4:	6803      	ldr	r3, [r0, #0]
   86ba6:	f013 0207 	ands.w	r2, r3, #7
   86baa:	d007      	beq.n	86bbc <__lo0bits+0x18>
   86bac:	07d9      	lsls	r1, r3, #31
   86bae:	d420      	bmi.n	86bf2 <__lo0bits+0x4e>
   86bb0:	079a      	lsls	r2, r3, #30
   86bb2:	d420      	bmi.n	86bf6 <__lo0bits+0x52>
   86bb4:	089b      	lsrs	r3, r3, #2
   86bb6:	6003      	str	r3, [r0, #0]
   86bb8:	2002      	movs	r0, #2
   86bba:	4770      	bx	lr
   86bbc:	b299      	uxth	r1, r3
   86bbe:	b909      	cbnz	r1, 86bc4 <__lo0bits+0x20>
   86bc0:	0c1b      	lsrs	r3, r3, #16
   86bc2:	2210      	movs	r2, #16
   86bc4:	f013 0fff 	tst.w	r3, #255	; 0xff
   86bc8:	bf04      	itt	eq
   86bca:	0a1b      	lsreq	r3, r3, #8
   86bcc:	3208      	addeq	r2, #8
   86bce:	0719      	lsls	r1, r3, #28
   86bd0:	bf04      	itt	eq
   86bd2:	091b      	lsreq	r3, r3, #4
   86bd4:	3204      	addeq	r2, #4
   86bd6:	0799      	lsls	r1, r3, #30
   86bd8:	bf04      	itt	eq
   86bda:	089b      	lsreq	r3, r3, #2
   86bdc:	3202      	addeq	r2, #2
   86bde:	07d9      	lsls	r1, r3, #31
   86be0:	d404      	bmi.n	86bec <__lo0bits+0x48>
   86be2:	085b      	lsrs	r3, r3, #1
   86be4:	d101      	bne.n	86bea <__lo0bits+0x46>
   86be6:	2020      	movs	r0, #32
   86be8:	4770      	bx	lr
   86bea:	3201      	adds	r2, #1
   86bec:	6003      	str	r3, [r0, #0]
   86bee:	4610      	mov	r0, r2
   86bf0:	4770      	bx	lr
   86bf2:	2000      	movs	r0, #0
   86bf4:	4770      	bx	lr
   86bf6:	085b      	lsrs	r3, r3, #1
   86bf8:	6003      	str	r3, [r0, #0]
   86bfa:	2001      	movs	r0, #1
   86bfc:	4770      	bx	lr
   86bfe:	bf00      	nop

00086c00 <__i2b>:
   86c00:	b510      	push	{r4, lr}
   86c02:	460c      	mov	r4, r1
   86c04:	2101      	movs	r1, #1
   86c06:	f7ff feed 	bl	869e4 <_Balloc>
   86c0a:	2201      	movs	r2, #1
   86c0c:	6144      	str	r4, [r0, #20]
   86c0e:	6102      	str	r2, [r0, #16]
   86c10:	bd10      	pop	{r4, pc}
   86c12:	bf00      	nop

00086c14 <__multiply>:
   86c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86c18:	690e      	ldr	r6, [r1, #16]
   86c1a:	6915      	ldr	r5, [r2, #16]
   86c1c:	b085      	sub	sp, #20
   86c1e:	42ae      	cmp	r6, r5
   86c20:	460c      	mov	r4, r1
   86c22:	4691      	mov	r9, r2
   86c24:	f2c0 8092 	blt.w	86d4c <__multiply+0x138>
   86c28:	462b      	mov	r3, r5
   86c2a:	4635      	mov	r5, r6
   86c2c:	461e      	mov	r6, r3
   86c2e:	68a3      	ldr	r3, [r4, #8]
   86c30:	eb05 0806 	add.w	r8, r5, r6
   86c34:	6861      	ldr	r1, [r4, #4]
   86c36:	4598      	cmp	r8, r3
   86c38:	bfc8      	it	gt
   86c3a:	3101      	addgt	r1, #1
   86c3c:	f7ff fed2 	bl	869e4 <_Balloc>
   86c40:	f100 0a14 	add.w	sl, r0, #20
   86c44:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
   86c48:	45da      	cmp	sl, fp
   86c4a:	9001      	str	r0, [sp, #4]
   86c4c:	d205      	bcs.n	86c5a <__multiply+0x46>
   86c4e:	4653      	mov	r3, sl
   86c50:	2100      	movs	r1, #0
   86c52:	f843 1b04 	str.w	r1, [r3], #4
   86c56:	459b      	cmp	fp, r3
   86c58:	d8fb      	bhi.n	86c52 <__multiply+0x3e>
   86c5a:	f109 0914 	add.w	r9, r9, #20
   86c5e:	eb09 0386 	add.w	r3, r9, r6, lsl #2
   86c62:	f104 0214 	add.w	r2, r4, #20
   86c66:	4599      	cmp	r9, r3
   86c68:	eb02 0c85 	add.w	ip, r2, r5, lsl #2
   86c6c:	d259      	bcs.n	86d22 <__multiply+0x10e>
   86c6e:	f8cd b008 	str.w	fp, [sp, #8]
   86c72:	f8cd 800c 	str.w	r8, [sp, #12]
   86c76:	469b      	mov	fp, r3
   86c78:	4690      	mov	r8, r2
   86c7a:	f859 7b04 	ldr.w	r7, [r9], #4
   86c7e:	fa1f fe87 	uxth.w	lr, r7
   86c82:	f1be 0f00 	cmp.w	lr, #0
   86c86:	d01f      	beq.n	86cc8 <__multiply+0xb4>
   86c88:	4647      	mov	r7, r8
   86c8a:	4656      	mov	r6, sl
   86c8c:	2100      	movs	r1, #0
   86c8e:	e000      	b.n	86c92 <__multiply+0x7e>
   86c90:	4606      	mov	r6, r0
   86c92:	4630      	mov	r0, r6
   86c94:	f857 5b04 	ldr.w	r5, [r7], #4
   86c98:	6834      	ldr	r4, [r6, #0]
   86c9a:	b2ab      	uxth	r3, r5
   86c9c:	b2a2      	uxth	r2, r4
   86c9e:	fb0e 2203 	mla	r2, lr, r3, r2
   86ca2:	0c2d      	lsrs	r5, r5, #16
   86ca4:	0c24      	lsrs	r4, r4, #16
   86ca6:	fb0e 4405 	mla	r4, lr, r5, r4
   86caa:	1853      	adds	r3, r2, r1
   86cac:	eb04 4113 	add.w	r1, r4, r3, lsr #16
   86cb0:	b29a      	uxth	r2, r3
   86cb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   86cb6:	45bc      	cmp	ip, r7
   86cb8:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86cbc:	f840 2b04 	str.w	r2, [r0], #4
   86cc0:	d8e6      	bhi.n	86c90 <__multiply+0x7c>
   86cc2:	6071      	str	r1, [r6, #4]
   86cc4:	f859 7c04 	ldr.w	r7, [r9, #-4]
   86cc8:	0c3f      	lsrs	r7, r7, #16
   86cca:	d022      	beq.n	86d12 <__multiply+0xfe>
   86ccc:	f8da 3000 	ldr.w	r3, [sl]
   86cd0:	2200      	movs	r2, #0
   86cd2:	4655      	mov	r5, sl
   86cd4:	461e      	mov	r6, r3
   86cd6:	4640      	mov	r0, r8
   86cd8:	4696      	mov	lr, r2
   86cda:	e000      	b.n	86cde <__multiply+0xca>
   86cdc:	4625      	mov	r5, r4
   86cde:	462c      	mov	r4, r5
   86ce0:	8802      	ldrh	r2, [r0, #0]
   86ce2:	0c36      	lsrs	r6, r6, #16
   86ce4:	fb07 6602 	mla	r6, r7, r2, r6
   86ce8:	b299      	uxth	r1, r3
   86cea:	eb06 020e 	add.w	r2, r6, lr
   86cee:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   86cf2:	f844 3b04 	str.w	r3, [r4], #4
   86cf6:	f850 1b04 	ldr.w	r1, [r0], #4
   86cfa:	686e      	ldr	r6, [r5, #4]
   86cfc:	0c09      	lsrs	r1, r1, #16
   86cfe:	b2b3      	uxth	r3, r6
   86d00:	fb07 3101 	mla	r1, r7, r1, r3
   86d04:	4584      	cmp	ip, r0
   86d06:	eb01 4312 	add.w	r3, r1, r2, lsr #16
   86d0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   86d0e:	d8e5      	bhi.n	86cdc <__multiply+0xc8>
   86d10:	606b      	str	r3, [r5, #4]
   86d12:	45cb      	cmp	fp, r9
   86d14:	f10a 0a04 	add.w	sl, sl, #4
   86d18:	d8af      	bhi.n	86c7a <__multiply+0x66>
   86d1a:	f8dd b008 	ldr.w	fp, [sp, #8]
   86d1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   86d22:	f1b8 0f00 	cmp.w	r8, #0
   86d26:	dd0b      	ble.n	86d40 <__multiply+0x12c>
   86d28:	f85b 3c04 	ldr.w	r3, [fp, #-4]
   86d2c:	f1ab 0b04 	sub.w	fp, fp, #4
   86d30:	b11b      	cbz	r3, 86d3a <__multiply+0x126>
   86d32:	e005      	b.n	86d40 <__multiply+0x12c>
   86d34:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
   86d38:	b913      	cbnz	r3, 86d40 <__multiply+0x12c>
   86d3a:	f1b8 0801 	subs.w	r8, r8, #1
   86d3e:	d1f9      	bne.n	86d34 <__multiply+0x120>
   86d40:	9801      	ldr	r0, [sp, #4]
   86d42:	f8c0 8010 	str.w	r8, [r0, #16]
   86d46:	b005      	add	sp, #20
   86d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d4c:	4614      	mov	r4, r2
   86d4e:	4689      	mov	r9, r1
   86d50:	e76d      	b.n	86c2e <__multiply+0x1a>
   86d52:	bf00      	nop

00086d54 <__pow5mult>:
   86d54:	f012 0303 	ands.w	r3, r2, #3
   86d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86d5c:	4614      	mov	r4, r2
   86d5e:	4607      	mov	r7, r0
   86d60:	460e      	mov	r6, r1
   86d62:	d12d      	bne.n	86dc0 <__pow5mult+0x6c>
   86d64:	10a4      	asrs	r4, r4, #2
   86d66:	d01c      	beq.n	86da2 <__pow5mult+0x4e>
   86d68:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   86d6a:	b395      	cbz	r5, 86dd2 <__pow5mult+0x7e>
   86d6c:	07e3      	lsls	r3, r4, #31
   86d6e:	f04f 0800 	mov.w	r8, #0
   86d72:	d406      	bmi.n	86d82 <__pow5mult+0x2e>
   86d74:	1064      	asrs	r4, r4, #1
   86d76:	d014      	beq.n	86da2 <__pow5mult+0x4e>
   86d78:	6828      	ldr	r0, [r5, #0]
   86d7a:	b1a8      	cbz	r0, 86da8 <__pow5mult+0x54>
   86d7c:	4605      	mov	r5, r0
   86d7e:	07e3      	lsls	r3, r4, #31
   86d80:	d5f8      	bpl.n	86d74 <__pow5mult+0x20>
   86d82:	4638      	mov	r0, r7
   86d84:	4631      	mov	r1, r6
   86d86:	462a      	mov	r2, r5
   86d88:	f7ff ff44 	bl	86c14 <__multiply>
   86d8c:	b1b6      	cbz	r6, 86dbc <__pow5mult+0x68>
   86d8e:	6872      	ldr	r2, [r6, #4]
   86d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86d92:	1064      	asrs	r4, r4, #1
   86d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86d98:	6031      	str	r1, [r6, #0]
   86d9a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   86d9e:	4606      	mov	r6, r0
   86da0:	d1ea      	bne.n	86d78 <__pow5mult+0x24>
   86da2:	4630      	mov	r0, r6
   86da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86da8:	4629      	mov	r1, r5
   86daa:	462a      	mov	r2, r5
   86dac:	4638      	mov	r0, r7
   86dae:	f7ff ff31 	bl	86c14 <__multiply>
   86db2:	6028      	str	r0, [r5, #0]
   86db4:	f8c0 8000 	str.w	r8, [r0]
   86db8:	4605      	mov	r5, r0
   86dba:	e7e0      	b.n	86d7e <__pow5mult+0x2a>
   86dbc:	4606      	mov	r6, r0
   86dbe:	e7d9      	b.n	86d74 <__pow5mult+0x20>
   86dc0:	4a0b      	ldr	r2, [pc, #44]	; (86df0 <__pow5mult+0x9c>)
   86dc2:	3b01      	subs	r3, #1
   86dc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86dc8:	2300      	movs	r3, #0
   86dca:	f7ff fe3d 	bl	86a48 <__multadd>
   86dce:	4606      	mov	r6, r0
   86dd0:	e7c8      	b.n	86d64 <__pow5mult+0x10>
   86dd2:	2101      	movs	r1, #1
   86dd4:	4638      	mov	r0, r7
   86dd6:	f7ff fe05 	bl	869e4 <_Balloc>
   86dda:	f240 2171 	movw	r1, #625	; 0x271
   86dde:	2201      	movs	r2, #1
   86de0:	2300      	movs	r3, #0
   86de2:	6141      	str	r1, [r0, #20]
   86de4:	6102      	str	r2, [r0, #16]
   86de6:	4605      	mov	r5, r0
   86de8:	64b8      	str	r0, [r7, #72]	; 0x48
   86dea:	6003      	str	r3, [r0, #0]
   86dec:	e7be      	b.n	86d6c <__pow5mult+0x18>
   86dee:	bf00      	nop
   86df0:	00088eb8 	.word	0x00088eb8

00086df4 <__lshift>:
   86df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86df8:	690f      	ldr	r7, [r1, #16]
   86dfa:	ea4f 1962 	mov.w	r9, r2, asr #5
   86dfe:	688b      	ldr	r3, [r1, #8]
   86e00:	444f      	add	r7, r9
   86e02:	1c7d      	adds	r5, r7, #1
   86e04:	429d      	cmp	r5, r3
   86e06:	460e      	mov	r6, r1
   86e08:	4614      	mov	r4, r2
   86e0a:	4680      	mov	r8, r0
   86e0c:	6849      	ldr	r1, [r1, #4]
   86e0e:	dd04      	ble.n	86e1a <__lshift+0x26>
   86e10:	005b      	lsls	r3, r3, #1
   86e12:	429d      	cmp	r5, r3
   86e14:	f101 0101 	add.w	r1, r1, #1
   86e18:	dcfa      	bgt.n	86e10 <__lshift+0x1c>
   86e1a:	4640      	mov	r0, r8
   86e1c:	f7ff fde2 	bl	869e4 <_Balloc>
   86e20:	f1b9 0f00 	cmp.w	r9, #0
   86e24:	f100 0114 	add.w	r1, r0, #20
   86e28:	dd09      	ble.n	86e3e <__lshift+0x4a>
   86e2a:	2300      	movs	r3, #0
   86e2c:	469e      	mov	lr, r3
   86e2e:	460a      	mov	r2, r1
   86e30:	3301      	adds	r3, #1
   86e32:	454b      	cmp	r3, r9
   86e34:	f842 eb04 	str.w	lr, [r2], #4
   86e38:	d1fa      	bne.n	86e30 <__lshift+0x3c>
   86e3a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   86e3e:	6932      	ldr	r2, [r6, #16]
   86e40:	f106 0314 	add.w	r3, r6, #20
   86e44:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
   86e48:	f014 021f 	ands.w	r2, r4, #31
   86e4c:	d022      	beq.n	86e94 <__lshift+0xa0>
   86e4e:	f1c2 0920 	rsb	r9, r2, #32
   86e52:	f04f 0a00 	mov.w	sl, #0
   86e56:	681c      	ldr	r4, [r3, #0]
   86e58:	468c      	mov	ip, r1
   86e5a:	4094      	lsls	r4, r2
   86e5c:	ea4a 0404 	orr.w	r4, sl, r4
   86e60:	f841 4b04 	str.w	r4, [r1], #4
   86e64:	f853 4b04 	ldr.w	r4, [r3], #4
   86e68:	459e      	cmp	lr, r3
   86e6a:	fa24 fa09 	lsr.w	sl, r4, r9
   86e6e:	d8f2      	bhi.n	86e56 <__lshift+0x62>
   86e70:	f8cc a004 	str.w	sl, [ip, #4]
   86e74:	f1ba 0f00 	cmp.w	sl, #0
   86e78:	d000      	beq.n	86e7c <__lshift+0x88>
   86e7a:	1cbd      	adds	r5, r7, #2
   86e7c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   86e80:	6872      	ldr	r2, [r6, #4]
   86e82:	3d01      	subs	r5, #1
   86e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86e88:	6105      	str	r5, [r0, #16]
   86e8a:	6031      	str	r1, [r6, #0]
   86e8c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   86e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86e94:	3904      	subs	r1, #4
   86e96:	f853 2b04 	ldr.w	r2, [r3], #4
   86e9a:	459e      	cmp	lr, r3
   86e9c:	f841 2f04 	str.w	r2, [r1, #4]!
   86ea0:	d8f9      	bhi.n	86e96 <__lshift+0xa2>
   86ea2:	e7eb      	b.n	86e7c <__lshift+0x88>

00086ea4 <__mcmp>:
   86ea4:	6902      	ldr	r2, [r0, #16]
   86ea6:	690b      	ldr	r3, [r1, #16]
   86ea8:	1ad2      	subs	r2, r2, r3
   86eaa:	d113      	bne.n	86ed4 <__mcmp+0x30>
   86eac:	009b      	lsls	r3, r3, #2
   86eae:	3014      	adds	r0, #20
   86eb0:	3114      	adds	r1, #20
   86eb2:	4419      	add	r1, r3
   86eb4:	b410      	push	{r4}
   86eb6:	4403      	add	r3, r0
   86eb8:	e001      	b.n	86ebe <__mcmp+0x1a>
   86eba:	4298      	cmp	r0, r3
   86ebc:	d20c      	bcs.n	86ed8 <__mcmp+0x34>
   86ebe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   86ec2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86ec6:	4294      	cmp	r4, r2
   86ec8:	d0f7      	beq.n	86eba <__mcmp+0x16>
   86eca:	d309      	bcc.n	86ee0 <__mcmp+0x3c>
   86ecc:	2001      	movs	r0, #1
   86ece:	f85d 4b04 	ldr.w	r4, [sp], #4
   86ed2:	4770      	bx	lr
   86ed4:	4610      	mov	r0, r2
   86ed6:	4770      	bx	lr
   86ed8:	2000      	movs	r0, #0
   86eda:	f85d 4b04 	ldr.w	r4, [sp], #4
   86ede:	4770      	bx	lr
   86ee0:	f04f 30ff 	mov.w	r0, #4294967295
   86ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
   86ee8:	4770      	bx	lr
   86eea:	bf00      	nop

00086eec <__mdiff>:
   86eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86ef0:	460c      	mov	r4, r1
   86ef2:	4605      	mov	r5, r0
   86ef4:	4611      	mov	r1, r2
   86ef6:	4620      	mov	r0, r4
   86ef8:	4691      	mov	r9, r2
   86efa:	f7ff ffd3 	bl	86ea4 <__mcmp>
   86efe:	1e06      	subs	r6, r0, #0
   86f00:	d05d      	beq.n	86fbe <__mdiff+0xd2>
   86f02:	db56      	blt.n	86fb2 <__mdiff+0xc6>
   86f04:	f04f 0a00 	mov.w	sl, #0
   86f08:	4628      	mov	r0, r5
   86f0a:	6861      	ldr	r1, [r4, #4]
   86f0c:	f7ff fd6a 	bl	869e4 <_Balloc>
   86f10:	f109 0314 	add.w	r3, r9, #20
   86f14:	4680      	mov	r8, r0
   86f16:	461e      	mov	r6, r3
   86f18:	6927      	ldr	r7, [r4, #16]
   86f1a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   86f1e:	f104 0e14 	add.w	lr, r4, #20
   86f22:	4675      	mov	r5, lr
   86f24:	f8c0 a00c 	str.w	sl, [r0, #12]
   86f28:	f100 0414 	add.w	r4, r0, #20
   86f2c:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
   86f30:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   86f34:	f04f 0a00 	mov.w	sl, #0
   86f38:	f855 2b04 	ldr.w	r2, [r5], #4
   86f3c:	f856 1b04 	ldr.w	r1, [r6], #4
   86f40:	b290      	uxth	r0, r2
   86f42:	eb00 030a 	add.w	r3, r0, sl
   86f46:	b288      	uxth	r0, r1
   86f48:	0c09      	lsrs	r1, r1, #16
   86f4a:	1a1b      	subs	r3, r3, r0
   86f4c:	ebc1 4212 	rsb	r2, r1, r2, lsr #16
   86f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
   86f54:	b29b      	uxth	r3, r3
   86f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86f5a:	45b4      	cmp	ip, r6
   86f5c:	f844 3b04 	str.w	r3, [r4], #4
   86f60:	ea4f 4a22 	mov.w	sl, r2, asr #16
   86f64:	46a9      	mov	r9, r5
   86f66:	d8e7      	bhi.n	86f38 <__mdiff+0x4c>
   86f68:	45ae      	cmp	lr, r5
   86f6a:	4626      	mov	r6, r4
   86f6c:	d915      	bls.n	86f9a <__mdiff+0xae>
   86f6e:	f859 0b04 	ldr.w	r0, [r9], #4
   86f72:	b283      	uxth	r3, r0
   86f74:	4453      	add	r3, sl
   86f76:	0c00      	lsrs	r0, r0, #16
   86f78:	eb00 4123 	add.w	r1, r0, r3, asr #16
   86f7c:	b29b      	uxth	r3, r3
   86f7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86f82:	45ce      	cmp	lr, r9
   86f84:	f844 3b04 	str.w	r3, [r4], #4
   86f88:	ea4f 4a21 	mov.w	sl, r1, asr #16
   86f8c:	d8ef      	bhi.n	86f6e <__mdiff+0x82>
   86f8e:	43ed      	mvns	r5, r5
   86f90:	4475      	add	r5, lr
   86f92:	f025 0403 	bic.w	r4, r5, #3
   86f96:	3404      	adds	r4, #4
   86f98:	4434      	add	r4, r6
   86f9a:	3c04      	subs	r4, #4
   86f9c:	b923      	cbnz	r3, 86fa8 <__mdiff+0xbc>
   86f9e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   86fa2:	3f01      	subs	r7, #1
   86fa4:	2b00      	cmp	r3, #0
   86fa6:	d0fa      	beq.n	86f9e <__mdiff+0xb2>
   86fa8:	4640      	mov	r0, r8
   86faa:	f8c8 7010 	str.w	r7, [r8, #16]
   86fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86fb2:	4623      	mov	r3, r4
   86fb4:	f04f 0a01 	mov.w	sl, #1
   86fb8:	464c      	mov	r4, r9
   86fba:	4699      	mov	r9, r3
   86fbc:	e7a4      	b.n	86f08 <__mdiff+0x1c>
   86fbe:	4628      	mov	r0, r5
   86fc0:	4631      	mov	r1, r6
   86fc2:	f7ff fd0f 	bl	869e4 <_Balloc>
   86fc6:	2301      	movs	r3, #1
   86fc8:	6146      	str	r6, [r0, #20]
   86fca:	6103      	str	r3, [r0, #16]
   86fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00086fd0 <__ulp>:
   86fd0:	4b0f      	ldr	r3, [pc, #60]	; (87010 <__ulp+0x40>)
   86fd2:	400b      	ands	r3, r1
   86fd4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   86fd8:	2b00      	cmp	r3, #0
   86fda:	dd02      	ble.n	86fe2 <__ulp+0x12>
   86fdc:	2000      	movs	r0, #0
   86fde:	4619      	mov	r1, r3
   86fe0:	4770      	bx	lr
   86fe2:	425b      	negs	r3, r3
   86fe4:	151b      	asrs	r3, r3, #20
   86fe6:	2b13      	cmp	r3, #19
   86fe8:	f04f 0000 	mov.w	r0, #0
   86fec:	f04f 0100 	mov.w	r1, #0
   86ff0:	dd09      	ble.n	87006 <__ulp+0x36>
   86ff2:	2b32      	cmp	r3, #50	; 0x32
   86ff4:	bfdd      	ittte	le
   86ff6:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
   86ffa:	2201      	movle	r2, #1
   86ffc:	fa02 f303 	lslle.w	r3, r2, r3
   87000:	2301      	movgt	r3, #1
   87002:	4618      	mov	r0, r3
   87004:	4770      	bx	lr
   87006:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8700a:	fa42 f103 	asr.w	r1, r2, r3
   8700e:	4770      	bx	lr
   87010:	7ff00000 	.word	0x7ff00000

00087014 <__b2d>:
   87014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87018:	6905      	ldr	r5, [r0, #16]
   8701a:	f100 0414 	add.w	r4, r0, #20
   8701e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   87022:	f855 7c04 	ldr.w	r7, [r5, #-4]
   87026:	460e      	mov	r6, r1
   87028:	4638      	mov	r0, r7
   8702a:	f7ff fd9b 	bl	86b64 <__hi0bits>
   8702e:	f1c0 0320 	rsb	r3, r0, #32
   87032:	280a      	cmp	r0, #10
   87034:	6033      	str	r3, [r6, #0]
   87036:	f1a5 0104 	sub.w	r1, r5, #4
   8703a:	dc17      	bgt.n	8706c <__b2d+0x58>
   8703c:	428c      	cmp	r4, r1
   8703e:	f1c0 060b 	rsb	r6, r0, #11
   87042:	bf38      	it	cc
   87044:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   87048:	fa27 fe06 	lsr.w	lr, r7, r6
   8704c:	f100 0015 	add.w	r0, r0, #21
   87050:	bf34      	ite	cc
   87052:	40f1      	lsrcc	r1, r6
   87054:	2100      	movcs	r1, #0
   87056:	4087      	lsls	r7, r0
   87058:	f04e 537f 	orr.w	r3, lr, #1069547520	; 0x3fc00000
   8705c:	ea41 0207 	orr.w	r2, r1, r7
   87060:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   87064:	4610      	mov	r0, r2
   87066:	4619      	mov	r1, r3
   87068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8706c:	428c      	cmp	r4, r1
   8706e:	d222      	bcs.n	870b6 <__b2d+0xa2>
   87070:	f1b0 0c0b 	subs.w	ip, r0, #11
   87074:	f1a5 0808 	sub.w	r8, r5, #8
   87078:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8707c:	d028      	beq.n	870d0 <__b2d+0xbc>
   8707e:	f1c0 0e2b 	rsb	lr, r0, #43	; 0x2b
   87082:	4544      	cmp	r4, r8
   87084:	fa07 f70c 	lsl.w	r7, r7, ip
   87088:	fa21 f60e 	lsr.w	r6, r1, lr
   8708c:	ea47 0706 	orr.w	r7, r7, r6
   87090:	bf38      	it	cc
   87092:	f855 0c0c 	ldrcc.w	r0, [r5, #-12]
   87096:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   8709a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   8709e:	bf34      	ite	cc
   870a0:	fa20 f00e 	lsrcc.w	r0, r0, lr
   870a4:	2000      	movcs	r0, #0
   870a6:	fa01 f10c 	lsl.w	r1, r1, ip
   870aa:	ea41 0200 	orr.w	r2, r1, r0
   870ae:	4610      	mov	r0, r2
   870b0:	4619      	mov	r1, r3
   870b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   870b6:	f1b0 0c0b 	subs.w	ip, r0, #11
   870ba:	d008      	beq.n	870ce <__b2d+0xba>
   870bc:	fa07 f70c 	lsl.w	r7, r7, ip
   870c0:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   870c4:	2000      	movs	r0, #0
   870c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   870ca:	4601      	mov	r1, r0
   870cc:	e7eb      	b.n	870a6 <__b2d+0x92>
   870ce:	4661      	mov	r1, ip
   870d0:	460a      	mov	r2, r1
   870d2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   870d6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   870da:	4610      	mov	r0, r2
   870dc:	4619      	mov	r1, r3
   870de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   870e2:	bf00      	nop

000870e4 <__d2b>:
   870e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   870e6:	2101      	movs	r1, #1
   870e8:	b083      	sub	sp, #12
   870ea:	461c      	mov	r4, r3
   870ec:	f3c3 550a 	ubfx	r5, r3, #20, #11
   870f0:	4616      	mov	r6, r2
   870f2:	f7ff fc77 	bl	869e4 <_Balloc>
   870f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   870fa:	4607      	mov	r7, r0
   870fc:	b10d      	cbz	r5, 87102 <__d2b+0x1e>
   870fe:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   87102:	9401      	str	r4, [sp, #4]
   87104:	b306      	cbz	r6, 87148 <__d2b+0x64>
   87106:	a802      	add	r0, sp, #8
   87108:	f840 6d08 	str.w	r6, [r0, #-8]!
   8710c:	f7ff fd4a 	bl	86ba4 <__lo0bits>
   87110:	2800      	cmp	r0, #0
   87112:	d130      	bne.n	87176 <__d2b+0x92>
   87114:	e89d 000c 	ldmia.w	sp, {r2, r3}
   87118:	617a      	str	r2, [r7, #20]
   8711a:	2b00      	cmp	r3, #0
   8711c:	bf14      	ite	ne
   8711e:	2402      	movne	r4, #2
   87120:	2401      	moveq	r4, #1
   87122:	61bb      	str	r3, [r7, #24]
   87124:	613c      	str	r4, [r7, #16]
   87126:	b9d5      	cbnz	r5, 8715e <__d2b+0x7a>
   87128:	9a08      	ldr	r2, [sp, #32]
   8712a:	eb07 0384 	add.w	r3, r7, r4, lsl #2
   8712e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   87132:	6010      	str	r0, [r2, #0]
   87134:	6918      	ldr	r0, [r3, #16]
   87136:	f7ff fd15 	bl	86b64 <__hi0bits>
   8713a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8713c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   87140:	6018      	str	r0, [r3, #0]
   87142:	4638      	mov	r0, r7
   87144:	b003      	add	sp, #12
   87146:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87148:	a801      	add	r0, sp, #4
   8714a:	f7ff fd2b 	bl	86ba4 <__lo0bits>
   8714e:	9b01      	ldr	r3, [sp, #4]
   87150:	2201      	movs	r2, #1
   87152:	4614      	mov	r4, r2
   87154:	3020      	adds	r0, #32
   87156:	613a      	str	r2, [r7, #16]
   87158:	617b      	str	r3, [r7, #20]
   8715a:	2d00      	cmp	r5, #0
   8715c:	d0e4      	beq.n	87128 <__d2b+0x44>
   8715e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   87162:	9a08      	ldr	r2, [sp, #32]
   87164:	4403      	add	r3, r0
   87166:	6013      	str	r3, [r2, #0]
   87168:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8716a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8716e:	6018      	str	r0, [r3, #0]
   87170:	4638      	mov	r0, r7
   87172:	b003      	add	sp, #12
   87174:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87176:	9b01      	ldr	r3, [sp, #4]
   87178:	f1c0 0120 	rsb	r1, r0, #32
   8717c:	9a00      	ldr	r2, [sp, #0]
   8717e:	fa03 f101 	lsl.w	r1, r3, r1
   87182:	430a      	orrs	r2, r1
   87184:	40c3      	lsrs	r3, r0
   87186:	9301      	str	r3, [sp, #4]
   87188:	617a      	str	r2, [r7, #20]
   8718a:	e7c6      	b.n	8711a <__d2b+0x36>

0008718c <__ratio>:
   8718c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   87190:	b083      	sub	sp, #12
   87192:	4688      	mov	r8, r1
   87194:	4669      	mov	r1, sp
   87196:	4681      	mov	r9, r0
   87198:	f7ff ff3c 	bl	87014 <__b2d>
   8719c:	4604      	mov	r4, r0
   8719e:	460d      	mov	r5, r1
   871a0:	4640      	mov	r0, r8
   871a2:	a901      	add	r1, sp, #4
   871a4:	f7ff ff36 	bl	87014 <__b2d>
   871a8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   871ac:	4606      	mov	r6, r0
   871ae:	f8d8 0010 	ldr.w	r0, [r8, #16]
   871b2:	460f      	mov	r7, r1
   871b4:	e89d 000a 	ldmia.w	sp, {r1, r3}
   871b8:	1a12      	subs	r2, r2, r0
   871ba:	1ac9      	subs	r1, r1, r3
   871bc:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   871c0:	2b00      	cmp	r3, #0
   871c2:	dd0b      	ble.n	871dc <__ratio+0x50>
   871c4:	eb05 5103 	add.w	r1, r5, r3, lsl #20
   871c8:	460d      	mov	r5, r1
   871ca:	4620      	mov	r0, r4
   871cc:	4629      	mov	r1, r5
   871ce:	4632      	mov	r2, r6
   871d0:	463b      	mov	r3, r7
   871d2:	f000 ffd5 	bl	88180 <__aeabi_ddiv>
   871d6:	b003      	add	sp, #12
   871d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   871dc:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
   871e0:	464f      	mov	r7, r9
   871e2:	e7f2      	b.n	871ca <__ratio+0x3e>

000871e4 <__copybits>:
   871e4:	b470      	push	{r4, r5, r6}
   871e6:	6914      	ldr	r4, [r2, #16]
   871e8:	f102 0314 	add.w	r3, r2, #20
   871ec:	3901      	subs	r1, #1
   871ee:	114e      	asrs	r6, r1, #5
   871f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   871f4:	3601      	adds	r6, #1
   871f6:	42a3      	cmp	r3, r4
   871f8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
   871fc:	d20c      	bcs.n	87218 <__copybits+0x34>
   871fe:	1f01      	subs	r1, r0, #4
   87200:	f853 5b04 	ldr.w	r5, [r3], #4
   87204:	429c      	cmp	r4, r3
   87206:	f841 5f04 	str.w	r5, [r1, #4]!
   8720a:	d8f9      	bhi.n	87200 <__copybits+0x1c>
   8720c:	1aa3      	subs	r3, r4, r2
   8720e:	3b15      	subs	r3, #21
   87210:	f023 0303 	bic.w	r3, r3, #3
   87214:	3304      	adds	r3, #4
   87216:	4418      	add	r0, r3
   87218:	4286      	cmp	r6, r0
   8721a:	d904      	bls.n	87226 <__copybits+0x42>
   8721c:	2300      	movs	r3, #0
   8721e:	f840 3b04 	str.w	r3, [r0], #4
   87222:	4286      	cmp	r6, r0
   87224:	d8fb      	bhi.n	8721e <__copybits+0x3a>
   87226:	bc70      	pop	{r4, r5, r6}
   87228:	4770      	bx	lr
   8722a:	bf00      	nop

0008722c <__any_on>:
   8722c:	6903      	ldr	r3, [r0, #16]
   8722e:	114a      	asrs	r2, r1, #5
   87230:	4293      	cmp	r3, r2
   87232:	b410      	push	{r4}
   87234:	f100 0414 	add.w	r4, r0, #20
   87238:	da10      	bge.n	8725c <__any_on+0x30>
   8723a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   8723e:	429c      	cmp	r4, r3
   87240:	d220      	bcs.n	87284 <__any_on+0x58>
   87242:	f853 0c04 	ldr.w	r0, [r3, #-4]
   87246:	3b04      	subs	r3, #4
   87248:	b118      	cbz	r0, 87252 <__any_on+0x26>
   8724a:	e014      	b.n	87276 <__any_on+0x4a>
   8724c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   87250:	b98a      	cbnz	r2, 87276 <__any_on+0x4a>
   87252:	429c      	cmp	r4, r3
   87254:	d3fa      	bcc.n	8724c <__any_on+0x20>
   87256:	f85d 4b04 	ldr.w	r4, [sp], #4
   8725a:	4770      	bx	lr
   8725c:	dd0f      	ble.n	8727e <__any_on+0x52>
   8725e:	f011 011f 	ands.w	r1, r1, #31
   87262:	d00c      	beq.n	8727e <__any_on+0x52>
   87264:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   87268:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   8726c:	fa20 f201 	lsr.w	r2, r0, r1
   87270:	408a      	lsls	r2, r1
   87272:	4282      	cmp	r2, r0
   87274:	d0e3      	beq.n	8723e <__any_on+0x12>
   87276:	2001      	movs	r0, #1
   87278:	f85d 4b04 	ldr.w	r4, [sp], #4
   8727c:	4770      	bx	lr
   8727e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   87282:	e7dc      	b.n	8723e <__any_on+0x12>
   87284:	2000      	movs	r0, #0
   87286:	e7e6      	b.n	87256 <__any_on+0x2a>

00087288 <_realloc_r>:
   87288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8728c:	4617      	mov	r7, r2
   8728e:	b083      	sub	sp, #12
   87290:	460d      	mov	r5, r1
   87292:	2900      	cmp	r1, #0
   87294:	f000 80e2 	beq.w	8745c <_realloc_r+0x1d4>
   87298:	4681      	mov	r9, r0
   8729a:	f107 040b 	add.w	r4, r7, #11
   8729e:	f7ff fb9d 	bl	869dc <__malloc_lock>
   872a2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   872a6:	2c16      	cmp	r4, #22
   872a8:	f023 0603 	bic.w	r6, r3, #3
   872ac:	f1a5 0808 	sub.w	r8, r5, #8
   872b0:	d84b      	bhi.n	8734a <_realloc_r+0xc2>
   872b2:	2210      	movs	r2, #16
   872b4:	4614      	mov	r4, r2
   872b6:	42a7      	cmp	r7, r4
   872b8:	d84c      	bhi.n	87354 <_realloc_r+0xcc>
   872ba:	4296      	cmp	r6, r2
   872bc:	da51      	bge.n	87362 <_realloc_r+0xda>
   872be:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 87664 <_realloc_r+0x3dc>
   872c2:	eb08 0106 	add.w	r1, r8, r6
   872c6:	f8db 0008 	ldr.w	r0, [fp, #8]
   872ca:	4288      	cmp	r0, r1
   872cc:	f000 80d3 	beq.w	87476 <_realloc_r+0x1ee>
   872d0:	6848      	ldr	r0, [r1, #4]
   872d2:	f020 0e01 	bic.w	lr, r0, #1
   872d6:	448e      	add	lr, r1
   872d8:	f8de e004 	ldr.w	lr, [lr, #4]
   872dc:	f01e 0f01 	tst.w	lr, #1
   872e0:	d154      	bne.n	8738c <_realloc_r+0x104>
   872e2:	f020 0003 	bic.w	r0, r0, #3
   872e6:	4430      	add	r0, r6
   872e8:	4290      	cmp	r0, r2
   872ea:	f280 80bd 	bge.w	87468 <_realloc_r+0x1e0>
   872ee:	07db      	lsls	r3, r3, #31
   872f0:	f100 8090 	bmi.w	87414 <_realloc_r+0x18c>
   872f4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   872f8:	ebc3 0a08 	rsb	sl, r3, r8
   872fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   87300:	f023 0303 	bic.w	r3, r3, #3
   87304:	eb00 0e03 	add.w	lr, r0, r3
   87308:	4596      	cmp	lr, r2
   8730a:	db49      	blt.n	873a0 <_realloc_r+0x118>
   8730c:	4657      	mov	r7, sl
   8730e:	68cb      	ldr	r3, [r1, #12]
   87310:	6889      	ldr	r1, [r1, #8]
   87312:	1f32      	subs	r2, r6, #4
   87314:	60cb      	str	r3, [r1, #12]
   87316:	6099      	str	r1, [r3, #8]
   87318:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8731c:	f8da 300c 	ldr.w	r3, [sl, #12]
   87320:	2a24      	cmp	r2, #36	; 0x24
   87322:	60cb      	str	r3, [r1, #12]
   87324:	6099      	str	r1, [r3, #8]
   87326:	f200 8133 	bhi.w	87590 <_realloc_r+0x308>
   8732a:	2a13      	cmp	r2, #19
   8732c:	f240 80fa 	bls.w	87524 <_realloc_r+0x29c>
   87330:	682b      	ldr	r3, [r5, #0]
   87332:	2a1b      	cmp	r2, #27
   87334:	f8ca 3008 	str.w	r3, [sl, #8]
   87338:	686b      	ldr	r3, [r5, #4]
   8733a:	f8ca 300c 	str.w	r3, [sl, #12]
   8733e:	f200 813b 	bhi.w	875b8 <_realloc_r+0x330>
   87342:	3508      	adds	r5, #8
   87344:	f10a 0310 	add.w	r3, sl, #16
   87348:	e0ed      	b.n	87526 <_realloc_r+0x29e>
   8734a:	f024 0407 	bic.w	r4, r4, #7
   8734e:	2c00      	cmp	r4, #0
   87350:	4622      	mov	r2, r4
   87352:	dab0      	bge.n	872b6 <_realloc_r+0x2e>
   87354:	230c      	movs	r3, #12
   87356:	2000      	movs	r0, #0
   87358:	f8c9 3000 	str.w	r3, [r9]
   8735c:	b003      	add	sp, #12
   8735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87362:	462f      	mov	r7, r5
   87364:	1b32      	subs	r2, r6, r4
   87366:	2a0f      	cmp	r2, #15
   87368:	f003 0301 	and.w	r3, r3, #1
   8736c:	d840      	bhi.n	873f0 <_realloc_r+0x168>
   8736e:	4333      	orrs	r3, r6
   87370:	f8c8 3004 	str.w	r3, [r8, #4]
   87374:	4446      	add	r6, r8
   87376:	6873      	ldr	r3, [r6, #4]
   87378:	f043 0301 	orr.w	r3, r3, #1
   8737c:	6073      	str	r3, [r6, #4]
   8737e:	4648      	mov	r0, r9
   87380:	f7ff fb2e 	bl	869e0 <__malloc_unlock>
   87384:	4638      	mov	r0, r7
   87386:	b003      	add	sp, #12
   87388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8738c:	07d9      	lsls	r1, r3, #31
   8738e:	d441      	bmi.n	87414 <_realloc_r+0x18c>
   87390:	f855 3c08 	ldr.w	r3, [r5, #-8]
   87394:	ebc3 0a08 	rsb	sl, r3, r8
   87398:	f8da 3004 	ldr.w	r3, [sl, #4]
   8739c:	f023 0303 	bic.w	r3, r3, #3
   873a0:	4433      	add	r3, r6
   873a2:	4293      	cmp	r3, r2
   873a4:	db36      	blt.n	87414 <_realloc_r+0x18c>
   873a6:	4657      	mov	r7, sl
   873a8:	f8da 100c 	ldr.w	r1, [sl, #12]
   873ac:	f857 0f08 	ldr.w	r0, [r7, #8]!
   873b0:	1f32      	subs	r2, r6, #4
   873b2:	2a24      	cmp	r2, #36	; 0x24
   873b4:	60c1      	str	r1, [r0, #12]
   873b6:	6088      	str	r0, [r1, #8]
   873b8:	f200 80f5 	bhi.w	875a6 <_realloc_r+0x31e>
   873bc:	2a13      	cmp	r2, #19
   873be:	f240 80f0 	bls.w	875a2 <_realloc_r+0x31a>
   873c2:	6829      	ldr	r1, [r5, #0]
   873c4:	2a1b      	cmp	r2, #27
   873c6:	f8ca 1008 	str.w	r1, [sl, #8]
   873ca:	6869      	ldr	r1, [r5, #4]
   873cc:	f8ca 100c 	str.w	r1, [sl, #12]
   873d0:	f200 8107 	bhi.w	875e2 <_realloc_r+0x35a>
   873d4:	3508      	adds	r5, #8
   873d6:	f10a 0210 	add.w	r2, sl, #16
   873da:	6829      	ldr	r1, [r5, #0]
   873dc:	461e      	mov	r6, r3
   873de:	6011      	str	r1, [r2, #0]
   873e0:	6869      	ldr	r1, [r5, #4]
   873e2:	46d0      	mov	r8, sl
   873e4:	6051      	str	r1, [r2, #4]
   873e6:	68ab      	ldr	r3, [r5, #8]
   873e8:	6093      	str	r3, [r2, #8]
   873ea:	f8da 3004 	ldr.w	r3, [sl, #4]
   873ee:	e7b9      	b.n	87364 <_realloc_r+0xdc>
   873f0:	eb08 0104 	add.w	r1, r8, r4
   873f4:	4323      	orrs	r3, r4
   873f6:	f042 0001 	orr.w	r0, r2, #1
   873fa:	f8c8 3004 	str.w	r3, [r8, #4]
   873fe:	440a      	add	r2, r1
   87400:	6048      	str	r0, [r1, #4]
   87402:	6853      	ldr	r3, [r2, #4]
   87404:	3108      	adds	r1, #8
   87406:	f043 0301 	orr.w	r3, r3, #1
   8740a:	6053      	str	r3, [r2, #4]
   8740c:	4648      	mov	r0, r9
   8740e:	f7fe f8db 	bl	855c8 <_free_r>
   87412:	e7b4      	b.n	8737e <_realloc_r+0xf6>
   87414:	4639      	mov	r1, r7
   87416:	4648      	mov	r0, r9
   87418:	f7fe ffac 	bl	86374 <_malloc_r>
   8741c:	4607      	mov	r7, r0
   8741e:	2800      	cmp	r0, #0
   87420:	d0ad      	beq.n	8737e <_realloc_r+0xf6>
   87422:	f855 3c04 	ldr.w	r3, [r5, #-4]
   87426:	f1a0 0108 	sub.w	r1, r0, #8
   8742a:	f023 0201 	bic.w	r2, r3, #1
   8742e:	4442      	add	r2, r8
   87430:	4291      	cmp	r1, r2
   87432:	f000 80a6 	beq.w	87582 <_realloc_r+0x2fa>
   87436:	1f32      	subs	r2, r6, #4
   87438:	2a24      	cmp	r2, #36	; 0x24
   8743a:	f200 8093 	bhi.w	87564 <_realloc_r+0x2dc>
   8743e:	2a13      	cmp	r2, #19
   87440:	d865      	bhi.n	8750e <_realloc_r+0x286>
   87442:	4603      	mov	r3, r0
   87444:	462a      	mov	r2, r5
   87446:	6811      	ldr	r1, [r2, #0]
   87448:	6019      	str	r1, [r3, #0]
   8744a:	6851      	ldr	r1, [r2, #4]
   8744c:	6059      	str	r1, [r3, #4]
   8744e:	6892      	ldr	r2, [r2, #8]
   87450:	609a      	str	r2, [r3, #8]
   87452:	4629      	mov	r1, r5
   87454:	4648      	mov	r0, r9
   87456:	f7fe f8b7 	bl	855c8 <_free_r>
   8745a:	e790      	b.n	8737e <_realloc_r+0xf6>
   8745c:	4611      	mov	r1, r2
   8745e:	b003      	add	sp, #12
   87460:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87464:	f7fe bf86 	b.w	86374 <_malloc_r>
   87468:	68ca      	ldr	r2, [r1, #12]
   8746a:	6889      	ldr	r1, [r1, #8]
   8746c:	462f      	mov	r7, r5
   8746e:	60ca      	str	r2, [r1, #12]
   87470:	4606      	mov	r6, r0
   87472:	6091      	str	r1, [r2, #8]
   87474:	e776      	b.n	87364 <_realloc_r+0xdc>
   87476:	6841      	ldr	r1, [r0, #4]
   87478:	f104 0010 	add.w	r0, r4, #16
   8747c:	f021 0103 	bic.w	r1, r1, #3
   87480:	4431      	add	r1, r6
   87482:	4281      	cmp	r1, r0
   87484:	da5a      	bge.n	8753c <_realloc_r+0x2b4>
   87486:	07db      	lsls	r3, r3, #31
   87488:	d4c4      	bmi.n	87414 <_realloc_r+0x18c>
   8748a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8748e:	ebc3 0a08 	rsb	sl, r3, r8
   87492:	f8da 3004 	ldr.w	r3, [sl, #4]
   87496:	f023 0303 	bic.w	r3, r3, #3
   8749a:	eb01 0c03 	add.w	ip, r1, r3
   8749e:	4560      	cmp	r0, ip
   874a0:	f73f af7e 	bgt.w	873a0 <_realloc_r+0x118>
   874a4:	4657      	mov	r7, sl
   874a6:	f8da 300c 	ldr.w	r3, [sl, #12]
   874aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
   874ae:	1f32      	subs	r2, r6, #4
   874b0:	2a24      	cmp	r2, #36	; 0x24
   874b2:	60cb      	str	r3, [r1, #12]
   874b4:	6099      	str	r1, [r3, #8]
   874b6:	f200 80b6 	bhi.w	87626 <_realloc_r+0x39e>
   874ba:	2a13      	cmp	r2, #19
   874bc:	f240 80a7 	bls.w	8760e <_realloc_r+0x386>
   874c0:	682b      	ldr	r3, [r5, #0]
   874c2:	2a1b      	cmp	r2, #27
   874c4:	f8ca 3008 	str.w	r3, [sl, #8]
   874c8:	686b      	ldr	r3, [r5, #4]
   874ca:	f8ca 300c 	str.w	r3, [sl, #12]
   874ce:	f200 80b3 	bhi.w	87638 <_realloc_r+0x3b0>
   874d2:	3508      	adds	r5, #8
   874d4:	f10a 0310 	add.w	r3, sl, #16
   874d8:	682a      	ldr	r2, [r5, #0]
   874da:	601a      	str	r2, [r3, #0]
   874dc:	686a      	ldr	r2, [r5, #4]
   874de:	605a      	str	r2, [r3, #4]
   874e0:	68aa      	ldr	r2, [r5, #8]
   874e2:	609a      	str	r2, [r3, #8]
   874e4:	ebc4 030c 	rsb	r3, r4, ip
   874e8:	eb0a 0204 	add.w	r2, sl, r4
   874ec:	f043 0301 	orr.w	r3, r3, #1
   874f0:	f8cb 2008 	str.w	r2, [fp, #8]
   874f4:	6053      	str	r3, [r2, #4]
   874f6:	f8da 3004 	ldr.w	r3, [sl, #4]
   874fa:	4648      	mov	r0, r9
   874fc:	f003 0301 	and.w	r3, r3, #1
   87500:	431c      	orrs	r4, r3
   87502:	f8ca 4004 	str.w	r4, [sl, #4]
   87506:	f7ff fa6b 	bl	869e0 <__malloc_unlock>
   8750a:	4638      	mov	r0, r7
   8750c:	e73b      	b.n	87386 <_realloc_r+0xfe>
   8750e:	682b      	ldr	r3, [r5, #0]
   87510:	2a1b      	cmp	r2, #27
   87512:	6003      	str	r3, [r0, #0]
   87514:	686b      	ldr	r3, [r5, #4]
   87516:	6043      	str	r3, [r0, #4]
   87518:	d828      	bhi.n	8756c <_realloc_r+0x2e4>
   8751a:	f100 0308 	add.w	r3, r0, #8
   8751e:	f105 0208 	add.w	r2, r5, #8
   87522:	e790      	b.n	87446 <_realloc_r+0x1be>
   87524:	463b      	mov	r3, r7
   87526:	682a      	ldr	r2, [r5, #0]
   87528:	4676      	mov	r6, lr
   8752a:	601a      	str	r2, [r3, #0]
   8752c:	686a      	ldr	r2, [r5, #4]
   8752e:	46d0      	mov	r8, sl
   87530:	605a      	str	r2, [r3, #4]
   87532:	68aa      	ldr	r2, [r5, #8]
   87534:	609a      	str	r2, [r3, #8]
   87536:	f8da 3004 	ldr.w	r3, [sl, #4]
   8753a:	e713      	b.n	87364 <_realloc_r+0xdc>
   8753c:	1b0b      	subs	r3, r1, r4
   8753e:	eb08 0204 	add.w	r2, r8, r4
   87542:	f043 0301 	orr.w	r3, r3, #1
   87546:	f8cb 2008 	str.w	r2, [fp, #8]
   8754a:	6053      	str	r3, [r2, #4]
   8754c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   87550:	4648      	mov	r0, r9
   87552:	f003 0301 	and.w	r3, r3, #1
   87556:	431c      	orrs	r4, r3
   87558:	f845 4c04 	str.w	r4, [r5, #-4]
   8755c:	f7ff fa40 	bl	869e0 <__malloc_unlock>
   87560:	4628      	mov	r0, r5
   87562:	e710      	b.n	87386 <_realloc_r+0xfe>
   87564:	4629      	mov	r1, r5
   87566:	f7ff f9d5 	bl	86914 <memmove>
   8756a:	e772      	b.n	87452 <_realloc_r+0x1ca>
   8756c:	68ab      	ldr	r3, [r5, #8]
   8756e:	2a24      	cmp	r2, #36	; 0x24
   87570:	6083      	str	r3, [r0, #8]
   87572:	68eb      	ldr	r3, [r5, #12]
   87574:	60c3      	str	r3, [r0, #12]
   87576:	d02b      	beq.n	875d0 <_realloc_r+0x348>
   87578:	f100 0310 	add.w	r3, r0, #16
   8757c:	f105 0210 	add.w	r2, r5, #16
   87580:	e761      	b.n	87446 <_realloc_r+0x1be>
   87582:	f850 2c04 	ldr.w	r2, [r0, #-4]
   87586:	462f      	mov	r7, r5
   87588:	f022 0203 	bic.w	r2, r2, #3
   8758c:	4416      	add	r6, r2
   8758e:	e6e9      	b.n	87364 <_realloc_r+0xdc>
   87590:	4629      	mov	r1, r5
   87592:	4638      	mov	r0, r7
   87594:	4676      	mov	r6, lr
   87596:	46d0      	mov	r8, sl
   87598:	f7ff f9bc 	bl	86914 <memmove>
   8759c:	f8da 3004 	ldr.w	r3, [sl, #4]
   875a0:	e6e0      	b.n	87364 <_realloc_r+0xdc>
   875a2:	463a      	mov	r2, r7
   875a4:	e719      	b.n	873da <_realloc_r+0x152>
   875a6:	4629      	mov	r1, r5
   875a8:	4638      	mov	r0, r7
   875aa:	461e      	mov	r6, r3
   875ac:	46d0      	mov	r8, sl
   875ae:	f7ff f9b1 	bl	86914 <memmove>
   875b2:	f8da 3004 	ldr.w	r3, [sl, #4]
   875b6:	e6d5      	b.n	87364 <_realloc_r+0xdc>
   875b8:	68ab      	ldr	r3, [r5, #8]
   875ba:	2a24      	cmp	r2, #36	; 0x24
   875bc:	f8ca 3010 	str.w	r3, [sl, #16]
   875c0:	68eb      	ldr	r3, [r5, #12]
   875c2:	f8ca 3014 	str.w	r3, [sl, #20]
   875c6:	d018      	beq.n	875fa <_realloc_r+0x372>
   875c8:	3510      	adds	r5, #16
   875ca:	f10a 0318 	add.w	r3, sl, #24
   875ce:	e7aa      	b.n	87526 <_realloc_r+0x29e>
   875d0:	692a      	ldr	r2, [r5, #16]
   875d2:	f100 0318 	add.w	r3, r0, #24
   875d6:	6102      	str	r2, [r0, #16]
   875d8:	6969      	ldr	r1, [r5, #20]
   875da:	f105 0218 	add.w	r2, r5, #24
   875de:	6141      	str	r1, [r0, #20]
   875e0:	e731      	b.n	87446 <_realloc_r+0x1be>
   875e2:	68a9      	ldr	r1, [r5, #8]
   875e4:	2a24      	cmp	r2, #36	; 0x24
   875e6:	f8ca 1010 	str.w	r1, [sl, #16]
   875ea:	68e9      	ldr	r1, [r5, #12]
   875ec:	f8ca 1014 	str.w	r1, [sl, #20]
   875f0:	d00f      	beq.n	87612 <_realloc_r+0x38a>
   875f2:	3510      	adds	r5, #16
   875f4:	f10a 0218 	add.w	r2, sl, #24
   875f8:	e6ef      	b.n	873da <_realloc_r+0x152>
   875fa:	692a      	ldr	r2, [r5, #16]
   875fc:	f10a 0320 	add.w	r3, sl, #32
   87600:	f8ca 2018 	str.w	r2, [sl, #24]
   87604:	696a      	ldr	r2, [r5, #20]
   87606:	3518      	adds	r5, #24
   87608:	f8ca 201c 	str.w	r2, [sl, #28]
   8760c:	e78b      	b.n	87526 <_realloc_r+0x29e>
   8760e:	463b      	mov	r3, r7
   87610:	e762      	b.n	874d8 <_realloc_r+0x250>
   87612:	6929      	ldr	r1, [r5, #16]
   87614:	f10a 0220 	add.w	r2, sl, #32
   87618:	f8ca 1018 	str.w	r1, [sl, #24]
   8761c:	6969      	ldr	r1, [r5, #20]
   8761e:	3518      	adds	r5, #24
   87620:	f8ca 101c 	str.w	r1, [sl, #28]
   87624:	e6d9      	b.n	873da <_realloc_r+0x152>
   87626:	4629      	mov	r1, r5
   87628:	4638      	mov	r0, r7
   8762a:	f8cd c004 	str.w	ip, [sp, #4]
   8762e:	f7ff f971 	bl	86914 <memmove>
   87632:	f8dd c004 	ldr.w	ip, [sp, #4]
   87636:	e755      	b.n	874e4 <_realloc_r+0x25c>
   87638:	68ab      	ldr	r3, [r5, #8]
   8763a:	2a24      	cmp	r2, #36	; 0x24
   8763c:	f8ca 3010 	str.w	r3, [sl, #16]
   87640:	68eb      	ldr	r3, [r5, #12]
   87642:	f8ca 3014 	str.w	r3, [sl, #20]
   87646:	d003      	beq.n	87650 <_realloc_r+0x3c8>
   87648:	3510      	adds	r5, #16
   8764a:	f10a 0318 	add.w	r3, sl, #24
   8764e:	e743      	b.n	874d8 <_realloc_r+0x250>
   87650:	692a      	ldr	r2, [r5, #16]
   87652:	f10a 0320 	add.w	r3, sl, #32
   87656:	f8ca 2018 	str.w	r2, [sl, #24]
   8765a:	696a      	ldr	r2, [r5, #20]
   8765c:	3518      	adds	r5, #24
   8765e:	f8ca 201c 	str.w	r2, [sl, #28]
   87662:	e739      	b.n	874d8 <_realloc_r+0x250>
   87664:	200705cc 	.word	0x200705cc

00087668 <lflush>:
   87668:	8983      	ldrh	r3, [r0, #12]
   8766a:	f003 0309 	and.w	r3, r3, #9
   8766e:	2b09      	cmp	r3, #9
   87670:	d001      	beq.n	87676 <lflush+0xe>
   87672:	2000      	movs	r0, #0
   87674:	4770      	bx	lr
   87676:	f7fd be3f 	b.w	852f8 <fflush>
   8767a:	bf00      	nop

0008767c <__srefill_r>:
   8767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8767e:	460c      	mov	r4, r1
   87680:	4605      	mov	r5, r0
   87682:	b110      	cbz	r0, 8768a <__srefill_r+0xe>
   87684:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87686:	2b00      	cmp	r3, #0
   87688:	d045      	beq.n	87716 <__srefill_r+0x9a>
   8768a:	89a3      	ldrh	r3, [r4, #12]
   8768c:	b29a      	uxth	r2, r3
   8768e:	0497      	lsls	r7, r2, #18
   87690:	d407      	bmi.n	876a2 <__srefill_r+0x26>
   87692:	6e62      	ldr	r2, [r4, #100]	; 0x64
   87694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   87698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8769c:	6662      	str	r2, [r4, #100]	; 0x64
   8769e:	81a3      	strh	r3, [r4, #12]
   876a0:	b29a      	uxth	r2, r3
   876a2:	2100      	movs	r1, #0
   876a4:	0696      	lsls	r6, r2, #26
   876a6:	6061      	str	r1, [r4, #4]
   876a8:	d432      	bmi.n	87710 <__srefill_r+0x94>
   876aa:	0750      	lsls	r0, r2, #29
   876ac:	d521      	bpl.n	876f2 <__srefill_r+0x76>
   876ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
   876b0:	b161      	cbz	r1, 876cc <__srefill_r+0x50>
   876b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   876b6:	4299      	cmp	r1, r3
   876b8:	d002      	beq.n	876c0 <__srefill_r+0x44>
   876ba:	4628      	mov	r0, r5
   876bc:	f7fd ff84 	bl	855c8 <_free_r>
   876c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   876c2:	2000      	movs	r0, #0
   876c4:	6063      	str	r3, [r4, #4]
   876c6:	6320      	str	r0, [r4, #48]	; 0x30
   876c8:	2b00      	cmp	r3, #0
   876ca:	d13e      	bne.n	8774a <__srefill_r+0xce>
   876cc:	6923      	ldr	r3, [r4, #16]
   876ce:	2b00      	cmp	r3, #0
   876d0:	d04b      	beq.n	8776a <__srefill_r+0xee>
   876d2:	89a7      	ldrh	r7, [r4, #12]
   876d4:	b2be      	uxth	r6, r7
   876d6:	07b3      	lsls	r3, r6, #30
   876d8:	d120      	bne.n	8771c <__srefill_r+0xa0>
   876da:	6922      	ldr	r2, [r4, #16]
   876dc:	4628      	mov	r0, r5
   876de:	6022      	str	r2, [r4, #0]
   876e0:	6a25      	ldr	r5, [r4, #32]
   876e2:	69e1      	ldr	r1, [r4, #28]
   876e4:	6963      	ldr	r3, [r4, #20]
   876e6:	47a8      	blx	r5
   876e8:	2800      	cmp	r0, #0
   876ea:	6060      	str	r0, [r4, #4]
   876ec:	dd09      	ble.n	87702 <__srefill_r+0x86>
   876ee:	2000      	movs	r0, #0
   876f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   876f2:	06d1      	lsls	r1, r2, #27
   876f4:	d53e      	bpl.n	87774 <__srefill_r+0xf8>
   876f6:	0712      	lsls	r2, r2, #28
   876f8:	d42a      	bmi.n	87750 <__srefill_r+0xd4>
   876fa:	f043 0304 	orr.w	r3, r3, #4
   876fe:	81a3      	strh	r3, [r4, #12]
   87700:	e7e4      	b.n	876cc <__srefill_r+0x50>
   87702:	89a3      	ldrh	r3, [r4, #12]
   87704:	d01b      	beq.n	8773e <__srefill_r+0xc2>
   87706:	2200      	movs	r2, #0
   87708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8770c:	81a3      	strh	r3, [r4, #12]
   8770e:	6062      	str	r2, [r4, #4]
   87710:	f04f 30ff 	mov.w	r0, #4294967295
   87714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87716:	f7fd fe7f 	bl	85418 <__sinit>
   8771a:	e7b6      	b.n	8768a <__srefill_r+0xe>
   8771c:	4a19      	ldr	r2, [pc, #100]	; (87784 <__srefill_r+0x108>)
   8771e:	2301      	movs	r3, #1
   87720:	6810      	ldr	r0, [r2, #0]
   87722:	81a3      	strh	r3, [r4, #12]
   87724:	4918      	ldr	r1, [pc, #96]	; (87788 <__srefill_r+0x10c>)
   87726:	f006 0609 	and.w	r6, r6, #9
   8772a:	f7fe f9b5 	bl	85a98 <_fwalk>
   8772e:	2e09      	cmp	r6, #9
   87730:	81a7      	strh	r7, [r4, #12]
   87732:	d1d2      	bne.n	876da <__srefill_r+0x5e>
   87734:	4628      	mov	r0, r5
   87736:	4621      	mov	r1, r4
   87738:	f7fd fd24 	bl	85184 <__sflush_r>
   8773c:	e7cd      	b.n	876da <__srefill_r+0x5e>
   8773e:	f043 0320 	orr.w	r3, r3, #32
   87742:	f04f 30ff 	mov.w	r0, #4294967295
   87746:	81a3      	strh	r3, [r4, #12]
   87748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8774a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8774c:	6023      	str	r3, [r4, #0]
   8774e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87750:	4628      	mov	r0, r5
   87752:	4621      	mov	r1, r4
   87754:	f7fd fdba 	bl	852cc <_fflush_r>
   87758:	2800      	cmp	r0, #0
   8775a:	d1d9      	bne.n	87710 <__srefill_r+0x94>
   8775c:	89a3      	ldrh	r3, [r4, #12]
   8775e:	60a0      	str	r0, [r4, #8]
   87760:	f023 0308 	bic.w	r3, r3, #8
   87764:	61a0      	str	r0, [r4, #24]
   87766:	b29b      	uxth	r3, r3
   87768:	e7c7      	b.n	876fa <__srefill_r+0x7e>
   8776a:	4628      	mov	r0, r5
   8776c:	4621      	mov	r1, r4
   8776e:	f7fe fd89 	bl	86284 <__smakebuf_r>
   87772:	e7ae      	b.n	876d2 <__srefill_r+0x56>
   87774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87778:	2209      	movs	r2, #9
   8777a:	602a      	str	r2, [r5, #0]
   8777c:	f04f 30ff 	mov.w	r0, #4294967295
   87780:	81a3      	strh	r3, [r4, #12]
   87782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87784:	00088b00 	.word	0x00088b00
   87788:	00087669 	.word	0x00087669

0008778c <_sbrk_r>:
   8778c:	b538      	push	{r3, r4, r5, lr}
   8778e:	4c07      	ldr	r4, [pc, #28]	; (877ac <_sbrk_r+0x20>)
   87790:	2300      	movs	r3, #0
   87792:	4605      	mov	r5, r0
   87794:	4608      	mov	r0, r1
   87796:	6023      	str	r3, [r4, #0]
   87798:	f7fa ff04 	bl	825a4 <_sbrk>
   8779c:	1c43      	adds	r3, r0, #1
   8779e:	d000      	beq.n	877a2 <_sbrk_r+0x16>
   877a0:	bd38      	pop	{r3, r4, r5, pc}
   877a2:	6823      	ldr	r3, [r4, #0]
   877a4:	2b00      	cmp	r3, #0
   877a6:	d0fb      	beq.n	877a0 <_sbrk_r+0x14>
   877a8:	602b      	str	r3, [r5, #0]
   877aa:	bd38      	pop	{r3, r4, r5, pc}
   877ac:	2007afc0 	.word	0x2007afc0

000877b0 <__sread>:
   877b0:	b510      	push	{r4, lr}
   877b2:	460c      	mov	r4, r1
   877b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   877b8:	f000 f9ec 	bl	87b94 <_read_r>
   877bc:	2800      	cmp	r0, #0
   877be:	db03      	blt.n	877c8 <__sread+0x18>
   877c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   877c2:	4403      	add	r3, r0
   877c4:	6523      	str	r3, [r4, #80]	; 0x50
   877c6:	bd10      	pop	{r4, pc}
   877c8:	89a3      	ldrh	r3, [r4, #12]
   877ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   877ce:	81a3      	strh	r3, [r4, #12]
   877d0:	bd10      	pop	{r4, pc}
   877d2:	bf00      	nop

000877d4 <__swrite>:
   877d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   877d8:	460c      	mov	r4, r1
   877da:	8989      	ldrh	r1, [r1, #12]
   877dc:	461d      	mov	r5, r3
   877de:	05cb      	lsls	r3, r1, #23
   877e0:	4616      	mov	r6, r2
   877e2:	4607      	mov	r7, r0
   877e4:	d506      	bpl.n	877f4 <__swrite+0x20>
   877e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   877ea:	2200      	movs	r2, #0
   877ec:	2302      	movs	r3, #2
   877ee:	f000 f9bd 	bl	87b6c <_lseek_r>
   877f2:	89a1      	ldrh	r1, [r4, #12]
   877f4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   877f8:	81a1      	strh	r1, [r4, #12]
   877fa:	4638      	mov	r0, r7
   877fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   87800:	4632      	mov	r2, r6
   87802:	462b      	mov	r3, r5
   87804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   87808:	f000 b8a0 	b.w	8794c <_write_r>

0008780c <__sseek>:
   8780c:	b510      	push	{r4, lr}
   8780e:	460c      	mov	r4, r1
   87810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87814:	f000 f9aa 	bl	87b6c <_lseek_r>
   87818:	89a3      	ldrh	r3, [r4, #12]
   8781a:	1c42      	adds	r2, r0, #1
   8781c:	bf0e      	itee	eq
   8781e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   87822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   87826:	6520      	strne	r0, [r4, #80]	; 0x50
   87828:	81a3      	strh	r3, [r4, #12]
   8782a:	bd10      	pop	{r4, pc}

0008782c <__sclose>:
   8782c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87830:	f000 b922 	b.w	87a78 <_close_r>

00087834 <__swbuf_r>:
   87834:	b570      	push	{r4, r5, r6, lr}
   87836:	460d      	mov	r5, r1
   87838:	4614      	mov	r4, r2
   8783a:	4606      	mov	r6, r0
   8783c:	b110      	cbz	r0, 87844 <__swbuf_r+0x10>
   8783e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87840:	2b00      	cmp	r3, #0
   87842:	d048      	beq.n	878d6 <__swbuf_r+0xa2>
   87844:	89a2      	ldrh	r2, [r4, #12]
   87846:	69a3      	ldr	r3, [r4, #24]
   87848:	b291      	uxth	r1, r2
   8784a:	0708      	lsls	r0, r1, #28
   8784c:	60a3      	str	r3, [r4, #8]
   8784e:	d538      	bpl.n	878c2 <__swbuf_r+0x8e>
   87850:	6923      	ldr	r3, [r4, #16]
   87852:	2b00      	cmp	r3, #0
   87854:	d035      	beq.n	878c2 <__swbuf_r+0x8e>
   87856:	0489      	lsls	r1, r1, #18
   87858:	b2ed      	uxtb	r5, r5
   8785a:	d515      	bpl.n	87888 <__swbuf_r+0x54>
   8785c:	6822      	ldr	r2, [r4, #0]
   8785e:	6961      	ldr	r1, [r4, #20]
   87860:	1ad3      	subs	r3, r2, r3
   87862:	428b      	cmp	r3, r1
   87864:	da1c      	bge.n	878a0 <__swbuf_r+0x6c>
   87866:	3301      	adds	r3, #1
   87868:	68a1      	ldr	r1, [r4, #8]
   8786a:	1c50      	adds	r0, r2, #1
   8786c:	3901      	subs	r1, #1
   8786e:	60a1      	str	r1, [r4, #8]
   87870:	6020      	str	r0, [r4, #0]
   87872:	7015      	strb	r5, [r2, #0]
   87874:	6962      	ldr	r2, [r4, #20]
   87876:	429a      	cmp	r2, r3
   87878:	d01a      	beq.n	878b0 <__swbuf_r+0x7c>
   8787a:	89a3      	ldrh	r3, [r4, #12]
   8787c:	07db      	lsls	r3, r3, #31
   8787e:	d501      	bpl.n	87884 <__swbuf_r+0x50>
   87880:	2d0a      	cmp	r5, #10
   87882:	d015      	beq.n	878b0 <__swbuf_r+0x7c>
   87884:	4628      	mov	r0, r5
   87886:	bd70      	pop	{r4, r5, r6, pc}
   87888:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8788a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8788e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   87892:	81a2      	strh	r2, [r4, #12]
   87894:	6822      	ldr	r2, [r4, #0]
   87896:	6661      	str	r1, [r4, #100]	; 0x64
   87898:	6961      	ldr	r1, [r4, #20]
   8789a:	1ad3      	subs	r3, r2, r3
   8789c:	428b      	cmp	r3, r1
   8789e:	dbe2      	blt.n	87866 <__swbuf_r+0x32>
   878a0:	4630      	mov	r0, r6
   878a2:	4621      	mov	r1, r4
   878a4:	f7fd fd12 	bl	852cc <_fflush_r>
   878a8:	b940      	cbnz	r0, 878bc <__swbuf_r+0x88>
   878aa:	6822      	ldr	r2, [r4, #0]
   878ac:	2301      	movs	r3, #1
   878ae:	e7db      	b.n	87868 <__swbuf_r+0x34>
   878b0:	4630      	mov	r0, r6
   878b2:	4621      	mov	r1, r4
   878b4:	f7fd fd0a 	bl	852cc <_fflush_r>
   878b8:	2800      	cmp	r0, #0
   878ba:	d0e3      	beq.n	87884 <__swbuf_r+0x50>
   878bc:	f04f 30ff 	mov.w	r0, #4294967295
   878c0:	bd70      	pop	{r4, r5, r6, pc}
   878c2:	4630      	mov	r0, r6
   878c4:	4621      	mov	r1, r4
   878c6:	f7fd fbeb 	bl	850a0 <__swsetup_r>
   878ca:	2800      	cmp	r0, #0
   878cc:	d1f6      	bne.n	878bc <__swbuf_r+0x88>
   878ce:	89a2      	ldrh	r2, [r4, #12]
   878d0:	6923      	ldr	r3, [r4, #16]
   878d2:	b291      	uxth	r1, r2
   878d4:	e7bf      	b.n	87856 <__swbuf_r+0x22>
   878d6:	f7fd fd9f 	bl	85418 <__sinit>
   878da:	e7b3      	b.n	87844 <__swbuf_r+0x10>

000878dc <_wcrtomb_r>:
   878dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   878e0:	4605      	mov	r5, r0
   878e2:	b086      	sub	sp, #24
   878e4:	461e      	mov	r6, r3
   878e6:	460c      	mov	r4, r1
   878e8:	b1a1      	cbz	r1, 87914 <_wcrtomb_r+0x38>
   878ea:	4b10      	ldr	r3, [pc, #64]	; (8792c <_wcrtomb_r+0x50>)
   878ec:	4617      	mov	r7, r2
   878ee:	f8d3 8000 	ldr.w	r8, [r3]
   878f2:	f7fe fcb9 	bl	86268 <__locale_charset>
   878f6:	9600      	str	r6, [sp, #0]
   878f8:	4603      	mov	r3, r0
   878fa:	4621      	mov	r1, r4
   878fc:	463a      	mov	r2, r7
   878fe:	4628      	mov	r0, r5
   87900:	47c0      	blx	r8
   87902:	1c43      	adds	r3, r0, #1
   87904:	d103      	bne.n	8790e <_wcrtomb_r+0x32>
   87906:	2200      	movs	r2, #0
   87908:	238a      	movs	r3, #138	; 0x8a
   8790a:	6032      	str	r2, [r6, #0]
   8790c:	602b      	str	r3, [r5, #0]
   8790e:	b006      	add	sp, #24
   87910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87914:	4b05      	ldr	r3, [pc, #20]	; (8792c <_wcrtomb_r+0x50>)
   87916:	681f      	ldr	r7, [r3, #0]
   87918:	f7fe fca6 	bl	86268 <__locale_charset>
   8791c:	9600      	str	r6, [sp, #0]
   8791e:	4603      	mov	r3, r0
   87920:	4622      	mov	r2, r4
   87922:	4628      	mov	r0, r5
   87924:	a903      	add	r1, sp, #12
   87926:	47b8      	blx	r7
   87928:	e7eb      	b.n	87902 <_wcrtomb_r+0x26>
   8792a:	bf00      	nop
   8792c:	200709dc 	.word	0x200709dc

00087930 <__ascii_wctomb>:
   87930:	b121      	cbz	r1, 8793c <__ascii_wctomb+0xc>
   87932:	2aff      	cmp	r2, #255	; 0xff
   87934:	d804      	bhi.n	87940 <__ascii_wctomb+0x10>
   87936:	700a      	strb	r2, [r1, #0]
   87938:	2001      	movs	r0, #1
   8793a:	4770      	bx	lr
   8793c:	4608      	mov	r0, r1
   8793e:	4770      	bx	lr
   87940:	238a      	movs	r3, #138	; 0x8a
   87942:	6003      	str	r3, [r0, #0]
   87944:	f04f 30ff 	mov.w	r0, #4294967295
   87948:	4770      	bx	lr
   8794a:	bf00      	nop

0008794c <_write_r>:
   8794c:	b570      	push	{r4, r5, r6, lr}
   8794e:	4c08      	ldr	r4, [pc, #32]	; (87970 <_write_r+0x24>)
   87950:	4606      	mov	r6, r0
   87952:	2500      	movs	r5, #0
   87954:	4608      	mov	r0, r1
   87956:	4611      	mov	r1, r2
   87958:	461a      	mov	r2, r3
   8795a:	6025      	str	r5, [r4, #0]
   8795c:	f7fa f8e4 	bl	81b28 <_write>
   87960:	1c43      	adds	r3, r0, #1
   87962:	d000      	beq.n	87966 <_write_r+0x1a>
   87964:	bd70      	pop	{r4, r5, r6, pc}
   87966:	6823      	ldr	r3, [r4, #0]
   87968:	2b00      	cmp	r3, #0
   8796a:	d0fb      	beq.n	87964 <_write_r+0x18>
   8796c:	6033      	str	r3, [r6, #0]
   8796e:	bd70      	pop	{r4, r5, r6, pc}
   87970:	2007afc0 	.word	0x2007afc0

00087974 <__register_exitproc>:
   87974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   87978:	4c25      	ldr	r4, [pc, #148]	; (87a10 <__register_exitproc+0x9c>)
   8797a:	4606      	mov	r6, r0
   8797c:	6825      	ldr	r5, [r4, #0]
   8797e:	4688      	mov	r8, r1
   87980:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   87984:	4692      	mov	sl, r2
   87986:	4699      	mov	r9, r3
   87988:	b3c4      	cbz	r4, 879fc <__register_exitproc+0x88>
   8798a:	6860      	ldr	r0, [r4, #4]
   8798c:	281f      	cmp	r0, #31
   8798e:	dc17      	bgt.n	879c0 <__register_exitproc+0x4c>
   87990:	1c41      	adds	r1, r0, #1
   87992:	b176      	cbz	r6, 879b2 <__register_exitproc+0x3e>
   87994:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   87998:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8799c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   879a0:	2201      	movs	r2, #1
   879a2:	4082      	lsls	r2, r0
   879a4:	4315      	orrs	r5, r2
   879a6:	2e02      	cmp	r6, #2
   879a8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   879ac:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   879b0:	d01e      	beq.n	879f0 <__register_exitproc+0x7c>
   879b2:	1c83      	adds	r3, r0, #2
   879b4:	6061      	str	r1, [r4, #4]
   879b6:	2000      	movs	r0, #0
   879b8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   879bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   879c0:	4b14      	ldr	r3, [pc, #80]	; (87a14 <__register_exitproc+0xa0>)
   879c2:	b303      	cbz	r3, 87a06 <__register_exitproc+0x92>
   879c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   879c8:	f7fe fccc 	bl	86364 <malloc>
   879cc:	4604      	mov	r4, r0
   879ce:	b1d0      	cbz	r0, 87a06 <__register_exitproc+0x92>
   879d0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   879d4:	2700      	movs	r7, #0
   879d6:	e884 0088 	stmia.w	r4, {r3, r7}
   879da:	4638      	mov	r0, r7
   879dc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   879e0:	2101      	movs	r1, #1
   879e2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   879e6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   879ea:	2e00      	cmp	r6, #0
   879ec:	d0e1      	beq.n	879b2 <__register_exitproc+0x3e>
   879ee:	e7d1      	b.n	87994 <__register_exitproc+0x20>
   879f0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   879f4:	431a      	orrs	r2, r3
   879f6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   879fa:	e7da      	b.n	879b2 <__register_exitproc+0x3e>
   879fc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   87a00:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   87a04:	e7c1      	b.n	8798a <__register_exitproc+0x16>
   87a06:	f04f 30ff 	mov.w	r0, #4294967295
   87a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87a0e:	bf00      	nop
   87a10:	00088b00 	.word	0x00088b00
   87a14:	00086365 	.word	0x00086365

00087a18 <_calloc_r>:
   87a18:	b510      	push	{r4, lr}
   87a1a:	fb02 f101 	mul.w	r1, r2, r1
   87a1e:	f7fe fca9 	bl	86374 <_malloc_r>
   87a22:	4604      	mov	r4, r0
   87a24:	b168      	cbz	r0, 87a42 <_calloc_r+0x2a>
   87a26:	f850 2c04 	ldr.w	r2, [r0, #-4]
   87a2a:	f022 0203 	bic.w	r2, r2, #3
   87a2e:	3a04      	subs	r2, #4
   87a30:	2a24      	cmp	r2, #36	; 0x24
   87a32:	d818      	bhi.n	87a66 <_calloc_r+0x4e>
   87a34:	2a13      	cmp	r2, #19
   87a36:	d806      	bhi.n	87a46 <_calloc_r+0x2e>
   87a38:	4603      	mov	r3, r0
   87a3a:	2200      	movs	r2, #0
   87a3c:	601a      	str	r2, [r3, #0]
   87a3e:	605a      	str	r2, [r3, #4]
   87a40:	609a      	str	r2, [r3, #8]
   87a42:	4620      	mov	r0, r4
   87a44:	bd10      	pop	{r4, pc}
   87a46:	2300      	movs	r3, #0
   87a48:	2a1b      	cmp	r2, #27
   87a4a:	6003      	str	r3, [r0, #0]
   87a4c:	6043      	str	r3, [r0, #4]
   87a4e:	d90f      	bls.n	87a70 <_calloc_r+0x58>
   87a50:	2a24      	cmp	r2, #36	; 0x24
   87a52:	6083      	str	r3, [r0, #8]
   87a54:	60c3      	str	r3, [r0, #12]
   87a56:	bf05      	ittet	eq
   87a58:	6103      	streq	r3, [r0, #16]
   87a5a:	6143      	streq	r3, [r0, #20]
   87a5c:	f100 0310 	addne.w	r3, r0, #16
   87a60:	f100 0318 	addeq.w	r3, r0, #24
   87a64:	e7e9      	b.n	87a3a <_calloc_r+0x22>
   87a66:	2100      	movs	r1, #0
   87a68:	f7fb fa64 	bl	82f34 <memset>
   87a6c:	4620      	mov	r0, r4
   87a6e:	bd10      	pop	{r4, pc}
   87a70:	f100 0308 	add.w	r3, r0, #8
   87a74:	e7e1      	b.n	87a3a <_calloc_r+0x22>
   87a76:	bf00      	nop

00087a78 <_close_r>:
   87a78:	b538      	push	{r3, r4, r5, lr}
   87a7a:	4c07      	ldr	r4, [pc, #28]	; (87a98 <_close_r+0x20>)
   87a7c:	2300      	movs	r3, #0
   87a7e:	4605      	mov	r5, r0
   87a80:	4608      	mov	r0, r1
   87a82:	6023      	str	r3, [r4, #0]
   87a84:	f7fa fda8 	bl	825d8 <_close>
   87a88:	1c43      	adds	r3, r0, #1
   87a8a:	d000      	beq.n	87a8e <_close_r+0x16>
   87a8c:	bd38      	pop	{r3, r4, r5, pc}
   87a8e:	6823      	ldr	r3, [r4, #0]
   87a90:	2b00      	cmp	r3, #0
   87a92:	d0fb      	beq.n	87a8c <_close_r+0x14>
   87a94:	602b      	str	r3, [r5, #0]
   87a96:	bd38      	pop	{r3, r4, r5, pc}
   87a98:	2007afc0 	.word	0x2007afc0

00087a9c <_fclose_r>:
   87a9c:	2900      	cmp	r1, #0
   87a9e:	d03d      	beq.n	87b1c <_fclose_r+0x80>
   87aa0:	b570      	push	{r4, r5, r6, lr}
   87aa2:	4605      	mov	r5, r0
   87aa4:	460c      	mov	r4, r1
   87aa6:	b108      	cbz	r0, 87aac <_fclose_r+0x10>
   87aa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87aaa:	b37b      	cbz	r3, 87b0c <_fclose_r+0x70>
   87aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87ab0:	b90b      	cbnz	r3, 87ab6 <_fclose_r+0x1a>
   87ab2:	2000      	movs	r0, #0
   87ab4:	bd70      	pop	{r4, r5, r6, pc}
   87ab6:	4628      	mov	r0, r5
   87ab8:	4621      	mov	r1, r4
   87aba:	f7fd fb63 	bl	85184 <__sflush_r>
   87abe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   87ac0:	4606      	mov	r6, r0
   87ac2:	b133      	cbz	r3, 87ad2 <_fclose_r+0x36>
   87ac4:	4628      	mov	r0, r5
   87ac6:	69e1      	ldr	r1, [r4, #28]
   87ac8:	4798      	blx	r3
   87aca:	2800      	cmp	r0, #0
   87acc:	bfb8      	it	lt
   87ace:	f04f 36ff 	movlt.w	r6, #4294967295
   87ad2:	89a3      	ldrh	r3, [r4, #12]
   87ad4:	061b      	lsls	r3, r3, #24
   87ad6:	d41c      	bmi.n	87b12 <_fclose_r+0x76>
   87ad8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87ada:	b141      	cbz	r1, 87aee <_fclose_r+0x52>
   87adc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87ae0:	4299      	cmp	r1, r3
   87ae2:	d002      	beq.n	87aea <_fclose_r+0x4e>
   87ae4:	4628      	mov	r0, r5
   87ae6:	f7fd fd6f 	bl	855c8 <_free_r>
   87aea:	2300      	movs	r3, #0
   87aec:	6323      	str	r3, [r4, #48]	; 0x30
   87aee:	6c61      	ldr	r1, [r4, #68]	; 0x44
   87af0:	b121      	cbz	r1, 87afc <_fclose_r+0x60>
   87af2:	4628      	mov	r0, r5
   87af4:	f7fd fd68 	bl	855c8 <_free_r>
   87af8:	2300      	movs	r3, #0
   87afa:	6463      	str	r3, [r4, #68]	; 0x44
   87afc:	f7fd fc92 	bl	85424 <__sfp_lock_acquire>
   87b00:	2300      	movs	r3, #0
   87b02:	81a3      	strh	r3, [r4, #12]
   87b04:	f7fd fc90 	bl	85428 <__sfp_lock_release>
   87b08:	4630      	mov	r0, r6
   87b0a:	bd70      	pop	{r4, r5, r6, pc}
   87b0c:	f7fd fc84 	bl	85418 <__sinit>
   87b10:	e7cc      	b.n	87aac <_fclose_r+0x10>
   87b12:	4628      	mov	r0, r5
   87b14:	6921      	ldr	r1, [r4, #16]
   87b16:	f7fd fd57 	bl	855c8 <_free_r>
   87b1a:	e7dd      	b.n	87ad8 <_fclose_r+0x3c>
   87b1c:	2000      	movs	r0, #0
   87b1e:	4770      	bx	lr

00087b20 <_fstat_r>:
   87b20:	b538      	push	{r3, r4, r5, lr}
   87b22:	4c08      	ldr	r4, [pc, #32]	; (87b44 <_fstat_r+0x24>)
   87b24:	2300      	movs	r3, #0
   87b26:	4605      	mov	r5, r0
   87b28:	4608      	mov	r0, r1
   87b2a:	4611      	mov	r1, r2
   87b2c:	6023      	str	r3, [r4, #0]
   87b2e:	f7fa fd57 	bl	825e0 <_fstat>
   87b32:	1c43      	adds	r3, r0, #1
   87b34:	d000      	beq.n	87b38 <_fstat_r+0x18>
   87b36:	bd38      	pop	{r3, r4, r5, pc}
   87b38:	6823      	ldr	r3, [r4, #0]
   87b3a:	2b00      	cmp	r3, #0
   87b3c:	d0fb      	beq.n	87b36 <_fstat_r+0x16>
   87b3e:	602b      	str	r3, [r5, #0]
   87b40:	bd38      	pop	{r3, r4, r5, pc}
   87b42:	bf00      	nop
   87b44:	2007afc0 	.word	0x2007afc0

00087b48 <_isatty_r>:
   87b48:	b538      	push	{r3, r4, r5, lr}
   87b4a:	4c07      	ldr	r4, [pc, #28]	; (87b68 <_isatty_r+0x20>)
   87b4c:	2300      	movs	r3, #0
   87b4e:	4605      	mov	r5, r0
   87b50:	4608      	mov	r0, r1
   87b52:	6023      	str	r3, [r4, #0]
   87b54:	f7fa fd4a 	bl	825ec <_isatty>
   87b58:	1c43      	adds	r3, r0, #1
   87b5a:	d000      	beq.n	87b5e <_isatty_r+0x16>
   87b5c:	bd38      	pop	{r3, r4, r5, pc}
   87b5e:	6823      	ldr	r3, [r4, #0]
   87b60:	2b00      	cmp	r3, #0
   87b62:	d0fb      	beq.n	87b5c <_isatty_r+0x14>
   87b64:	602b      	str	r3, [r5, #0]
   87b66:	bd38      	pop	{r3, r4, r5, pc}
   87b68:	2007afc0 	.word	0x2007afc0

00087b6c <_lseek_r>:
   87b6c:	b570      	push	{r4, r5, r6, lr}
   87b6e:	4c08      	ldr	r4, [pc, #32]	; (87b90 <_lseek_r+0x24>)
   87b70:	4606      	mov	r6, r0
   87b72:	2500      	movs	r5, #0
   87b74:	4608      	mov	r0, r1
   87b76:	4611      	mov	r1, r2
   87b78:	461a      	mov	r2, r3
   87b7a:	6025      	str	r5, [r4, #0]
   87b7c:	f7fa fd38 	bl	825f0 <_lseek>
   87b80:	1c43      	adds	r3, r0, #1
   87b82:	d000      	beq.n	87b86 <_lseek_r+0x1a>
   87b84:	bd70      	pop	{r4, r5, r6, pc}
   87b86:	6823      	ldr	r3, [r4, #0]
   87b88:	2b00      	cmp	r3, #0
   87b8a:	d0fb      	beq.n	87b84 <_lseek_r+0x18>
   87b8c:	6033      	str	r3, [r6, #0]
   87b8e:	bd70      	pop	{r4, r5, r6, pc}
   87b90:	2007afc0 	.word	0x2007afc0

00087b94 <_read_r>:
   87b94:	b570      	push	{r4, r5, r6, lr}
   87b96:	4c08      	ldr	r4, [pc, #32]	; (87bb8 <_read_r+0x24>)
   87b98:	4606      	mov	r6, r0
   87b9a:	2500      	movs	r5, #0
   87b9c:	4608      	mov	r0, r1
   87b9e:	4611      	mov	r1, r2
   87ba0:	461a      	mov	r2, r3
   87ba2:	6025      	str	r5, [r4, #0]
   87ba4:	f7f8 fb06 	bl	801b4 <_read>
   87ba8:	1c43      	adds	r3, r0, #1
   87baa:	d000      	beq.n	87bae <_read_r+0x1a>
   87bac:	bd70      	pop	{r4, r5, r6, pc}
   87bae:	6823      	ldr	r3, [r4, #0]
   87bb0:	2b00      	cmp	r3, #0
   87bb2:	d0fb      	beq.n	87bac <_read_r+0x18>
   87bb4:	6033      	str	r3, [r6, #0]
   87bb6:	bd70      	pop	{r4, r5, r6, pc}
   87bb8:	2007afc0 	.word	0x2007afc0

00087bbc <__aeabi_drsub>:
   87bbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   87bc0:	e002      	b.n	87bc8 <__adddf3>
   87bc2:	bf00      	nop

00087bc4 <__aeabi_dsub>:
   87bc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00087bc8 <__adddf3>:
   87bc8:	b530      	push	{r4, r5, lr}
   87bca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   87bce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   87bd2:	ea94 0f05 	teq	r4, r5
   87bd6:	bf08      	it	eq
   87bd8:	ea90 0f02 	teqeq	r0, r2
   87bdc:	bf1f      	itttt	ne
   87bde:	ea54 0c00 	orrsne.w	ip, r4, r0
   87be2:	ea55 0c02 	orrsne.w	ip, r5, r2
   87be6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   87bea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87bee:	f000 80e2 	beq.w	87db6 <__adddf3+0x1ee>
   87bf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   87bf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   87bfa:	bfb8      	it	lt
   87bfc:	426d      	neglt	r5, r5
   87bfe:	dd0c      	ble.n	87c1a <__adddf3+0x52>
   87c00:	442c      	add	r4, r5
   87c02:	ea80 0202 	eor.w	r2, r0, r2
   87c06:	ea81 0303 	eor.w	r3, r1, r3
   87c0a:	ea82 0000 	eor.w	r0, r2, r0
   87c0e:	ea83 0101 	eor.w	r1, r3, r1
   87c12:	ea80 0202 	eor.w	r2, r0, r2
   87c16:	ea81 0303 	eor.w	r3, r1, r3
   87c1a:	2d36      	cmp	r5, #54	; 0x36
   87c1c:	bf88      	it	hi
   87c1e:	bd30      	pophi	{r4, r5, pc}
   87c20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   87c24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87c28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   87c2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   87c30:	d002      	beq.n	87c38 <__adddf3+0x70>
   87c32:	4240      	negs	r0, r0
   87c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87c38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   87c3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87c40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   87c44:	d002      	beq.n	87c4c <__adddf3+0x84>
   87c46:	4252      	negs	r2, r2
   87c48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   87c4c:	ea94 0f05 	teq	r4, r5
   87c50:	f000 80a7 	beq.w	87da2 <__adddf3+0x1da>
   87c54:	f1a4 0401 	sub.w	r4, r4, #1
   87c58:	f1d5 0e20 	rsbs	lr, r5, #32
   87c5c:	db0d      	blt.n	87c7a <__adddf3+0xb2>
   87c5e:	fa02 fc0e 	lsl.w	ip, r2, lr
   87c62:	fa22 f205 	lsr.w	r2, r2, r5
   87c66:	1880      	adds	r0, r0, r2
   87c68:	f141 0100 	adc.w	r1, r1, #0
   87c6c:	fa03 f20e 	lsl.w	r2, r3, lr
   87c70:	1880      	adds	r0, r0, r2
   87c72:	fa43 f305 	asr.w	r3, r3, r5
   87c76:	4159      	adcs	r1, r3
   87c78:	e00e      	b.n	87c98 <__adddf3+0xd0>
   87c7a:	f1a5 0520 	sub.w	r5, r5, #32
   87c7e:	f10e 0e20 	add.w	lr, lr, #32
   87c82:	2a01      	cmp	r2, #1
   87c84:	fa03 fc0e 	lsl.w	ip, r3, lr
   87c88:	bf28      	it	cs
   87c8a:	f04c 0c02 	orrcs.w	ip, ip, #2
   87c8e:	fa43 f305 	asr.w	r3, r3, r5
   87c92:	18c0      	adds	r0, r0, r3
   87c94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   87c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87c9c:	d507      	bpl.n	87cae <__adddf3+0xe6>
   87c9e:	f04f 0e00 	mov.w	lr, #0
   87ca2:	f1dc 0c00 	rsbs	ip, ip, #0
   87ca6:	eb7e 0000 	sbcs.w	r0, lr, r0
   87caa:	eb6e 0101 	sbc.w	r1, lr, r1
   87cae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   87cb2:	d31b      	bcc.n	87cec <__adddf3+0x124>
   87cb4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   87cb8:	d30c      	bcc.n	87cd4 <__adddf3+0x10c>
   87cba:	0849      	lsrs	r1, r1, #1
   87cbc:	ea5f 0030 	movs.w	r0, r0, rrx
   87cc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   87cc4:	f104 0401 	add.w	r4, r4, #1
   87cc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   87ccc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   87cd0:	f080 809a 	bcs.w	87e08 <__adddf3+0x240>
   87cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   87cd8:	bf08      	it	eq
   87cda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87cde:	f150 0000 	adcs.w	r0, r0, #0
   87ce2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87ce6:	ea41 0105 	orr.w	r1, r1, r5
   87cea:	bd30      	pop	{r4, r5, pc}
   87cec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   87cf0:	4140      	adcs	r0, r0
   87cf2:	eb41 0101 	adc.w	r1, r1, r1
   87cf6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87cfa:	f1a4 0401 	sub.w	r4, r4, #1
   87cfe:	d1e9      	bne.n	87cd4 <__adddf3+0x10c>
   87d00:	f091 0f00 	teq	r1, #0
   87d04:	bf04      	itt	eq
   87d06:	4601      	moveq	r1, r0
   87d08:	2000      	moveq	r0, #0
   87d0a:	fab1 f381 	clz	r3, r1
   87d0e:	bf08      	it	eq
   87d10:	3320      	addeq	r3, #32
   87d12:	f1a3 030b 	sub.w	r3, r3, #11
   87d16:	f1b3 0220 	subs.w	r2, r3, #32
   87d1a:	da0c      	bge.n	87d36 <__adddf3+0x16e>
   87d1c:	320c      	adds	r2, #12
   87d1e:	dd08      	ble.n	87d32 <__adddf3+0x16a>
   87d20:	f102 0c14 	add.w	ip, r2, #20
   87d24:	f1c2 020c 	rsb	r2, r2, #12
   87d28:	fa01 f00c 	lsl.w	r0, r1, ip
   87d2c:	fa21 f102 	lsr.w	r1, r1, r2
   87d30:	e00c      	b.n	87d4c <__adddf3+0x184>
   87d32:	f102 0214 	add.w	r2, r2, #20
   87d36:	bfd8      	it	le
   87d38:	f1c2 0c20 	rsble	ip, r2, #32
   87d3c:	fa01 f102 	lsl.w	r1, r1, r2
   87d40:	fa20 fc0c 	lsr.w	ip, r0, ip
   87d44:	bfdc      	itt	le
   87d46:	ea41 010c 	orrle.w	r1, r1, ip
   87d4a:	4090      	lslle	r0, r2
   87d4c:	1ae4      	subs	r4, r4, r3
   87d4e:	bfa2      	ittt	ge
   87d50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   87d54:	4329      	orrge	r1, r5
   87d56:	bd30      	popge	{r4, r5, pc}
   87d58:	ea6f 0404 	mvn.w	r4, r4
   87d5c:	3c1f      	subs	r4, #31
   87d5e:	da1c      	bge.n	87d9a <__adddf3+0x1d2>
   87d60:	340c      	adds	r4, #12
   87d62:	dc0e      	bgt.n	87d82 <__adddf3+0x1ba>
   87d64:	f104 0414 	add.w	r4, r4, #20
   87d68:	f1c4 0220 	rsb	r2, r4, #32
   87d6c:	fa20 f004 	lsr.w	r0, r0, r4
   87d70:	fa01 f302 	lsl.w	r3, r1, r2
   87d74:	ea40 0003 	orr.w	r0, r0, r3
   87d78:	fa21 f304 	lsr.w	r3, r1, r4
   87d7c:	ea45 0103 	orr.w	r1, r5, r3
   87d80:	bd30      	pop	{r4, r5, pc}
   87d82:	f1c4 040c 	rsb	r4, r4, #12
   87d86:	f1c4 0220 	rsb	r2, r4, #32
   87d8a:	fa20 f002 	lsr.w	r0, r0, r2
   87d8e:	fa01 f304 	lsl.w	r3, r1, r4
   87d92:	ea40 0003 	orr.w	r0, r0, r3
   87d96:	4629      	mov	r1, r5
   87d98:	bd30      	pop	{r4, r5, pc}
   87d9a:	fa21 f004 	lsr.w	r0, r1, r4
   87d9e:	4629      	mov	r1, r5
   87da0:	bd30      	pop	{r4, r5, pc}
   87da2:	f094 0f00 	teq	r4, #0
   87da6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   87daa:	bf06      	itte	eq
   87dac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   87db0:	3401      	addeq	r4, #1
   87db2:	3d01      	subne	r5, #1
   87db4:	e74e      	b.n	87c54 <__adddf3+0x8c>
   87db6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87dba:	bf18      	it	ne
   87dbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87dc0:	d029      	beq.n	87e16 <__adddf3+0x24e>
   87dc2:	ea94 0f05 	teq	r4, r5
   87dc6:	bf08      	it	eq
   87dc8:	ea90 0f02 	teqeq	r0, r2
   87dcc:	d005      	beq.n	87dda <__adddf3+0x212>
   87dce:	ea54 0c00 	orrs.w	ip, r4, r0
   87dd2:	bf04      	itt	eq
   87dd4:	4619      	moveq	r1, r3
   87dd6:	4610      	moveq	r0, r2
   87dd8:	bd30      	pop	{r4, r5, pc}
   87dda:	ea91 0f03 	teq	r1, r3
   87dde:	bf1e      	ittt	ne
   87de0:	2100      	movne	r1, #0
   87de2:	2000      	movne	r0, #0
   87de4:	bd30      	popne	{r4, r5, pc}
   87de6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   87dea:	d105      	bne.n	87df8 <__adddf3+0x230>
   87dec:	0040      	lsls	r0, r0, #1
   87dee:	4149      	adcs	r1, r1
   87df0:	bf28      	it	cs
   87df2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   87df6:	bd30      	pop	{r4, r5, pc}
   87df8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   87dfc:	bf3c      	itt	cc
   87dfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   87e02:	bd30      	popcc	{r4, r5, pc}
   87e04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87e08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   87e0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87e10:	f04f 0000 	mov.w	r0, #0
   87e14:	bd30      	pop	{r4, r5, pc}
   87e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87e1a:	bf1a      	itte	ne
   87e1c:	4619      	movne	r1, r3
   87e1e:	4610      	movne	r0, r2
   87e20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   87e24:	bf1c      	itt	ne
   87e26:	460b      	movne	r3, r1
   87e28:	4602      	movne	r2, r0
   87e2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87e2e:	bf06      	itte	eq
   87e30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   87e34:	ea91 0f03 	teqeq	r1, r3
   87e38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   87e3c:	bd30      	pop	{r4, r5, pc}
   87e3e:	bf00      	nop

00087e40 <__aeabi_ui2d>:
   87e40:	f090 0f00 	teq	r0, #0
   87e44:	bf04      	itt	eq
   87e46:	2100      	moveq	r1, #0
   87e48:	4770      	bxeq	lr
   87e4a:	b530      	push	{r4, r5, lr}
   87e4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87e50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87e54:	f04f 0500 	mov.w	r5, #0
   87e58:	f04f 0100 	mov.w	r1, #0
   87e5c:	e750      	b.n	87d00 <__adddf3+0x138>
   87e5e:	bf00      	nop

00087e60 <__aeabi_i2d>:
   87e60:	f090 0f00 	teq	r0, #0
   87e64:	bf04      	itt	eq
   87e66:	2100      	moveq	r1, #0
   87e68:	4770      	bxeq	lr
   87e6a:	b530      	push	{r4, r5, lr}
   87e6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87e70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87e74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   87e78:	bf48      	it	mi
   87e7a:	4240      	negmi	r0, r0
   87e7c:	f04f 0100 	mov.w	r1, #0
   87e80:	e73e      	b.n	87d00 <__adddf3+0x138>
   87e82:	bf00      	nop

00087e84 <__aeabi_f2d>:
   87e84:	0042      	lsls	r2, r0, #1
   87e86:	ea4f 01e2 	mov.w	r1, r2, asr #3
   87e8a:	ea4f 0131 	mov.w	r1, r1, rrx
   87e8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   87e92:	bf1f      	itttt	ne
   87e94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   87e98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87e9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   87ea0:	4770      	bxne	lr
   87ea2:	f092 0f00 	teq	r2, #0
   87ea6:	bf14      	ite	ne
   87ea8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87eac:	4770      	bxeq	lr
   87eae:	b530      	push	{r4, r5, lr}
   87eb0:	f44f 7460 	mov.w	r4, #896	; 0x380
   87eb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87eb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87ebc:	e720      	b.n	87d00 <__adddf3+0x138>
   87ebe:	bf00      	nop

00087ec0 <__aeabi_ul2d>:
   87ec0:	ea50 0201 	orrs.w	r2, r0, r1
   87ec4:	bf08      	it	eq
   87ec6:	4770      	bxeq	lr
   87ec8:	b530      	push	{r4, r5, lr}
   87eca:	f04f 0500 	mov.w	r5, #0
   87ece:	e00a      	b.n	87ee6 <__aeabi_l2d+0x16>

00087ed0 <__aeabi_l2d>:
   87ed0:	ea50 0201 	orrs.w	r2, r0, r1
   87ed4:	bf08      	it	eq
   87ed6:	4770      	bxeq	lr
   87ed8:	b530      	push	{r4, r5, lr}
   87eda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   87ede:	d502      	bpl.n	87ee6 <__aeabi_l2d+0x16>
   87ee0:	4240      	negs	r0, r0
   87ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87ee6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87eea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87eee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   87ef2:	f43f aedc 	beq.w	87cae <__adddf3+0xe6>
   87ef6:	f04f 0203 	mov.w	r2, #3
   87efa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87efe:	bf18      	it	ne
   87f00:	3203      	addne	r2, #3
   87f02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87f06:	bf18      	it	ne
   87f08:	3203      	addne	r2, #3
   87f0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   87f0e:	f1c2 0320 	rsb	r3, r2, #32
   87f12:	fa00 fc03 	lsl.w	ip, r0, r3
   87f16:	fa20 f002 	lsr.w	r0, r0, r2
   87f1a:	fa01 fe03 	lsl.w	lr, r1, r3
   87f1e:	ea40 000e 	orr.w	r0, r0, lr
   87f22:	fa21 f102 	lsr.w	r1, r1, r2
   87f26:	4414      	add	r4, r2
   87f28:	e6c1      	b.n	87cae <__adddf3+0xe6>
   87f2a:	bf00      	nop

00087f2c <__aeabi_dmul>:
   87f2c:	b570      	push	{r4, r5, r6, lr}
   87f2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87f32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87f36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87f3a:	bf1d      	ittte	ne
   87f3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87f40:	ea94 0f0c 	teqne	r4, ip
   87f44:	ea95 0f0c 	teqne	r5, ip
   87f48:	f000 f8de 	bleq	88108 <__aeabi_dmul+0x1dc>
   87f4c:	442c      	add	r4, r5
   87f4e:	ea81 0603 	eor.w	r6, r1, r3
   87f52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87f56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87f5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87f5e:	bf18      	it	ne
   87f60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87f64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87f6c:	d038      	beq.n	87fe0 <__aeabi_dmul+0xb4>
   87f6e:	fba0 ce02 	umull	ip, lr, r0, r2
   87f72:	f04f 0500 	mov.w	r5, #0
   87f76:	fbe1 e502 	umlal	lr, r5, r1, r2
   87f7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87f7e:	fbe0 e503 	umlal	lr, r5, r0, r3
   87f82:	f04f 0600 	mov.w	r6, #0
   87f86:	fbe1 5603 	umlal	r5, r6, r1, r3
   87f8a:	f09c 0f00 	teq	ip, #0
   87f8e:	bf18      	it	ne
   87f90:	f04e 0e01 	orrne.w	lr, lr, #1
   87f94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87f98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87f9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87fa0:	d204      	bcs.n	87fac <__aeabi_dmul+0x80>
   87fa2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87fa6:	416d      	adcs	r5, r5
   87fa8:	eb46 0606 	adc.w	r6, r6, r6
   87fac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87fb0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   87fb4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87fb8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87fbc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87fc0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87fc4:	bf88      	it	hi
   87fc6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87fca:	d81e      	bhi.n	8800a <__aeabi_dmul+0xde>
   87fcc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87fd0:	bf08      	it	eq
   87fd2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   87fd6:	f150 0000 	adcs.w	r0, r0, #0
   87fda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87fde:	bd70      	pop	{r4, r5, r6, pc}
   87fe0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   87fe4:	ea46 0101 	orr.w	r1, r6, r1
   87fe8:	ea40 0002 	orr.w	r0, r0, r2
   87fec:	ea81 0103 	eor.w	r1, r1, r3
   87ff0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87ff4:	bfc2      	ittt	gt
   87ff6:	ebd4 050c 	rsbsgt	r5, r4, ip
   87ffa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87ffe:	bd70      	popgt	{r4, r5, r6, pc}
   88000:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88004:	f04f 0e00 	mov.w	lr, #0
   88008:	3c01      	subs	r4, #1
   8800a:	f300 80ab 	bgt.w	88164 <__aeabi_dmul+0x238>
   8800e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   88012:	bfde      	ittt	le
   88014:	2000      	movle	r0, #0
   88016:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8801a:	bd70      	pople	{r4, r5, r6, pc}
   8801c:	f1c4 0400 	rsb	r4, r4, #0
   88020:	3c20      	subs	r4, #32
   88022:	da35      	bge.n	88090 <__aeabi_dmul+0x164>
   88024:	340c      	adds	r4, #12
   88026:	dc1b      	bgt.n	88060 <__aeabi_dmul+0x134>
   88028:	f104 0414 	add.w	r4, r4, #20
   8802c:	f1c4 0520 	rsb	r5, r4, #32
   88030:	fa00 f305 	lsl.w	r3, r0, r5
   88034:	fa20 f004 	lsr.w	r0, r0, r4
   88038:	fa01 f205 	lsl.w	r2, r1, r5
   8803c:	ea40 0002 	orr.w	r0, r0, r2
   88040:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   88044:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   88048:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8804c:	fa21 f604 	lsr.w	r6, r1, r4
   88050:	eb42 0106 	adc.w	r1, r2, r6
   88054:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88058:	bf08      	it	eq
   8805a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8805e:	bd70      	pop	{r4, r5, r6, pc}
   88060:	f1c4 040c 	rsb	r4, r4, #12
   88064:	f1c4 0520 	rsb	r5, r4, #32
   88068:	fa00 f304 	lsl.w	r3, r0, r4
   8806c:	fa20 f005 	lsr.w	r0, r0, r5
   88070:	fa01 f204 	lsl.w	r2, r1, r4
   88074:	ea40 0002 	orr.w	r0, r0, r2
   88078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8807c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   88080:	f141 0100 	adc.w	r1, r1, #0
   88084:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88088:	bf08      	it	eq
   8808a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8808e:	bd70      	pop	{r4, r5, r6, pc}
   88090:	f1c4 0520 	rsb	r5, r4, #32
   88094:	fa00 f205 	lsl.w	r2, r0, r5
   88098:	ea4e 0e02 	orr.w	lr, lr, r2
   8809c:	fa20 f304 	lsr.w	r3, r0, r4
   880a0:	fa01 f205 	lsl.w	r2, r1, r5
   880a4:	ea43 0302 	orr.w	r3, r3, r2
   880a8:	fa21 f004 	lsr.w	r0, r1, r4
   880ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   880b0:	fa21 f204 	lsr.w	r2, r1, r4
   880b4:	ea20 0002 	bic.w	r0, r0, r2
   880b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   880bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   880c0:	bf08      	it	eq
   880c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   880c6:	bd70      	pop	{r4, r5, r6, pc}
   880c8:	f094 0f00 	teq	r4, #0
   880cc:	d10f      	bne.n	880ee <__aeabi_dmul+0x1c2>
   880ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   880d2:	0040      	lsls	r0, r0, #1
   880d4:	eb41 0101 	adc.w	r1, r1, r1
   880d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   880dc:	bf08      	it	eq
   880de:	3c01      	subeq	r4, #1
   880e0:	d0f7      	beq.n	880d2 <__aeabi_dmul+0x1a6>
   880e2:	ea41 0106 	orr.w	r1, r1, r6
   880e6:	f095 0f00 	teq	r5, #0
   880ea:	bf18      	it	ne
   880ec:	4770      	bxne	lr
   880ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   880f2:	0052      	lsls	r2, r2, #1
   880f4:	eb43 0303 	adc.w	r3, r3, r3
   880f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   880fc:	bf08      	it	eq
   880fe:	3d01      	subeq	r5, #1
   88100:	d0f7      	beq.n	880f2 <__aeabi_dmul+0x1c6>
   88102:	ea43 0306 	orr.w	r3, r3, r6
   88106:	4770      	bx	lr
   88108:	ea94 0f0c 	teq	r4, ip
   8810c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88110:	bf18      	it	ne
   88112:	ea95 0f0c 	teqne	r5, ip
   88116:	d00c      	beq.n	88132 <__aeabi_dmul+0x206>
   88118:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8811c:	bf18      	it	ne
   8811e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88122:	d1d1      	bne.n	880c8 <__aeabi_dmul+0x19c>
   88124:	ea81 0103 	eor.w	r1, r1, r3
   88128:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8812c:	f04f 0000 	mov.w	r0, #0
   88130:	bd70      	pop	{r4, r5, r6, pc}
   88132:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88136:	bf06      	itte	eq
   88138:	4610      	moveq	r0, r2
   8813a:	4619      	moveq	r1, r3
   8813c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88140:	d019      	beq.n	88176 <__aeabi_dmul+0x24a>
   88142:	ea94 0f0c 	teq	r4, ip
   88146:	d102      	bne.n	8814e <__aeabi_dmul+0x222>
   88148:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8814c:	d113      	bne.n	88176 <__aeabi_dmul+0x24a>
   8814e:	ea95 0f0c 	teq	r5, ip
   88152:	d105      	bne.n	88160 <__aeabi_dmul+0x234>
   88154:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   88158:	bf1c      	itt	ne
   8815a:	4610      	movne	r0, r2
   8815c:	4619      	movne	r1, r3
   8815e:	d10a      	bne.n	88176 <__aeabi_dmul+0x24a>
   88160:	ea81 0103 	eor.w	r1, r1, r3
   88164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88168:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8816c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   88170:	f04f 0000 	mov.w	r0, #0
   88174:	bd70      	pop	{r4, r5, r6, pc}
   88176:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8817a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8817e:	bd70      	pop	{r4, r5, r6, pc}

00088180 <__aeabi_ddiv>:
   88180:	b570      	push	{r4, r5, r6, lr}
   88182:	f04f 0cff 	mov.w	ip, #255	; 0xff
   88186:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8818a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8818e:	bf1d      	ittte	ne
   88190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88194:	ea94 0f0c 	teqne	r4, ip
   88198:	ea95 0f0c 	teqne	r5, ip
   8819c:	f000 f8a7 	bleq	882ee <__aeabi_ddiv+0x16e>
   881a0:	eba4 0405 	sub.w	r4, r4, r5
   881a4:	ea81 0e03 	eor.w	lr, r1, r3
   881a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   881ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   881b0:	f000 8088 	beq.w	882c4 <__aeabi_ddiv+0x144>
   881b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   881b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   881bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   881c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   881c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   881c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   881cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   881d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   881d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   881d8:	429d      	cmp	r5, r3
   881da:	bf08      	it	eq
   881dc:	4296      	cmpeq	r6, r2
   881de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   881e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   881e6:	d202      	bcs.n	881ee <__aeabi_ddiv+0x6e>
   881e8:	085b      	lsrs	r3, r3, #1
   881ea:	ea4f 0232 	mov.w	r2, r2, rrx
   881ee:	1ab6      	subs	r6, r6, r2
   881f0:	eb65 0503 	sbc.w	r5, r5, r3
   881f4:	085b      	lsrs	r3, r3, #1
   881f6:	ea4f 0232 	mov.w	r2, r2, rrx
   881fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   881fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   88202:	ebb6 0e02 	subs.w	lr, r6, r2
   88206:	eb75 0e03 	sbcs.w	lr, r5, r3
   8820a:	bf22      	ittt	cs
   8820c:	1ab6      	subcs	r6, r6, r2
   8820e:	4675      	movcs	r5, lr
   88210:	ea40 000c 	orrcs.w	r0, r0, ip
   88214:	085b      	lsrs	r3, r3, #1
   88216:	ea4f 0232 	mov.w	r2, r2, rrx
   8821a:	ebb6 0e02 	subs.w	lr, r6, r2
   8821e:	eb75 0e03 	sbcs.w	lr, r5, r3
   88222:	bf22      	ittt	cs
   88224:	1ab6      	subcs	r6, r6, r2
   88226:	4675      	movcs	r5, lr
   88228:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8822c:	085b      	lsrs	r3, r3, #1
   8822e:	ea4f 0232 	mov.w	r2, r2, rrx
   88232:	ebb6 0e02 	subs.w	lr, r6, r2
   88236:	eb75 0e03 	sbcs.w	lr, r5, r3
   8823a:	bf22      	ittt	cs
   8823c:	1ab6      	subcs	r6, r6, r2
   8823e:	4675      	movcs	r5, lr
   88240:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   88244:	085b      	lsrs	r3, r3, #1
   88246:	ea4f 0232 	mov.w	r2, r2, rrx
   8824a:	ebb6 0e02 	subs.w	lr, r6, r2
   8824e:	eb75 0e03 	sbcs.w	lr, r5, r3
   88252:	bf22      	ittt	cs
   88254:	1ab6      	subcs	r6, r6, r2
   88256:	4675      	movcs	r5, lr
   88258:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8825c:	ea55 0e06 	orrs.w	lr, r5, r6
   88260:	d018      	beq.n	88294 <__aeabi_ddiv+0x114>
   88262:	ea4f 1505 	mov.w	r5, r5, lsl #4
   88266:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8826a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8826e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   88272:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   88276:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8827a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8827e:	d1c0      	bne.n	88202 <__aeabi_ddiv+0x82>
   88280:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88284:	d10b      	bne.n	8829e <__aeabi_ddiv+0x11e>
   88286:	ea41 0100 	orr.w	r1, r1, r0
   8828a:	f04f 0000 	mov.w	r0, #0
   8828e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   88292:	e7b6      	b.n	88202 <__aeabi_ddiv+0x82>
   88294:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88298:	bf04      	itt	eq
   8829a:	4301      	orreq	r1, r0
   8829c:	2000      	moveq	r0, #0
   8829e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   882a2:	bf88      	it	hi
   882a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   882a8:	f63f aeaf 	bhi.w	8800a <__aeabi_dmul+0xde>
   882ac:	ebb5 0c03 	subs.w	ip, r5, r3
   882b0:	bf04      	itt	eq
   882b2:	ebb6 0c02 	subseq.w	ip, r6, r2
   882b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   882ba:	f150 0000 	adcs.w	r0, r0, #0
   882be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   882c2:	bd70      	pop	{r4, r5, r6, pc}
   882c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   882c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   882cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   882d0:	bfc2      	ittt	gt
   882d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   882d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   882da:	bd70      	popgt	{r4, r5, r6, pc}
   882dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   882e0:	f04f 0e00 	mov.w	lr, #0
   882e4:	3c01      	subs	r4, #1
   882e6:	e690      	b.n	8800a <__aeabi_dmul+0xde>
   882e8:	ea45 0e06 	orr.w	lr, r5, r6
   882ec:	e68d      	b.n	8800a <__aeabi_dmul+0xde>
   882ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   882f2:	ea94 0f0c 	teq	r4, ip
   882f6:	bf08      	it	eq
   882f8:	ea95 0f0c 	teqeq	r5, ip
   882fc:	f43f af3b 	beq.w	88176 <__aeabi_dmul+0x24a>
   88300:	ea94 0f0c 	teq	r4, ip
   88304:	d10a      	bne.n	8831c <__aeabi_ddiv+0x19c>
   88306:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8830a:	f47f af34 	bne.w	88176 <__aeabi_dmul+0x24a>
   8830e:	ea95 0f0c 	teq	r5, ip
   88312:	f47f af25 	bne.w	88160 <__aeabi_dmul+0x234>
   88316:	4610      	mov	r0, r2
   88318:	4619      	mov	r1, r3
   8831a:	e72c      	b.n	88176 <__aeabi_dmul+0x24a>
   8831c:	ea95 0f0c 	teq	r5, ip
   88320:	d106      	bne.n	88330 <__aeabi_ddiv+0x1b0>
   88322:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88326:	f43f aefd 	beq.w	88124 <__aeabi_dmul+0x1f8>
   8832a:	4610      	mov	r0, r2
   8832c:	4619      	mov	r1, r3
   8832e:	e722      	b.n	88176 <__aeabi_dmul+0x24a>
   88330:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88334:	bf18      	it	ne
   88336:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8833a:	f47f aec5 	bne.w	880c8 <__aeabi_dmul+0x19c>
   8833e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   88342:	f47f af0d 	bne.w	88160 <__aeabi_dmul+0x234>
   88346:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8834a:	f47f aeeb 	bne.w	88124 <__aeabi_dmul+0x1f8>
   8834e:	e712      	b.n	88176 <__aeabi_dmul+0x24a>

00088350 <__gedf2>:
   88350:	f04f 3cff 	mov.w	ip, #4294967295
   88354:	e006      	b.n	88364 <__cmpdf2+0x4>
   88356:	bf00      	nop

00088358 <__ledf2>:
   88358:	f04f 0c01 	mov.w	ip, #1
   8835c:	e002      	b.n	88364 <__cmpdf2+0x4>
   8835e:	bf00      	nop

00088360 <__cmpdf2>:
   88360:	f04f 0c01 	mov.w	ip, #1
   88364:	f84d cd04 	str.w	ip, [sp, #-4]!
   88368:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8836c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88370:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88374:	bf18      	it	ne
   88376:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8837a:	d01b      	beq.n	883b4 <__cmpdf2+0x54>
   8837c:	b001      	add	sp, #4
   8837e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   88382:	bf0c      	ite	eq
   88384:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88388:	ea91 0f03 	teqne	r1, r3
   8838c:	bf02      	ittt	eq
   8838e:	ea90 0f02 	teqeq	r0, r2
   88392:	2000      	moveq	r0, #0
   88394:	4770      	bxeq	lr
   88396:	f110 0f00 	cmn.w	r0, #0
   8839a:	ea91 0f03 	teq	r1, r3
   8839e:	bf58      	it	pl
   883a0:	4299      	cmppl	r1, r3
   883a2:	bf08      	it	eq
   883a4:	4290      	cmpeq	r0, r2
   883a6:	bf2c      	ite	cs
   883a8:	17d8      	asrcs	r0, r3, #31
   883aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   883ae:	f040 0001 	orr.w	r0, r0, #1
   883b2:	4770      	bx	lr
   883b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   883b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   883bc:	d102      	bne.n	883c4 <__cmpdf2+0x64>
   883be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   883c2:	d107      	bne.n	883d4 <__cmpdf2+0x74>
   883c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   883c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   883cc:	d1d6      	bne.n	8837c <__cmpdf2+0x1c>
   883ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   883d2:	d0d3      	beq.n	8837c <__cmpdf2+0x1c>
   883d4:	f85d 0b04 	ldr.w	r0, [sp], #4
   883d8:	4770      	bx	lr
   883da:	bf00      	nop

000883dc <__aeabi_cdrcmple>:
   883dc:	4684      	mov	ip, r0
   883de:	4610      	mov	r0, r2
   883e0:	4662      	mov	r2, ip
   883e2:	468c      	mov	ip, r1
   883e4:	4619      	mov	r1, r3
   883e6:	4663      	mov	r3, ip
   883e8:	e000      	b.n	883ec <__aeabi_cdcmpeq>
   883ea:	bf00      	nop

000883ec <__aeabi_cdcmpeq>:
   883ec:	b501      	push	{r0, lr}
   883ee:	f7ff ffb7 	bl	88360 <__cmpdf2>
   883f2:	2800      	cmp	r0, #0
   883f4:	bf48      	it	mi
   883f6:	f110 0f00 	cmnmi.w	r0, #0
   883fa:	bd01      	pop	{r0, pc}

000883fc <__aeabi_dcmpeq>:
   883fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   88400:	f7ff fff4 	bl	883ec <__aeabi_cdcmpeq>
   88404:	bf0c      	ite	eq
   88406:	2001      	moveq	r0, #1
   88408:	2000      	movne	r0, #0
   8840a:	f85d fb08 	ldr.w	pc, [sp], #8
   8840e:	bf00      	nop

00088410 <__aeabi_dcmplt>:
   88410:	f84d ed08 	str.w	lr, [sp, #-8]!
   88414:	f7ff ffea 	bl	883ec <__aeabi_cdcmpeq>
   88418:	bf34      	ite	cc
   8841a:	2001      	movcc	r0, #1
   8841c:	2000      	movcs	r0, #0
   8841e:	f85d fb08 	ldr.w	pc, [sp], #8
   88422:	bf00      	nop

00088424 <__aeabi_dcmple>:
   88424:	f84d ed08 	str.w	lr, [sp, #-8]!
   88428:	f7ff ffe0 	bl	883ec <__aeabi_cdcmpeq>
   8842c:	bf94      	ite	ls
   8842e:	2001      	movls	r0, #1
   88430:	2000      	movhi	r0, #0
   88432:	f85d fb08 	ldr.w	pc, [sp], #8
   88436:	bf00      	nop

00088438 <__aeabi_dcmpge>:
   88438:	f84d ed08 	str.w	lr, [sp, #-8]!
   8843c:	f7ff ffce 	bl	883dc <__aeabi_cdrcmple>
   88440:	bf94      	ite	ls
   88442:	2001      	movls	r0, #1
   88444:	2000      	movhi	r0, #0
   88446:	f85d fb08 	ldr.w	pc, [sp], #8
   8844a:	bf00      	nop

0008844c <__aeabi_dcmpgt>:
   8844c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88450:	f7ff ffc4 	bl	883dc <__aeabi_cdrcmple>
   88454:	bf34      	ite	cc
   88456:	2001      	movcc	r0, #1
   88458:	2000      	movcs	r0, #0
   8845a:	f85d fb08 	ldr.w	pc, [sp], #8
   8845e:	bf00      	nop

00088460 <__aeabi_d2iz>:
   88460:	ea4f 0241 	mov.w	r2, r1, lsl #1
   88464:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   88468:	d215      	bcs.n	88496 <__aeabi_d2iz+0x36>
   8846a:	d511      	bpl.n	88490 <__aeabi_d2iz+0x30>
   8846c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   88470:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   88474:	d912      	bls.n	8849c <__aeabi_d2iz+0x3c>
   88476:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8847a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8847e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   88482:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88486:	fa23 f002 	lsr.w	r0, r3, r2
   8848a:	bf18      	it	ne
   8848c:	4240      	negne	r0, r0
   8848e:	4770      	bx	lr
   88490:	f04f 0000 	mov.w	r0, #0
   88494:	4770      	bx	lr
   88496:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8849a:	d105      	bne.n	884a8 <__aeabi_d2iz+0x48>
   8849c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   884a0:	bf08      	it	eq
   884a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   884a6:	4770      	bx	lr
   884a8:	f04f 0000 	mov.w	r0, #0
   884ac:	4770      	bx	lr
   884ae:	bf00      	nop

000884b0 <__aeabi_d2uiz>:
   884b0:	004a      	lsls	r2, r1, #1
   884b2:	d211      	bcs.n	884d8 <__aeabi_d2uiz+0x28>
   884b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   884b8:	d211      	bcs.n	884de <__aeabi_d2uiz+0x2e>
   884ba:	d50d      	bpl.n	884d8 <__aeabi_d2uiz+0x28>
   884bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   884c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   884c4:	d40e      	bmi.n	884e4 <__aeabi_d2uiz+0x34>
   884c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   884ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   884ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   884d2:	fa23 f002 	lsr.w	r0, r3, r2
   884d6:	4770      	bx	lr
   884d8:	f04f 0000 	mov.w	r0, #0
   884dc:	4770      	bx	lr
   884de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   884e2:	d102      	bne.n	884ea <__aeabi_d2uiz+0x3a>
   884e4:	f04f 30ff 	mov.w	r0, #4294967295
   884e8:	4770      	bx	lr
   884ea:	f04f 0000 	mov.w	r0, #0
   884ee:	4770      	bx	lr

000884f0 <__aeabi_uldivmod>:
   884f0:	b953      	cbnz	r3, 88508 <__aeabi_uldivmod+0x18>
   884f2:	b94a      	cbnz	r2, 88508 <__aeabi_uldivmod+0x18>
   884f4:	2900      	cmp	r1, #0
   884f6:	bf08      	it	eq
   884f8:	2800      	cmpeq	r0, #0
   884fa:	bf1c      	itt	ne
   884fc:	f04f 31ff 	movne.w	r1, #4294967295
   88500:	f04f 30ff 	movne.w	r0, #4294967295
   88504:	f000 b83c 	b.w	88580 <__aeabi_idiv0>
   88508:	b082      	sub	sp, #8
   8850a:	46ec      	mov	ip, sp
   8850c:	e92d 5000 	stmdb	sp!, {ip, lr}
   88510:	f000 f81e 	bl	88550 <__gnu_uldivmod_helper>
   88514:	f8dd e004 	ldr.w	lr, [sp, #4]
   88518:	b002      	add	sp, #8
   8851a:	bc0c      	pop	{r2, r3}
   8851c:	4770      	bx	lr
   8851e:	bf00      	nop

00088520 <__gnu_ldivmod_helper>:
   88520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88524:	9c06      	ldr	r4, [sp, #24]
   88526:	4690      	mov	r8, r2
   88528:	4606      	mov	r6, r0
   8852a:	460f      	mov	r7, r1
   8852c:	461d      	mov	r5, r3
   8852e:	f000 f829 	bl	88584 <__divdi3>
   88532:	fb08 fc01 	mul.w	ip, r8, r1
   88536:	fba8 2300 	umull	r2, r3, r8, r0
   8853a:	fb00 c505 	mla	r5, r0, r5, ip
   8853e:	1ab2      	subs	r2, r6, r2
   88540:	442b      	add	r3, r5
   88542:	eb67 0303 	sbc.w	r3, r7, r3
   88546:	4686      	mov	lr, r0
   88548:	e9c4 2300 	strd	r2, r3, [r4]
   8854c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00088550 <__gnu_uldivmod_helper>:
   88550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   88554:	9e08      	ldr	r6, [sp, #32]
   88556:	4617      	mov	r7, r2
   88558:	4680      	mov	r8, r0
   8855a:	4689      	mov	r9, r1
   8855c:	461d      	mov	r5, r3
   8855e:	f000 f967 	bl	88830 <__udivdi3>
   88562:	fb00 f305 	mul.w	r3, r0, r5
   88566:	fba0 4507 	umull	r4, r5, r0, r7
   8856a:	fb07 3701 	mla	r7, r7, r1, r3
   8856e:	ebb8 0404 	subs.w	r4, r8, r4
   88572:	443d      	add	r5, r7
   88574:	eb69 0505 	sbc.w	r5, r9, r5
   88578:	e9c6 4500 	strd	r4, r5, [r6]
   8857c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00088580 <__aeabi_idiv0>:
   88580:	4770      	bx	lr
   88582:	bf00      	nop

00088584 <__divdi3>:
   88584:	2900      	cmp	r1, #0
   88586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8858a:	f2c0 80a8 	blt.w	886de <__divdi3+0x15a>
   8858e:	2600      	movs	r6, #0
   88590:	2b00      	cmp	r3, #0
   88592:	f2c0 809e 	blt.w	886d2 <__divdi3+0x14e>
   88596:	4681      	mov	r9, r0
   88598:	468e      	mov	lr, r1
   8859a:	4690      	mov	r8, r2
   8859c:	469c      	mov	ip, r3
   8859e:	4617      	mov	r7, r2
   885a0:	4604      	mov	r4, r0
   885a2:	460d      	mov	r5, r1
   885a4:	2b00      	cmp	r3, #0
   885a6:	d13d      	bne.n	88624 <__divdi3+0xa0>
   885a8:	428a      	cmp	r2, r1
   885aa:	d959      	bls.n	88660 <__divdi3+0xdc>
   885ac:	fab2 f382 	clz	r3, r2
   885b0:	b13b      	cbz	r3, 885c2 <__divdi3+0x3e>
   885b2:	f1c3 0220 	rsb	r2, r3, #32
   885b6:	409d      	lsls	r5, r3
   885b8:	fa20 f202 	lsr.w	r2, r0, r2
   885bc:	409f      	lsls	r7, r3
   885be:	4315      	orrs	r5, r2
   885c0:	409c      	lsls	r4, r3
   885c2:	0c39      	lsrs	r1, r7, #16
   885c4:	fbb5 f0f1 	udiv	r0, r5, r1
   885c8:	fa1f fe87 	uxth.w	lr, r7
   885cc:	fb01 5510 	mls	r5, r1, r0, r5
   885d0:	fb0e f300 	mul.w	r3, lr, r0
   885d4:	0c22      	lsrs	r2, r4, #16
   885d6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   885da:	42ab      	cmp	r3, r5
   885dc:	d909      	bls.n	885f2 <__divdi3+0x6e>
   885de:	19ed      	adds	r5, r5, r7
   885e0:	f100 32ff 	add.w	r2, r0, #4294967295
   885e4:	f080 810b 	bcs.w	887fe <__divdi3+0x27a>
   885e8:	42ab      	cmp	r3, r5
   885ea:	f240 8108 	bls.w	887fe <__divdi3+0x27a>
   885ee:	3802      	subs	r0, #2
   885f0:	443d      	add	r5, r7
   885f2:	1aed      	subs	r5, r5, r3
   885f4:	fbb5 f3f1 	udiv	r3, r5, r1
   885f8:	fb01 5513 	mls	r5, r1, r3, r5
   885fc:	fb0e fe03 	mul.w	lr, lr, r3
   88600:	b2a4      	uxth	r4, r4
   88602:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   88606:	45ae      	cmp	lr, r5
   88608:	d908      	bls.n	8861c <__divdi3+0x98>
   8860a:	19ed      	adds	r5, r5, r7
   8860c:	f103 32ff 	add.w	r2, r3, #4294967295
   88610:	f080 80f7 	bcs.w	88802 <__divdi3+0x27e>
   88614:	45ae      	cmp	lr, r5
   88616:	f240 80f4 	bls.w	88802 <__divdi3+0x27e>
   8861a:	3b02      	subs	r3, #2
   8861c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   88620:	2200      	movs	r2, #0
   88622:	e003      	b.n	8862c <__divdi3+0xa8>
   88624:	428b      	cmp	r3, r1
   88626:	d90f      	bls.n	88648 <__divdi3+0xc4>
   88628:	2200      	movs	r2, #0
   8862a:	4613      	mov	r3, r2
   8862c:	1c34      	adds	r4, r6, #0
   8862e:	bf18      	it	ne
   88630:	2401      	movne	r4, #1
   88632:	4260      	negs	r0, r4
   88634:	f04f 0500 	mov.w	r5, #0
   88638:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   8863c:	4058      	eors	r0, r3
   8863e:	4051      	eors	r1, r2
   88640:	1900      	adds	r0, r0, r4
   88642:	4169      	adcs	r1, r5
   88644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   88648:	fab3 f283 	clz	r2, r3
   8864c:	2a00      	cmp	r2, #0
   8864e:	f040 8089 	bne.w	88764 <__divdi3+0x1e0>
   88652:	428b      	cmp	r3, r1
   88654:	d302      	bcc.n	8865c <__divdi3+0xd8>
   88656:	4580      	cmp	r8, r0
   88658:	f200 80e2 	bhi.w	88820 <__divdi3+0x29c>
   8865c:	2301      	movs	r3, #1
   8865e:	e7e5      	b.n	8862c <__divdi3+0xa8>
   88660:	b912      	cbnz	r2, 88668 <__divdi3+0xe4>
   88662:	2301      	movs	r3, #1
   88664:	fbb3 f7f2 	udiv	r7, r3, r2
   88668:	fab7 f887 	clz	r8, r7
   8866c:	f1b8 0f00 	cmp.w	r8, #0
   88670:	d13b      	bne.n	886ea <__divdi3+0x166>
   88672:	1bed      	subs	r5, r5, r7
   88674:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   88678:	fa1f fe87 	uxth.w	lr, r7
   8867c:	2201      	movs	r2, #1
   8867e:	fbb5 f0fc 	udiv	r0, r5, ip
   88682:	fb0c 5510 	mls	r5, ip, r0, r5
   88686:	fb0e f300 	mul.w	r3, lr, r0
   8868a:	0c21      	lsrs	r1, r4, #16
   8868c:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   88690:	42ab      	cmp	r3, r5
   88692:	d907      	bls.n	886a4 <__divdi3+0x120>
   88694:	19ed      	adds	r5, r5, r7
   88696:	f100 31ff 	add.w	r1, r0, #4294967295
   8869a:	d202      	bcs.n	886a2 <__divdi3+0x11e>
   8869c:	42ab      	cmp	r3, r5
   8869e:	f200 80c3 	bhi.w	88828 <__divdi3+0x2a4>
   886a2:	4608      	mov	r0, r1
   886a4:	1aed      	subs	r5, r5, r3
   886a6:	fbb5 f3fc 	udiv	r3, r5, ip
   886aa:	fb0c 5513 	mls	r5, ip, r3, r5
   886ae:	fb0e fe03 	mul.w	lr, lr, r3
   886b2:	b2a4      	uxth	r4, r4
   886b4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   886b8:	45ae      	cmp	lr, r5
   886ba:	d907      	bls.n	886cc <__divdi3+0x148>
   886bc:	19ed      	adds	r5, r5, r7
   886be:	f103 31ff 	add.w	r1, r3, #4294967295
   886c2:	d202      	bcs.n	886ca <__divdi3+0x146>
   886c4:	45ae      	cmp	lr, r5
   886c6:	f200 80ad 	bhi.w	88824 <__divdi3+0x2a0>
   886ca:	460b      	mov	r3, r1
   886cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   886d0:	e7ac      	b.n	8862c <__divdi3+0xa8>
   886d2:	4252      	negs	r2, r2
   886d4:	ea6f 0606 	mvn.w	r6, r6
   886d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   886dc:	e75b      	b.n	88596 <__divdi3+0x12>
   886de:	4240      	negs	r0, r0
   886e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   886e4:	f04f 36ff 	mov.w	r6, #4294967295
   886e8:	e752      	b.n	88590 <__divdi3+0xc>
   886ea:	fa07 f708 	lsl.w	r7, r7, r8
   886ee:	f1c8 0220 	rsb	r2, r8, #32
   886f2:	fa25 f302 	lsr.w	r3, r5, r2
   886f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   886fa:	fbb3 f1fc 	udiv	r1, r3, ip
   886fe:	fa1f fe87 	uxth.w	lr, r7
   88702:	fb0c 3311 	mls	r3, ip, r1, r3
   88706:	fa24 f202 	lsr.w	r2, r4, r2
   8870a:	fa05 f508 	lsl.w	r5, r5, r8
   8870e:	fb0e f901 	mul.w	r9, lr, r1
   88712:	432a      	orrs	r2, r5
   88714:	0c10      	lsrs	r0, r2, #16
   88716:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   8871a:	4599      	cmp	r9, r3
   8871c:	fa04 f408 	lsl.w	r4, r4, r8
   88720:	d907      	bls.n	88732 <__divdi3+0x1ae>
   88722:	19db      	adds	r3, r3, r7
   88724:	f101 30ff 	add.w	r0, r1, #4294967295
   88728:	d278      	bcs.n	8881c <__divdi3+0x298>
   8872a:	4599      	cmp	r9, r3
   8872c:	d976      	bls.n	8881c <__divdi3+0x298>
   8872e:	3902      	subs	r1, #2
   88730:	443b      	add	r3, r7
   88732:	ebc9 0303 	rsb	r3, r9, r3
   88736:	fbb3 f0fc 	udiv	r0, r3, ip
   8873a:	fb0c 3310 	mls	r3, ip, r0, r3
   8873e:	fb0e f500 	mul.w	r5, lr, r0
   88742:	b292      	uxth	r2, r2
   88744:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   88748:	429d      	cmp	r5, r3
   8874a:	d907      	bls.n	8875c <__divdi3+0x1d8>
   8874c:	19db      	adds	r3, r3, r7
   8874e:	f100 32ff 	add.w	r2, r0, #4294967295
   88752:	d25f      	bcs.n	88814 <__divdi3+0x290>
   88754:	429d      	cmp	r5, r3
   88756:	d95d      	bls.n	88814 <__divdi3+0x290>
   88758:	3802      	subs	r0, #2
   8875a:	443b      	add	r3, r7
   8875c:	1b5d      	subs	r5, r3, r5
   8875e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   88762:	e78c      	b.n	8867e <__divdi3+0xfa>
   88764:	f1c2 0320 	rsb	r3, r2, #32
   88768:	fa28 f103 	lsr.w	r1, r8, r3
   8876c:	fa0c fc02 	lsl.w	ip, ip, r2
   88770:	ea41 0c0c 	orr.w	ip, r1, ip
   88774:	ea4f 401c 	mov.w	r0, ip, lsr #16
   88778:	fa2e f103 	lsr.w	r1, lr, r3
   8877c:	fbb1 f5f0 	udiv	r5, r1, r0
   88780:	fa1f f78c 	uxth.w	r7, ip
   88784:	fb00 1115 	mls	r1, r0, r5, r1
   88788:	fa29 f303 	lsr.w	r3, r9, r3
   8878c:	fa0e fe02 	lsl.w	lr, lr, r2
   88790:	fb07 f905 	mul.w	r9, r7, r5
   88794:	ea43 0e0e 	orr.w	lr, r3, lr
   88798:	ea4f 431e 	mov.w	r3, lr, lsr #16
   8879c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   887a0:	4589      	cmp	r9, r1
   887a2:	fa08 f802 	lsl.w	r8, r8, r2
   887a6:	d908      	bls.n	887ba <__divdi3+0x236>
   887a8:	eb11 010c 	adds.w	r1, r1, ip
   887ac:	f105 33ff 	add.w	r3, r5, #4294967295
   887b0:	d232      	bcs.n	88818 <__divdi3+0x294>
   887b2:	4589      	cmp	r9, r1
   887b4:	d930      	bls.n	88818 <__divdi3+0x294>
   887b6:	3d02      	subs	r5, #2
   887b8:	4461      	add	r1, ip
   887ba:	ebc9 0101 	rsb	r1, r9, r1
   887be:	fbb1 f3f0 	udiv	r3, r1, r0
   887c2:	fb00 1113 	mls	r1, r0, r3, r1
   887c6:	fb07 f703 	mul.w	r7, r7, r3
   887ca:	fa1f fe8e 	uxth.w	lr, lr
   887ce:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   887d2:	4577      	cmp	r7, lr
   887d4:	d908      	bls.n	887e8 <__divdi3+0x264>
   887d6:	eb1e 0e0c 	adds.w	lr, lr, ip
   887da:	f103 31ff 	add.w	r1, r3, #4294967295
   887de:	d217      	bcs.n	88810 <__divdi3+0x28c>
   887e0:	4577      	cmp	r7, lr
   887e2:	d915      	bls.n	88810 <__divdi3+0x28c>
   887e4:	3b02      	subs	r3, #2
   887e6:	44e6      	add	lr, ip
   887e8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   887ec:	fba3 8908 	umull	r8, r9, r3, r8
   887f0:	ebc7 0e0e 	rsb	lr, r7, lr
   887f4:	45ce      	cmp	lr, r9
   887f6:	d309      	bcc.n	8880c <__divdi3+0x288>
   887f8:	d005      	beq.n	88806 <__divdi3+0x282>
   887fa:	2200      	movs	r2, #0
   887fc:	e716      	b.n	8862c <__divdi3+0xa8>
   887fe:	4610      	mov	r0, r2
   88800:	e6f7      	b.n	885f2 <__divdi3+0x6e>
   88802:	4613      	mov	r3, r2
   88804:	e70a      	b.n	8861c <__divdi3+0x98>
   88806:	4094      	lsls	r4, r2
   88808:	4544      	cmp	r4, r8
   8880a:	d2f6      	bcs.n	887fa <__divdi3+0x276>
   8880c:	3b01      	subs	r3, #1
   8880e:	e7f4      	b.n	887fa <__divdi3+0x276>
   88810:	460b      	mov	r3, r1
   88812:	e7e9      	b.n	887e8 <__divdi3+0x264>
   88814:	4610      	mov	r0, r2
   88816:	e7a1      	b.n	8875c <__divdi3+0x1d8>
   88818:	461d      	mov	r5, r3
   8881a:	e7ce      	b.n	887ba <__divdi3+0x236>
   8881c:	4601      	mov	r1, r0
   8881e:	e788      	b.n	88732 <__divdi3+0x1ae>
   88820:	4613      	mov	r3, r2
   88822:	e703      	b.n	8862c <__divdi3+0xa8>
   88824:	3b02      	subs	r3, #2
   88826:	e751      	b.n	886cc <__divdi3+0x148>
   88828:	3802      	subs	r0, #2
   8882a:	443d      	add	r5, r7
   8882c:	e73a      	b.n	886a4 <__divdi3+0x120>
   8882e:	bf00      	nop

00088830 <__udivdi3>:
   88830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   88834:	2b00      	cmp	r3, #0
   88836:	d144      	bne.n	888c2 <__udivdi3+0x92>
   88838:	428a      	cmp	r2, r1
   8883a:	4615      	mov	r5, r2
   8883c:	4604      	mov	r4, r0
   8883e:	d94f      	bls.n	888e0 <__udivdi3+0xb0>
   88840:	fab2 f782 	clz	r7, r2
   88844:	460e      	mov	r6, r1
   88846:	b14f      	cbz	r7, 8885c <__udivdi3+0x2c>
   88848:	f1c7 0320 	rsb	r3, r7, #32
   8884c:	40b9      	lsls	r1, r7
   8884e:	fa20 f603 	lsr.w	r6, r0, r3
   88852:	fa02 f507 	lsl.w	r5, r2, r7
   88856:	430e      	orrs	r6, r1
   88858:	fa00 f407 	lsl.w	r4, r0, r7
   8885c:	0c2f      	lsrs	r7, r5, #16
   8885e:	fbb6 f0f7 	udiv	r0, r6, r7
   88862:	fa1f fe85 	uxth.w	lr, r5
   88866:	fb07 6210 	mls	r2, r7, r0, r6
   8886a:	fb0e f100 	mul.w	r1, lr, r0
   8886e:	0c26      	lsrs	r6, r4, #16
   88870:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   88874:	4299      	cmp	r1, r3
   88876:	d909      	bls.n	8888c <__udivdi3+0x5c>
   88878:	195b      	adds	r3, r3, r5
   8887a:	f100 32ff 	add.w	r2, r0, #4294967295
   8887e:	f080 80ee 	bcs.w	88a5e <__udivdi3+0x22e>
   88882:	4299      	cmp	r1, r3
   88884:	f240 80eb 	bls.w	88a5e <__udivdi3+0x22e>
   88888:	3802      	subs	r0, #2
   8888a:	442b      	add	r3, r5
   8888c:	1a59      	subs	r1, r3, r1
   8888e:	fbb1 f3f7 	udiv	r3, r1, r7
   88892:	fb07 1113 	mls	r1, r7, r3, r1
   88896:	fb0e fe03 	mul.w	lr, lr, r3
   8889a:	b2a4      	uxth	r4, r4
   8889c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   888a0:	458e      	cmp	lr, r1
   888a2:	d908      	bls.n	888b6 <__udivdi3+0x86>
   888a4:	1949      	adds	r1, r1, r5
   888a6:	f103 32ff 	add.w	r2, r3, #4294967295
   888aa:	f080 80da 	bcs.w	88a62 <__udivdi3+0x232>
   888ae:	458e      	cmp	lr, r1
   888b0:	f240 80d7 	bls.w	88a62 <__udivdi3+0x232>
   888b4:	3b02      	subs	r3, #2
   888b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   888ba:	2600      	movs	r6, #0
   888bc:	4631      	mov	r1, r6
   888be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   888c2:	428b      	cmp	r3, r1
   888c4:	d847      	bhi.n	88956 <__udivdi3+0x126>
   888c6:	fab3 f683 	clz	r6, r3
   888ca:	2e00      	cmp	r6, #0
   888cc:	d148      	bne.n	88960 <__udivdi3+0x130>
   888ce:	428b      	cmp	r3, r1
   888d0:	d302      	bcc.n	888d8 <__udivdi3+0xa8>
   888d2:	4282      	cmp	r2, r0
   888d4:	f200 80cf 	bhi.w	88a76 <__udivdi3+0x246>
   888d8:	2001      	movs	r0, #1
   888da:	4631      	mov	r1, r6
   888dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   888e0:	b912      	cbnz	r2, 888e8 <__udivdi3+0xb8>
   888e2:	2501      	movs	r5, #1
   888e4:	fbb5 f5f2 	udiv	r5, r5, r2
   888e8:	fab5 fc85 	clz	ip, r5
   888ec:	f1bc 0f00 	cmp.w	ip, #0
   888f0:	d178      	bne.n	889e4 <__udivdi3+0x1b4>
   888f2:	1b49      	subs	r1, r1, r5
   888f4:	0c2f      	lsrs	r7, r5, #16
   888f6:	fa1f fe85 	uxth.w	lr, r5
   888fa:	2601      	movs	r6, #1
   888fc:	fbb1 f0f7 	udiv	r0, r1, r7
   88900:	fb07 1110 	mls	r1, r7, r0, r1
   88904:	fb0e f200 	mul.w	r2, lr, r0
   88908:	0c23      	lsrs	r3, r4, #16
   8890a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8890e:	428a      	cmp	r2, r1
   88910:	d907      	bls.n	88922 <__udivdi3+0xf2>
   88912:	1949      	adds	r1, r1, r5
   88914:	f100 33ff 	add.w	r3, r0, #4294967295
   88918:	d202      	bcs.n	88920 <__udivdi3+0xf0>
   8891a:	428a      	cmp	r2, r1
   8891c:	f200 80bc 	bhi.w	88a98 <__udivdi3+0x268>
   88920:	4618      	mov	r0, r3
   88922:	1a89      	subs	r1, r1, r2
   88924:	fbb1 f3f7 	udiv	r3, r1, r7
   88928:	fb07 1113 	mls	r1, r7, r3, r1
   8892c:	fb0e fe03 	mul.w	lr, lr, r3
   88930:	b2a4      	uxth	r4, r4
   88932:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   88936:	4596      	cmp	lr, r2
   88938:	d908      	bls.n	8894c <__udivdi3+0x11c>
   8893a:	1952      	adds	r2, r2, r5
   8893c:	f103 31ff 	add.w	r1, r3, #4294967295
   88940:	f080 8091 	bcs.w	88a66 <__udivdi3+0x236>
   88944:	4596      	cmp	lr, r2
   88946:	f240 808e 	bls.w	88a66 <__udivdi3+0x236>
   8894a:	3b02      	subs	r3, #2
   8894c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   88950:	4631      	mov	r1, r6
   88952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   88956:	2600      	movs	r6, #0
   88958:	4630      	mov	r0, r6
   8895a:	4631      	mov	r1, r6
   8895c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   88960:	f1c6 0420 	rsb	r4, r6, #32
   88964:	fa22 f504 	lsr.w	r5, r2, r4
   88968:	40b3      	lsls	r3, r6
   8896a:	432b      	orrs	r3, r5
   8896c:	fa21 f704 	lsr.w	r7, r1, r4
   88970:	ea4f 4813 	mov.w	r8, r3, lsr #16
   88974:	fbb7 fcf8 	udiv	ip, r7, r8
   88978:	fa1f f983 	uxth.w	r9, r3
   8897c:	fb08 771c 	mls	r7, r8, ip, r7
   88980:	fa20 fe04 	lsr.w	lr, r0, r4
   88984:	fa01 f506 	lsl.w	r5, r1, r6
   88988:	fb09 f40c 	mul.w	r4, r9, ip
   8898c:	ea4e 0505 	orr.w	r5, lr, r5
   88990:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   88994:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   88998:	42bc      	cmp	r4, r7
   8899a:	fa02 f206 	lsl.w	r2, r2, r6
   8899e:	d904      	bls.n	889aa <__udivdi3+0x17a>
   889a0:	18ff      	adds	r7, r7, r3
   889a2:	f10c 31ff 	add.w	r1, ip, #4294967295
   889a6:	d368      	bcc.n	88a7a <__udivdi3+0x24a>
   889a8:	468c      	mov	ip, r1
   889aa:	1b3f      	subs	r7, r7, r4
   889ac:	fbb7 f4f8 	udiv	r4, r7, r8
   889b0:	fb08 7714 	mls	r7, r8, r4, r7
   889b4:	fb09 f904 	mul.w	r9, r9, r4
   889b8:	b2ad      	uxth	r5, r5
   889ba:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   889be:	4589      	cmp	r9, r1
   889c0:	d904      	bls.n	889cc <__udivdi3+0x19c>
   889c2:	18c9      	adds	r1, r1, r3
   889c4:	f104 35ff 	add.w	r5, r4, #4294967295
   889c8:	d35d      	bcc.n	88a86 <__udivdi3+0x256>
   889ca:	462c      	mov	r4, r5
   889cc:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   889d0:	fba4 2302 	umull	r2, r3, r4, r2
   889d4:	ebc9 0101 	rsb	r1, r9, r1
   889d8:	4299      	cmp	r1, r3
   889da:	d349      	bcc.n	88a70 <__udivdi3+0x240>
   889dc:	d045      	beq.n	88a6a <__udivdi3+0x23a>
   889de:	4620      	mov	r0, r4
   889e0:	2600      	movs	r6, #0
   889e2:	e76b      	b.n	888bc <__udivdi3+0x8c>
   889e4:	f1cc 0420 	rsb	r4, ip, #32
   889e8:	fa05 f50c 	lsl.w	r5, r5, ip
   889ec:	fa21 f304 	lsr.w	r3, r1, r4
   889f0:	0c2a      	lsrs	r2, r5, #16
   889f2:	fbb3 f6f2 	udiv	r6, r3, r2
   889f6:	fa1f fe85 	uxth.w	lr, r5
   889fa:	fb02 3816 	mls	r8, r2, r6, r3
   889fe:	fa20 f704 	lsr.w	r7, r0, r4
   88a02:	fa01 f10c 	lsl.w	r1, r1, ip
   88a06:	fb0e f906 	mul.w	r9, lr, r6
   88a0a:	430f      	orrs	r7, r1
   88a0c:	0c3c      	lsrs	r4, r7, #16
   88a0e:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   88a12:	4599      	cmp	r9, r3
   88a14:	fa00 f40c 	lsl.w	r4, r0, ip
   88a18:	d907      	bls.n	88a2a <__udivdi3+0x1fa>
   88a1a:	195b      	adds	r3, r3, r5
   88a1c:	f106 31ff 	add.w	r1, r6, #4294967295
   88a20:	d238      	bcs.n	88a94 <__udivdi3+0x264>
   88a22:	4599      	cmp	r9, r3
   88a24:	d936      	bls.n	88a94 <__udivdi3+0x264>
   88a26:	3e02      	subs	r6, #2
   88a28:	442b      	add	r3, r5
   88a2a:	ebc9 0303 	rsb	r3, r9, r3
   88a2e:	fbb3 f0f2 	udiv	r0, r3, r2
   88a32:	fb02 3310 	mls	r3, r2, r0, r3
   88a36:	fb0e f100 	mul.w	r1, lr, r0
   88a3a:	b2bf      	uxth	r7, r7
   88a3c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   88a40:	4299      	cmp	r1, r3
   88a42:	d907      	bls.n	88a54 <__udivdi3+0x224>
   88a44:	195b      	adds	r3, r3, r5
   88a46:	f100 37ff 	add.w	r7, r0, #4294967295
   88a4a:	d221      	bcs.n	88a90 <__udivdi3+0x260>
   88a4c:	4299      	cmp	r1, r3
   88a4e:	d91f      	bls.n	88a90 <__udivdi3+0x260>
   88a50:	3802      	subs	r0, #2
   88a52:	442b      	add	r3, r5
   88a54:	4617      	mov	r7, r2
   88a56:	1a59      	subs	r1, r3, r1
   88a58:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   88a5c:	e74e      	b.n	888fc <__udivdi3+0xcc>
   88a5e:	4610      	mov	r0, r2
   88a60:	e714      	b.n	8888c <__udivdi3+0x5c>
   88a62:	4613      	mov	r3, r2
   88a64:	e727      	b.n	888b6 <__udivdi3+0x86>
   88a66:	460b      	mov	r3, r1
   88a68:	e770      	b.n	8894c <__udivdi3+0x11c>
   88a6a:	40b0      	lsls	r0, r6
   88a6c:	4290      	cmp	r0, r2
   88a6e:	d2b6      	bcs.n	889de <__udivdi3+0x1ae>
   88a70:	1e60      	subs	r0, r4, #1
   88a72:	2600      	movs	r6, #0
   88a74:	e722      	b.n	888bc <__udivdi3+0x8c>
   88a76:	4630      	mov	r0, r6
   88a78:	e720      	b.n	888bc <__udivdi3+0x8c>
   88a7a:	42bc      	cmp	r4, r7
   88a7c:	d994      	bls.n	889a8 <__udivdi3+0x178>
   88a7e:	f1ac 0c02 	sub.w	ip, ip, #2
   88a82:	441f      	add	r7, r3
   88a84:	e791      	b.n	889aa <__udivdi3+0x17a>
   88a86:	4589      	cmp	r9, r1
   88a88:	d99f      	bls.n	889ca <__udivdi3+0x19a>
   88a8a:	3c02      	subs	r4, #2
   88a8c:	4419      	add	r1, r3
   88a8e:	e79d      	b.n	889cc <__udivdi3+0x19c>
   88a90:	4638      	mov	r0, r7
   88a92:	e7df      	b.n	88a54 <__udivdi3+0x224>
   88a94:	460e      	mov	r6, r1
   88a96:	e7c8      	b.n	88a2a <__udivdi3+0x1fa>
   88a98:	3802      	subs	r0, #2
   88a9a:	4429      	add	r1, r5
   88a9c:	e741      	b.n	88922 <__udivdi3+0xf2>
   88a9e:	bf00      	nop
   88aa0:	09097325 	.word	0x09097325
   88aa4:	25096325 	.word	0x25096325
   88aa8:	75250975 	.word	0x75250975
   88aac:	0d752509 	.word	0x0d752509
   88ab0:	0000000a 	.word	0x0000000a
   88ab4:	454c4449 	.word	0x454c4449
   88ab8:	00000000 	.word	0x00000000
   88abc:	00000a0d 	.word	0x00000a0d
   88ac0:	20726d54 	.word	0x20726d54
   88ac4:	00637653 	.word	0x00637653
   88ac8:	00000001 	.word	0x00000001
   88acc:	00000002 	.word	0x00000002
   88ad0:	00000004 	.word	0x00000004
   88ad4:	00000008 	.word	0x00000008
   88ad8:	00000010 	.word	0x00000010
   88adc:	00000020 	.word	0x00000020
   88ae0:	00000040 	.word	0x00000040
   88ae4:	00000080 	.word	0x00000080
   88ae8:	00000100 	.word	0x00000100
   88aec:	00000200 	.word	0x00000200
   88af0:	00000400 	.word	0x00000400
   88af4:	006d6f43 	.word	0x006d6f43
   88af8:	00676552 	.word	0x00676552
   88afc:	00000043 	.word	0x00000043

00088b00 <_global_impure_ptr>:
   88b00:	20070140 00000000                       @.. ....

00088b08 <tinytens>:
   88b08:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   88b18:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   88b28:	64ac6f43 11680628                       Co.d(.h.

00088b30 <fpinan.5307>:
   88b30:	00000034 fffffbce 000003cb 00000001     4...............
   88b40:	00000000 0000666e 74696e69 00000079     ....nf..inity...
   88b50:	00006e61                                an..

00088b54 <fpi.5271>:
   88b54:	00000035 fffffbce 000003cb 00000001     5...............
   88b64:	00000000 33323130 37363534 62613938     ....0123456789ab
   88b74:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
   88b84:	76757473 7a797877 00000000              stuvwxyz....

00088b90 <zeroes.6869>:
   88b90:	30303030 30303030 30303030 30303030     0000000000000000
   88ba0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   88bb0:	00000000 33323130 37363534 62613938     ....0123456789ab
   88bc0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00088bd0 <blanks.6868>:
   88bd0:	20202020 20202020 20202020 20202020                     

00088be0 <_ctype_>:
   88be0:	20202000 20202020 28282020 20282828     .         ((((( 
   88bf0:	20202020 20202020 20202020 20202020                     
   88c00:	10108820 10101010 10101010 10101010      ...............
   88c10:	04040410 04040404 10040404 10101010     ................
   88c20:	41411010 41414141 01010101 01010101     ..AAAAAA........
   88c30:	01010101 01010101 01010101 10101010     ................
   88c40:	42421010 42424242 02020202 02020202     ..BBBBBB........
   88c50:	02020202 02020202 02020202 10101010     ................
   88c60:	00000020 00000000 00000000 00000000      ...............
	...

00088ce4 <__hexdig>:
	...
   88d14:	13121110 17161514 00001918 00000000     ................
   88d24:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
   88d44:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
   88de4:	49534f50 00000058 0000002e              POSIX.......

00088df0 <__mprec_tens>:
   88df0:	00000000 3ff00000 00000000 40240000     .......?......$@
   88e00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   88e10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   88e20:	00000000 412e8480 00000000 416312d0     .......A......cA
   88e30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   88e40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   88e50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   88e60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   88e70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   88e80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   88e90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   88ea0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88eb0:	79d99db4 44ea7843                       ...yCx.D

00088eb8 <p05.5302>:
   88eb8:	00000005 00000019 0000007d 00000000     ........}.......

00088ec8 <__mprec_bigtens>:
   88ec8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88ed8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   88ee8:	7f73bf3c 75154fdd                       <.s..O.u

00088ef0 <_init>:
   88ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88ef2:	bf00      	nop
   88ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88ef6:	bc08      	pop	{r3}
   88ef8:	469e      	mov	lr, r3
   88efa:	4770      	bx	lr

00088efc <__init_array_start>:
   88efc:	00085165 	.word	0x00085165

00088f00 <__frame_dummy_init_array_entry>:
   88f00:	00080119                                ....

00088f04 <_fini>:
   88f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88f06:	bf00      	nop
   88f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88f0a:	bc08      	pop	{r3}
   88f0c:	469e      	mov	lr, r3
   88f0e:	4770      	bx	lr

00088f10 <__fini_array_start>:
   88f10:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007013c 	.word	0x2007013c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00088afc 00000000 00000000 00000000     ................
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <__ctype_ptr__>:
2007056c:	00088be0                                ....

20070570 <lconv>:
20070570:	00088dec 00088ab8 00088ab8 00088ab8     ................
20070580:	00088ab8 00088ab8 00088ab8 00088ab8     ................
20070590:	00088ab8 00088ab8 ffffffff ffffffff     ................
200705a0:	ffffffff 0000ffff                       ........

200705a8 <lc_ctype_charset>:
200705a8:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705c8 <__mb_cur_max>:
200705c8:	00000001                                ....

200705cc <__malloc_av_>:
	...
200705d4:	200705cc 200705cc 200705d4 200705d4     ... ... ... ... 
200705e4:	200705dc 200705dc 200705e4 200705e4     ... ... ... ... 
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 

200709d4 <__malloc_trim_threshold>:
200709d4:	00020000                                ....

200709d8 <__malloc_sbrk_base>:
200709d8:	ffffffff                                ....

200709dc <__wctomb>:
200709dc:	00087931                                1y..
